/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.common.services.model.impl;

import bd.gov.dgfood.common.services.model.APIAudit;
import bd.gov.dgfood.common.services.model.APIAuditModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the APIAudit service. Represents a row in the &quot;DGF_APIAudit&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>APIAuditModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link APIAuditImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see APIAuditImpl
 * @generated
 */
@JSON(strict = true)
public class APIAuditModelImpl
	extends BaseModelImpl<APIAudit> implements APIAuditModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a api audit model instance should use the <code>APIAudit</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGF_APIAudit";

	public static final Object[][] TABLE_COLUMNS = {
		{"apiAuditId", Types.BIGINT}, {"title", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"sender", Types.VARCHAR},
		{"receiver", Types.VARCHAR}, {"requestPayload", Types.VARCHAR},
		{"responsePayload", Types.VARCHAR}, {"requestClassName", Types.VARCHAR},
		{"requestClassPK", Types.BIGINT}, {"bulkRequest", Types.BOOLEAN},
		{"requestTime", Types.TIMESTAMP}, {"responseTime", Types.TIMESTAMP},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("apiAuditId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receiver", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestPayload", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("responsePayload", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestClassName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requestClassPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bulkRequest", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("requestTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("responseTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGF_APIAudit (apiAuditId LONG not null primary key,title VARCHAR(75) null,description VARCHAR(75) null,sender VARCHAR(75) null,receiver VARCHAR(75) null,requestPayload VARCHAR(75) null,responsePayload VARCHAR(75) null,requestClassName VARCHAR(75) null,requestClassPK LONG,bulkRequest BOOLEAN,requestTime DATE null,responseTime DATE null,userId LONG,createDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table DGF_APIAudit";

	public static final String ORDER_BY_JPQL =
		" ORDER BY apiAudit.apiAuditId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGF_APIAudit.apiAuditId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APIAUDITID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public APIAuditModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _apiAuditId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApiAuditId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _apiAuditId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return APIAudit.class;
	}

	@Override
	public String getModelClassName() {
		return APIAudit.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<APIAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<APIAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<APIAudit, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((APIAudit)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<APIAudit, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<APIAudit, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(APIAudit)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<APIAudit, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<APIAudit, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<APIAudit, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<APIAudit, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<APIAudit, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<APIAudit, Object>>();
		Map<String, BiConsumer<APIAudit, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<APIAudit, ?>>();

		attributeGetterFunctions.put("apiAuditId", APIAudit::getApiAuditId);
		attributeSetterBiConsumers.put(
			"apiAuditId", (BiConsumer<APIAudit, Long>)APIAudit::setApiAuditId);
		attributeGetterFunctions.put("title", APIAudit::getTitle);
		attributeSetterBiConsumers.put(
			"title", (BiConsumer<APIAudit, String>)APIAudit::setTitle);
		attributeGetterFunctions.put("description", APIAudit::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<APIAudit, String>)APIAudit::setDescription);
		attributeGetterFunctions.put("sender", APIAudit::getSender);
		attributeSetterBiConsumers.put(
			"sender", (BiConsumer<APIAudit, String>)APIAudit::setSender);
		attributeGetterFunctions.put("receiver", APIAudit::getReceiver);
		attributeSetterBiConsumers.put(
			"receiver", (BiConsumer<APIAudit, String>)APIAudit::setReceiver);
		attributeGetterFunctions.put(
			"requestPayload", APIAudit::getRequestPayload);
		attributeSetterBiConsumers.put(
			"requestPayload",
			(BiConsumer<APIAudit, String>)APIAudit::setRequestPayload);
		attributeGetterFunctions.put(
			"responsePayload", APIAudit::getResponsePayload);
		attributeSetterBiConsumers.put(
			"responsePayload",
			(BiConsumer<APIAudit, String>)APIAudit::setResponsePayload);
		attributeGetterFunctions.put(
			"requestClassName", APIAudit::getRequestClassName);
		attributeSetterBiConsumers.put(
			"requestClassName",
			(BiConsumer<APIAudit, String>)APIAudit::setRequestClassName);
		attributeGetterFunctions.put(
			"requestClassPK", APIAudit::getRequestClassPK);
		attributeSetterBiConsumers.put(
			"requestClassPK",
			(BiConsumer<APIAudit, Long>)APIAudit::setRequestClassPK);
		attributeGetterFunctions.put("bulkRequest", APIAudit::getBulkRequest);
		attributeSetterBiConsumers.put(
			"bulkRequest",
			(BiConsumer<APIAudit, Boolean>)APIAudit::setBulkRequest);
		attributeGetterFunctions.put("requestTime", APIAudit::getRequestTime);
		attributeSetterBiConsumers.put(
			"requestTime",
			(BiConsumer<APIAudit, Date>)APIAudit::setRequestTime);
		attributeGetterFunctions.put("responseTime", APIAudit::getResponseTime);
		attributeSetterBiConsumers.put(
			"responseTime",
			(BiConsumer<APIAudit, Date>)APIAudit::setResponseTime);
		attributeGetterFunctions.put("userId", APIAudit::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<APIAudit, Long>)APIAudit::setUserId);
		attributeGetterFunctions.put("createDate", APIAudit::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<APIAudit, Date>)APIAudit::setCreateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getApiAuditId() {
		return _apiAuditId;
	}

	@Override
	public void setApiAuditId(long apiAuditId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_apiAuditId = apiAuditId;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public void setDescription(String description) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_description = description;
	}

	@JSON
	@Override
	public String getSender() {
		if (_sender == null) {
			return "";
		}
		else {
			return _sender;
		}
	}

	@Override
	public void setSender(String sender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sender = sender;
	}

	@JSON
	@Override
	public String getReceiver() {
		if (_receiver == null) {
			return "";
		}
		else {
			return _receiver;
		}
	}

	@Override
	public void setReceiver(String receiver) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receiver = receiver;
	}

	@JSON
	@Override
	public String getRequestPayload() {
		if (_requestPayload == null) {
			return "";
		}
		else {
			return _requestPayload;
		}
	}

	@Override
	public void setRequestPayload(String requestPayload) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestPayload = requestPayload;
	}

	@JSON
	@Override
	public String getResponsePayload() {
		if (_responsePayload == null) {
			return "";
		}
		else {
			return _responsePayload;
		}
	}

	@Override
	public void setResponsePayload(String responsePayload) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_responsePayload = responsePayload;
	}

	@JSON
	@Override
	public String getRequestClassName() {
		if (_requestClassName == null) {
			return "";
		}
		else {
			return _requestClassName;
		}
	}

	@Override
	public void setRequestClassName(String requestClassName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestClassName = requestClassName;
	}

	@JSON
	@Override
	public long getRequestClassPK() {
		return _requestClassPK;
	}

	@Override
	public void setRequestClassPK(long requestClassPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestClassPK = requestClassPK;
	}

	@JSON
	@Override
	public boolean getBulkRequest() {
		return _bulkRequest;
	}

	@JSON
	@Override
	public boolean isBulkRequest() {
		return _bulkRequest;
	}

	@Override
	public void setBulkRequest(boolean bulkRequest) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bulkRequest = bulkRequest;
	}

	@JSON
	@Override
	public Date getRequestTime() {
		return _requestTime;
	}

	@Override
	public void setRequestTime(Date requestTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestTime = requestTime;
	}

	@JSON
	@Override
	public Date getResponseTime() {
		return _responseTime;
	}

	@Override
	public void setResponseTime(Date responseTime) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_responseTime = responseTime;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, APIAudit.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public APIAudit toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, APIAudit>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		APIAuditImpl apiAuditImpl = new APIAuditImpl();

		apiAuditImpl.setApiAuditId(getApiAuditId());
		apiAuditImpl.setTitle(getTitle());
		apiAuditImpl.setDescription(getDescription());
		apiAuditImpl.setSender(getSender());
		apiAuditImpl.setReceiver(getReceiver());
		apiAuditImpl.setRequestPayload(getRequestPayload());
		apiAuditImpl.setResponsePayload(getResponsePayload());
		apiAuditImpl.setRequestClassName(getRequestClassName());
		apiAuditImpl.setRequestClassPK(getRequestClassPK());
		apiAuditImpl.setBulkRequest(isBulkRequest());
		apiAuditImpl.setRequestTime(getRequestTime());
		apiAuditImpl.setResponseTime(getResponseTime());
		apiAuditImpl.setUserId(getUserId());
		apiAuditImpl.setCreateDate(getCreateDate());

		apiAuditImpl.resetOriginalValues();

		return apiAuditImpl;
	}

	@Override
	public APIAudit cloneWithOriginalValues() {
		APIAuditImpl apiAuditImpl = new APIAuditImpl();

		apiAuditImpl.setApiAuditId(
			this.<Long>getColumnOriginalValue("apiAuditId"));
		apiAuditImpl.setTitle(this.<String>getColumnOriginalValue("title"));
		apiAuditImpl.setDescription(
			this.<String>getColumnOriginalValue("description"));
		apiAuditImpl.setSender(this.<String>getColumnOriginalValue("sender"));
		apiAuditImpl.setReceiver(
			this.<String>getColumnOriginalValue("receiver"));
		apiAuditImpl.setRequestPayload(
			this.<String>getColumnOriginalValue("requestPayload"));
		apiAuditImpl.setResponsePayload(
			this.<String>getColumnOriginalValue("responsePayload"));
		apiAuditImpl.setRequestClassName(
			this.<String>getColumnOriginalValue("requestClassName"));
		apiAuditImpl.setRequestClassPK(
			this.<Long>getColumnOriginalValue("requestClassPK"));
		apiAuditImpl.setBulkRequest(
			this.<Boolean>getColumnOriginalValue("bulkRequest"));
		apiAuditImpl.setRequestTime(
			this.<Date>getColumnOriginalValue("requestTime"));
		apiAuditImpl.setResponseTime(
			this.<Date>getColumnOriginalValue("responseTime"));
		apiAuditImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		apiAuditImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return apiAuditImpl;
	}

	@Override
	public int compareTo(APIAudit apiAudit) {
		long primaryKey = apiAudit.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof APIAudit)) {
			return false;
		}

		APIAudit apiAudit = (APIAudit)object;

		long primaryKey = apiAudit.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<APIAudit> toCacheModel() {
		APIAuditCacheModel apiAuditCacheModel = new APIAuditCacheModel();

		apiAuditCacheModel.apiAuditId = getApiAuditId();

		apiAuditCacheModel.title = getTitle();

		String title = apiAuditCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			apiAuditCacheModel.title = null;
		}

		apiAuditCacheModel.description = getDescription();

		String description = apiAuditCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			apiAuditCacheModel.description = null;
		}

		apiAuditCacheModel.sender = getSender();

		String sender = apiAuditCacheModel.sender;

		if ((sender != null) && (sender.length() == 0)) {
			apiAuditCacheModel.sender = null;
		}

		apiAuditCacheModel.receiver = getReceiver();

		String receiver = apiAuditCacheModel.receiver;

		if ((receiver != null) && (receiver.length() == 0)) {
			apiAuditCacheModel.receiver = null;
		}

		apiAuditCacheModel.requestPayload = getRequestPayload();

		String requestPayload = apiAuditCacheModel.requestPayload;

		if ((requestPayload != null) && (requestPayload.length() == 0)) {
			apiAuditCacheModel.requestPayload = null;
		}

		apiAuditCacheModel.responsePayload = getResponsePayload();

		String responsePayload = apiAuditCacheModel.responsePayload;

		if ((responsePayload != null) && (responsePayload.length() == 0)) {
			apiAuditCacheModel.responsePayload = null;
		}

		apiAuditCacheModel.requestClassName = getRequestClassName();

		String requestClassName = apiAuditCacheModel.requestClassName;

		if ((requestClassName != null) && (requestClassName.length() == 0)) {
			apiAuditCacheModel.requestClassName = null;
		}

		apiAuditCacheModel.requestClassPK = getRequestClassPK();

		apiAuditCacheModel.bulkRequest = isBulkRequest();

		Date requestTime = getRequestTime();

		if (requestTime != null) {
			apiAuditCacheModel.requestTime = requestTime.getTime();
		}
		else {
			apiAuditCacheModel.requestTime = Long.MIN_VALUE;
		}

		Date responseTime = getResponseTime();

		if (responseTime != null) {
			apiAuditCacheModel.responseTime = responseTime.getTime();
		}
		else {
			apiAuditCacheModel.responseTime = Long.MIN_VALUE;
		}

		apiAuditCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			apiAuditCacheModel.createDate = createDate.getTime();
		}
		else {
			apiAuditCacheModel.createDate = Long.MIN_VALUE;
		}

		return apiAuditCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<APIAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<APIAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<APIAudit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((APIAudit)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<APIAudit, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<APIAudit, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<APIAudit, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((APIAudit)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, APIAudit>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					APIAudit.class, ModelWrapper.class);

	}

	private long _apiAuditId;
	private String _title;
	private String _description;
	private String _sender;
	private String _receiver;
	private String _requestPayload;
	private String _responsePayload;
	private String _requestClassName;
	private long _requestClassPK;
	private boolean _bulkRequest;
	private Date _requestTime;
	private Date _responseTime;
	private long _userId;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		Function<APIAudit, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((APIAudit)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("apiAuditId", _apiAuditId);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("description", _description);
		_columnOriginalValues.put("sender", _sender);
		_columnOriginalValues.put("receiver", _receiver);
		_columnOriginalValues.put("requestPayload", _requestPayload);
		_columnOriginalValues.put("responsePayload", _responsePayload);
		_columnOriginalValues.put("requestClassName", _requestClassName);
		_columnOriginalValues.put("requestClassPK", _requestClassPK);
		_columnOriginalValues.put("bulkRequest", _bulkRequest);
		_columnOriginalValues.put("requestTime", _requestTime);
		_columnOriginalValues.put("responseTime", _responseTime);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("apiAuditId", 1L);

		columnBitmasks.put("title", 2L);

		columnBitmasks.put("description", 4L);

		columnBitmasks.put("sender", 8L);

		columnBitmasks.put("receiver", 16L);

		columnBitmasks.put("requestPayload", 32L);

		columnBitmasks.put("responsePayload", 64L);

		columnBitmasks.put("requestClassName", 128L);

		columnBitmasks.put("requestClassPK", 256L);

		columnBitmasks.put("bulkRequest", 512L);

		columnBitmasks.put("requestTime", 1024L);

		columnBitmasks.put("responseTime", 2048L);

		columnBitmasks.put("userId", 4096L);

		columnBitmasks.put("createDate", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private APIAudit _escapedModel;

}