/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.common.services.model.impl;

import bd.gov.dgfood.common.services.model.AddressVersion;
import bd.gov.dgfood.common.services.model.AddressVersionModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the AddressVersion service. Represents a row in the &quot;DGF_AddressVersion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>AddressVersionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AddressVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see AddressVersionImpl
 * @generated
 */
@JSON(strict = true)
public class AddressVersionModelImpl
	extends BaseModelImpl<AddressVersion> implements AddressVersionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a address version model instance should use the <code>AddressVersion</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGF_AddressVersion";

	public static final Object[][] TABLE_COLUMNS = {
		{"addressVersionId", Types.BIGINT}, {"region", Types.BIGINT},
		{"district", Types.BIGINT}, {"upazilla", Types.BIGINT},
		{"cityCorporationOrMunicipality", Types.BIGINT},
		{"unionOrWard", Types.BIGINT}, {"zipCode", Types.BIGINT},
		{"postOffice", Types.VARCHAR}, {"villageOrRoad", Types.VARCHAR},
		{"mouzaOrMoholla", Types.VARCHAR}, {"address", Types.VARCHAR},
		{"addressType", Types.VARCHAR}, {"classPK", Types.BIGINT},
		{"className", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("addressVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("region", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("district", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("upazilla", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cityCorporationOrMunicipality", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("unionOrWard", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("zipCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("postOffice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("villageOrRoad", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mouzaOrMoholla", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("addressType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGF_AddressVersion (addressVersionId LONG not null primary key,region LONG,district LONG,upazilla LONG,cityCorporationOrMunicipality LONG,unionOrWard LONG,zipCode LONG,postOffice VARCHAR(75) null,villageOrRoad VARCHAR(75) null,mouzaOrMoholla VARCHAR(75) null,address VARCHAR(75) null,addressType VARCHAR(75) null,classPK LONG,className VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table DGF_AddressVersion";

	public static final String ORDER_BY_JPQL =
		" ORDER BY addressVersion.addressVersionId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGF_AddressVersion.addressVersionId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSNAME_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CLASSPK_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ADDRESSVERSIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public AddressVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _addressVersionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setAddressVersionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _addressVersionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AddressVersion.class;
	}

	@Override
	public String getModelClassName() {
		return AddressVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<AddressVersion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<AddressVersion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddressVersion, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((AddressVersion)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<AddressVersion, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<AddressVersion, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(AddressVersion)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<AddressVersion, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<AddressVersion, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<AddressVersion, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<AddressVersion, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<AddressVersion, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<AddressVersion, Object>>();
		Map<String, BiConsumer<AddressVersion, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<AddressVersion, ?>>();

		attributeGetterFunctions.put(
			"addressVersionId", AddressVersion::getAddressVersionId);
		attributeSetterBiConsumers.put(
			"addressVersionId",
			(BiConsumer<AddressVersion, Long>)
				AddressVersion::setAddressVersionId);
		attributeGetterFunctions.put("region", AddressVersion::getRegion);
		attributeSetterBiConsumers.put(
			"region",
			(BiConsumer<AddressVersion, Long>)AddressVersion::setRegion);
		attributeGetterFunctions.put("district", AddressVersion::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<AddressVersion, Long>)AddressVersion::setDistrict);
		attributeGetterFunctions.put("upazilla", AddressVersion::getUpazilla);
		attributeSetterBiConsumers.put(
			"upazilla",
			(BiConsumer<AddressVersion, Long>)AddressVersion::setUpazilla);
		attributeGetterFunctions.put(
			"cityCorporationOrMunicipality",
			AddressVersion::getCityCorporationOrMunicipality);
		attributeSetterBiConsumers.put(
			"cityCorporationOrMunicipality",
			(BiConsumer<AddressVersion, Long>)
				AddressVersion::setCityCorporationOrMunicipality);
		attributeGetterFunctions.put(
			"unionOrWard", AddressVersion::getUnionOrWard);
		attributeSetterBiConsumers.put(
			"unionOrWard",
			(BiConsumer<AddressVersion, Long>)AddressVersion::setUnionOrWard);
		attributeGetterFunctions.put("zipCode", AddressVersion::getZipCode);
		attributeSetterBiConsumers.put(
			"zipCode",
			(BiConsumer<AddressVersion, Long>)AddressVersion::setZipCode);
		attributeGetterFunctions.put(
			"postOffice", AddressVersion::getPostOffice);
		attributeSetterBiConsumers.put(
			"postOffice",
			(BiConsumer<AddressVersion, String>)AddressVersion::setPostOffice);
		attributeGetterFunctions.put(
			"villageOrRoad", AddressVersion::getVillageOrRoad);
		attributeSetterBiConsumers.put(
			"villageOrRoad",
			(BiConsumer<AddressVersion, String>)
				AddressVersion::setVillageOrRoad);
		attributeGetterFunctions.put(
			"mouzaOrMoholla", AddressVersion::getMouzaOrMoholla);
		attributeSetterBiConsumers.put(
			"mouzaOrMoholla",
			(BiConsumer<AddressVersion, String>)
				AddressVersion::setMouzaOrMoholla);
		attributeGetterFunctions.put("address", AddressVersion::getAddress);
		attributeSetterBiConsumers.put(
			"address",
			(BiConsumer<AddressVersion, String>)AddressVersion::setAddress);
		attributeGetterFunctions.put(
			"addressType", AddressVersion::getAddressType);
		attributeSetterBiConsumers.put(
			"addressType",
			(BiConsumer<AddressVersion, String>)AddressVersion::setAddressType);
		attributeGetterFunctions.put("classPK", AddressVersion::getClassPK);
		attributeSetterBiConsumers.put(
			"classPK",
			(BiConsumer<AddressVersion, Long>)AddressVersion::setClassPK);
		attributeGetterFunctions.put("className", AddressVersion::getClassName);
		attributeSetterBiConsumers.put(
			"className",
			(BiConsumer<AddressVersion, String>)AddressVersion::setClassName);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getAddressVersionId() {
		return _addressVersionId;
	}

	@Override
	public void setAddressVersionId(long addressVersionId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressVersionId = addressVersionId;
	}

	@JSON
	@Override
	public long getRegion() {
		return _region;
	}

	@Override
	public void setRegion(long region) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_region = region;
	}

	@JSON
	@Override
	public long getDistrict() {
		return _district;
	}

	@Override
	public void setDistrict(long district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public long getUpazilla() {
		return _upazilla;
	}

	@Override
	public void setUpazilla(long upazilla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_upazilla = upazilla;
	}

	@JSON
	@Override
	public long getCityCorporationOrMunicipality() {
		return _cityCorporationOrMunicipality;
	}

	@Override
	public void setCityCorporationOrMunicipality(
		long cityCorporationOrMunicipality) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cityCorporationOrMunicipality = cityCorporationOrMunicipality;
	}

	@JSON
	@Override
	public long getUnionOrWard() {
		return _unionOrWard;
	}

	@Override
	public void setUnionOrWard(long unionOrWard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_unionOrWard = unionOrWard;
	}

	@JSON
	@Override
	public long getZipCode() {
		return _zipCode;
	}

	@Override
	public void setZipCode(long zipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_zipCode = zipCode;
	}

	@JSON
	@Override
	public String getPostOffice() {
		if (_postOffice == null) {
			return "";
		}
		else {
			return _postOffice;
		}
	}

	@Override
	public void setPostOffice(String postOffice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_postOffice = postOffice;
	}

	@JSON
	@Override
	public String getVillageOrRoad() {
		if (_villageOrRoad == null) {
			return "";
		}
		else {
			return _villageOrRoad;
		}
	}

	@Override
	public void setVillageOrRoad(String villageOrRoad) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_villageOrRoad = villageOrRoad;
	}

	@JSON
	@Override
	public String getMouzaOrMoholla() {
		if (_mouzaOrMoholla == null) {
			return "";
		}
		else {
			return _mouzaOrMoholla;
		}
	}

	@Override
	public void setMouzaOrMoholla(String mouzaOrMoholla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mouzaOrMoholla = mouzaOrMoholla;
	}

	@JSON
	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_address = address;
	}

	@JSON
	@Override
	public String getAddressType() {
		if (_addressType == null) {
			return "";
		}
		else {
			return _addressType;
		}
	}

	@Override
	public void setAddressType(String addressType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_addressType = addressType;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPK = classPK;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalClassPK() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("classPK"));
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_className = className;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalClassName() {
		return getColumnOriginalValue("className");
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, AddressVersion.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AddressVersion toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, AddressVersion>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AddressVersionImpl addressVersionImpl = new AddressVersionImpl();

		addressVersionImpl.setAddressVersionId(getAddressVersionId());
		addressVersionImpl.setRegion(getRegion());
		addressVersionImpl.setDistrict(getDistrict());
		addressVersionImpl.setUpazilla(getUpazilla());
		addressVersionImpl.setCityCorporationOrMunicipality(
			getCityCorporationOrMunicipality());
		addressVersionImpl.setUnionOrWard(getUnionOrWard());
		addressVersionImpl.setZipCode(getZipCode());
		addressVersionImpl.setPostOffice(getPostOffice());
		addressVersionImpl.setVillageOrRoad(getVillageOrRoad());
		addressVersionImpl.setMouzaOrMoholla(getMouzaOrMoholla());
		addressVersionImpl.setAddress(getAddress());
		addressVersionImpl.setAddressType(getAddressType());
		addressVersionImpl.setClassPK(getClassPK());
		addressVersionImpl.setClassName(getClassName());

		addressVersionImpl.resetOriginalValues();

		return addressVersionImpl;
	}

	@Override
	public AddressVersion cloneWithOriginalValues() {
		AddressVersionImpl addressVersionImpl = new AddressVersionImpl();

		addressVersionImpl.setAddressVersionId(
			this.<Long>getColumnOriginalValue("addressVersionId"));
		addressVersionImpl.setRegion(
			this.<Long>getColumnOriginalValue("region"));
		addressVersionImpl.setDistrict(
			this.<Long>getColumnOriginalValue("district"));
		addressVersionImpl.setUpazilla(
			this.<Long>getColumnOriginalValue("upazilla"));
		addressVersionImpl.setCityCorporationOrMunicipality(
			this.<Long>getColumnOriginalValue("cityCorporationOrMunicipality"));
		addressVersionImpl.setUnionOrWard(
			this.<Long>getColumnOriginalValue("unionOrWard"));
		addressVersionImpl.setZipCode(
			this.<Long>getColumnOriginalValue("zipCode"));
		addressVersionImpl.setPostOffice(
			this.<String>getColumnOriginalValue("postOffice"));
		addressVersionImpl.setVillageOrRoad(
			this.<String>getColumnOriginalValue("villageOrRoad"));
		addressVersionImpl.setMouzaOrMoholla(
			this.<String>getColumnOriginalValue("mouzaOrMoholla"));
		addressVersionImpl.setAddress(
			this.<String>getColumnOriginalValue("address"));
		addressVersionImpl.setAddressType(
			this.<String>getColumnOriginalValue("addressType"));
		addressVersionImpl.setClassPK(
			this.<Long>getColumnOriginalValue("classPK"));
		addressVersionImpl.setClassName(
			this.<String>getColumnOriginalValue("className"));

		return addressVersionImpl;
	}

	@Override
	public int compareTo(AddressVersion addressVersion) {
		long primaryKey = addressVersion.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof AddressVersion)) {
			return false;
		}

		AddressVersion addressVersion = (AddressVersion)object;

		long primaryKey = addressVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<AddressVersion> toCacheModel() {
		AddressVersionCacheModel addressVersionCacheModel =
			new AddressVersionCacheModel();

		addressVersionCacheModel.addressVersionId = getAddressVersionId();

		addressVersionCacheModel.region = getRegion();

		addressVersionCacheModel.district = getDistrict();

		addressVersionCacheModel.upazilla = getUpazilla();

		addressVersionCacheModel.cityCorporationOrMunicipality =
			getCityCorporationOrMunicipality();

		addressVersionCacheModel.unionOrWard = getUnionOrWard();

		addressVersionCacheModel.zipCode = getZipCode();

		addressVersionCacheModel.postOffice = getPostOffice();

		String postOffice = addressVersionCacheModel.postOffice;

		if ((postOffice != null) && (postOffice.length() == 0)) {
			addressVersionCacheModel.postOffice = null;
		}

		addressVersionCacheModel.villageOrRoad = getVillageOrRoad();

		String villageOrRoad = addressVersionCacheModel.villageOrRoad;

		if ((villageOrRoad != null) && (villageOrRoad.length() == 0)) {
			addressVersionCacheModel.villageOrRoad = null;
		}

		addressVersionCacheModel.mouzaOrMoholla = getMouzaOrMoholla();

		String mouzaOrMoholla = addressVersionCacheModel.mouzaOrMoholla;

		if ((mouzaOrMoholla != null) && (mouzaOrMoholla.length() == 0)) {
			addressVersionCacheModel.mouzaOrMoholla = null;
		}

		addressVersionCacheModel.address = getAddress();

		String address = addressVersionCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			addressVersionCacheModel.address = null;
		}

		addressVersionCacheModel.addressType = getAddressType();

		String addressType = addressVersionCacheModel.addressType;

		if ((addressType != null) && (addressType.length() == 0)) {
			addressVersionCacheModel.addressType = null;
		}

		addressVersionCacheModel.classPK = getClassPK();

		addressVersionCacheModel.className = getClassName();

		String className = addressVersionCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			addressVersionCacheModel.className = null;
		}

		return addressVersionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<AddressVersion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<AddressVersion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddressVersion, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((AddressVersion)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<AddressVersion, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<AddressVersion, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<AddressVersion, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((AddressVersion)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, AddressVersion>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					AddressVersion.class, ModelWrapper.class);

	}

	private long _addressVersionId;
	private long _region;
	private long _district;
	private long _upazilla;
	private long _cityCorporationOrMunicipality;
	private long _unionOrWard;
	private long _zipCode;
	private String _postOffice;
	private String _villageOrRoad;
	private String _mouzaOrMoholla;
	private String _address;
	private String _addressType;
	private long _classPK;
	private String _className;

	public <T> T getColumnValue(String columnName) {
		Function<AddressVersion, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((AddressVersion)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("addressVersionId", _addressVersionId);
		_columnOriginalValues.put("region", _region);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("upazilla", _upazilla);
		_columnOriginalValues.put(
			"cityCorporationOrMunicipality", _cityCorporationOrMunicipality);
		_columnOriginalValues.put("unionOrWard", _unionOrWard);
		_columnOriginalValues.put("zipCode", _zipCode);
		_columnOriginalValues.put("postOffice", _postOffice);
		_columnOriginalValues.put("villageOrRoad", _villageOrRoad);
		_columnOriginalValues.put("mouzaOrMoholla", _mouzaOrMoholla);
		_columnOriginalValues.put("address", _address);
		_columnOriginalValues.put("addressType", _addressType);
		_columnOriginalValues.put("classPK", _classPK);
		_columnOriginalValues.put("className", _className);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("addressVersionId", 1L);

		columnBitmasks.put("region", 2L);

		columnBitmasks.put("district", 4L);

		columnBitmasks.put("upazilla", 8L);

		columnBitmasks.put("cityCorporationOrMunicipality", 16L);

		columnBitmasks.put("unionOrWard", 32L);

		columnBitmasks.put("zipCode", 64L);

		columnBitmasks.put("postOffice", 128L);

		columnBitmasks.put("villageOrRoad", 256L);

		columnBitmasks.put("mouzaOrMoholla", 512L);

		columnBitmasks.put("address", 1024L);

		columnBitmasks.put("addressType", 2048L);

		columnBitmasks.put("classPK", 4096L);

		columnBitmasks.put("className", 8192L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private AddressVersion _escapedModel;

}