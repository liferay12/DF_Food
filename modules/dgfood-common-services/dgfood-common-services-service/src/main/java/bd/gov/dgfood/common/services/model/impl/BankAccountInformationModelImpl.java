/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.common.services.model.impl;

import bd.gov.dgfood.common.services.model.BankAccountInformation;
import bd.gov.dgfood.common.services.model.BankAccountInformationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the BankAccountInformation service. Represents a row in the &quot;DGF_BankAccountInformation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>BankAccountInformationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BankAccountInformationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see BankAccountInformationImpl
 * @generated
 */
@JSON(strict = true)
public class BankAccountInformationModelImpl
	extends BaseModelImpl<BankAccountInformation>
	implements BankAccountInformationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a bank account information model instance should use the <code>BankAccountInformation</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGF_BankAccountInformation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"bankAccountInformationId", Types.BIGINT},
		{"createdBy", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"accountNumber", Types.VARCHAR}, {"bankName", Types.VARCHAR},
		{"branchName", Types.VARCHAR}, {"routingCode", Types.VARCHAR},
		{"status", Types.INTEGER}, {"version", Types.VARCHAR},
		{"classPK", Types.BIGINT}, {"classNameId", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankAccountInformationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("accountNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bankName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("branchName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("routingCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("version", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPK", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("classNameId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGF_BankAccountInformation (uuid_ VARCHAR(75) null,bankAccountInformationId LONG not null primary key,createdBy LONG,createDate DATE null,accountNumber VARCHAR(75) null,bankName VARCHAR(75) null,branchName VARCHAR(75) null,routingCode VARCHAR(75) null,status INTEGER,version VARCHAR(75) null,classPK LONG,classNameId LONG)";

	public static final String TABLE_SQL_DROP =
		"drop table DGF_BankAccountInformation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY bankAccountInformation.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGF_BankAccountInformation.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public BankAccountInformationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _bankAccountInformationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBankAccountInformationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _bankAccountInformationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return BankAccountInformation.class;
	}

	@Override
	public String getModelClassName() {
		return BankAccountInformation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<BankAccountInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<BankAccountInformation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BankAccountInformation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((BankAccountInformation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<BankAccountInformation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<BankAccountInformation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(BankAccountInformation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<BankAccountInformation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<BankAccountInformation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<BankAccountInformation, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<BankAccountInformation, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<BankAccountInformation, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<BankAccountInformation, Object>>();
		Map<String, BiConsumer<BankAccountInformation, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<BankAccountInformation, ?>>();

		attributeGetterFunctions.put("uuid", BankAccountInformation::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<BankAccountInformation, String>)
				BankAccountInformation::setUuid);
		attributeGetterFunctions.put(
			"bankAccountInformationId",
			BankAccountInformation::getBankAccountInformationId);
		attributeSetterBiConsumers.put(
			"bankAccountInformationId",
			(BiConsumer<BankAccountInformation, Long>)
				BankAccountInformation::setBankAccountInformationId);
		attributeGetterFunctions.put(
			"createdBy", BankAccountInformation::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<BankAccountInformation, Long>)
				BankAccountInformation::setCreatedBy);
		attributeGetterFunctions.put(
			"createDate", BankAccountInformation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<BankAccountInformation, Date>)
				BankAccountInformation::setCreateDate);
		attributeGetterFunctions.put(
			"accountNumber", BankAccountInformation::getAccountNumber);
		attributeSetterBiConsumers.put(
			"accountNumber",
			(BiConsumer<BankAccountInformation, String>)
				BankAccountInformation::setAccountNumber);
		attributeGetterFunctions.put(
			"bankName", BankAccountInformation::getBankName);
		attributeSetterBiConsumers.put(
			"bankName",
			(BiConsumer<BankAccountInformation, String>)
				BankAccountInformation::setBankName);
		attributeGetterFunctions.put(
			"branchName", BankAccountInformation::getBranchName);
		attributeSetterBiConsumers.put(
			"branchName",
			(BiConsumer<BankAccountInformation, String>)
				BankAccountInformation::setBranchName);
		attributeGetterFunctions.put(
			"routingCode", BankAccountInformation::getRoutingCode);
		attributeSetterBiConsumers.put(
			"routingCode",
			(BiConsumer<BankAccountInformation, String>)
				BankAccountInformation::setRoutingCode);
		attributeGetterFunctions.put(
			"status", BankAccountInformation::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<BankAccountInformation, Integer>)
				BankAccountInformation::setStatus);
		attributeGetterFunctions.put(
			"version", BankAccountInformation::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<BankAccountInformation, String>)
				BankAccountInformation::setVersion);
		attributeGetterFunctions.put(
			"classPK", BankAccountInformation::getClassPK);
		attributeSetterBiConsumers.put(
			"classPK",
			(BiConsumer<BankAccountInformation, Long>)
				BankAccountInformation::setClassPK);
		attributeGetterFunctions.put(
			"classNameId", BankAccountInformation::getClassNameId);
		attributeSetterBiConsumers.put(
			"classNameId",
			(BiConsumer<BankAccountInformation, Long>)
				BankAccountInformation::setClassNameId);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getBankAccountInformationId() {
		return _bankAccountInformationId;
	}

	@Override
	public void setBankAccountInformationId(long bankAccountInformationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankAccountInformationId = bankAccountInformationId;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public String getAccountNumber() {
		if (_accountNumber == null) {
			return "";
		}
		else {
			return _accountNumber;
		}
	}

	@Override
	public void setAccountNumber(String accountNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_accountNumber = accountNumber;
	}

	@JSON
	@Override
	public String getBankName() {
		if (_bankName == null) {
			return "";
		}
		else {
			return _bankName;
		}
	}

	@Override
	public void setBankName(String bankName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankName = bankName;
	}

	@JSON
	@Override
	public String getBranchName() {
		if (_branchName == null) {
			return "";
		}
		else {
			return _branchName;
		}
	}

	@Override
	public void setBranchName(String branchName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_branchName = branchName;
	}

	@JSON
	@Override
	public String getRoutingCode() {
		if (_routingCode == null) {
			return "";
		}
		else {
			return _routingCode;
		}
	}

	@Override
	public void setRoutingCode(String routingCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_routingCode = routingCode;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public String getVersion() {
		if (_version == null) {
			return "";
		}
		else {
			return _version;
		}
	}

	@Override
	public void setVersion(String version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public long getClassPK() {
		return _classPK;
	}

	@Override
	public void setClassPK(long classPK) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPK = classPK;
	}

	@Override
	public String getClassName() {
		if (getClassNameId() <= 0) {
			return "";
		}

		return PortalUtil.getClassName(getClassNameId());
	}

	@Override
	public void setClassName(String className) {
		long classNameId = 0;

		if (Validator.isNotNull(className)) {
			classNameId = PortalUtil.getClassNameId(className);
		}

		setClassNameId(classNameId);
	}

	@JSON
	@Override
	public long getClassNameId() {
		return _classNameId;
	}

	@Override
	public void setClassNameId(long classNameId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classNameId = classNameId;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, BankAccountInformation.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public BankAccountInformation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, BankAccountInformation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		BankAccountInformationImpl bankAccountInformationImpl =
			new BankAccountInformationImpl();

		bankAccountInformationImpl.setUuid(getUuid());
		bankAccountInformationImpl.setBankAccountInformationId(
			getBankAccountInformationId());
		bankAccountInformationImpl.setCreatedBy(getCreatedBy());
		bankAccountInformationImpl.setCreateDate(getCreateDate());
		bankAccountInformationImpl.setAccountNumber(getAccountNumber());
		bankAccountInformationImpl.setBankName(getBankName());
		bankAccountInformationImpl.setBranchName(getBranchName());
		bankAccountInformationImpl.setRoutingCode(getRoutingCode());
		bankAccountInformationImpl.setStatus(getStatus());
		bankAccountInformationImpl.setVersion(getVersion());
		bankAccountInformationImpl.setClassPK(getClassPK());
		bankAccountInformationImpl.setClassNameId(getClassNameId());

		bankAccountInformationImpl.resetOriginalValues();

		return bankAccountInformationImpl;
	}

	@Override
	public BankAccountInformation cloneWithOriginalValues() {
		BankAccountInformationImpl bankAccountInformationImpl =
			new BankAccountInformationImpl();

		bankAccountInformationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		bankAccountInformationImpl.setBankAccountInformationId(
			this.<Long>getColumnOriginalValue("bankAccountInformationId"));
		bankAccountInformationImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		bankAccountInformationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		bankAccountInformationImpl.setAccountNumber(
			this.<String>getColumnOriginalValue("accountNumber"));
		bankAccountInformationImpl.setBankName(
			this.<String>getColumnOriginalValue("bankName"));
		bankAccountInformationImpl.setBranchName(
			this.<String>getColumnOriginalValue("branchName"));
		bankAccountInformationImpl.setRoutingCode(
			this.<String>getColumnOriginalValue("routingCode"));
		bankAccountInformationImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		bankAccountInformationImpl.setVersion(
			this.<String>getColumnOriginalValue("version"));
		bankAccountInformationImpl.setClassPK(
			this.<Long>getColumnOriginalValue("classPK"));
		bankAccountInformationImpl.setClassNameId(
			this.<Long>getColumnOriginalValue("classNameId"));

		return bankAccountInformationImpl;
	}

	@Override
	public int compareTo(BankAccountInformation bankAccountInformation) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), bankAccountInformation.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof BankAccountInformation)) {
			return false;
		}

		BankAccountInformation bankAccountInformation =
			(BankAccountInformation)object;

		long primaryKey = bankAccountInformation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<BankAccountInformation> toCacheModel() {
		BankAccountInformationCacheModel bankAccountInformationCacheModel =
			new BankAccountInformationCacheModel();

		bankAccountInformationCacheModel.uuid = getUuid();

		String uuid = bankAccountInformationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			bankAccountInformationCacheModel.uuid = null;
		}

		bankAccountInformationCacheModel.bankAccountInformationId =
			getBankAccountInformationId();

		bankAccountInformationCacheModel.createdBy = getCreatedBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			bankAccountInformationCacheModel.createDate = createDate.getTime();
		}
		else {
			bankAccountInformationCacheModel.createDate = Long.MIN_VALUE;
		}

		bankAccountInformationCacheModel.accountNumber = getAccountNumber();

		String accountNumber = bankAccountInformationCacheModel.accountNumber;

		if ((accountNumber != null) && (accountNumber.length() == 0)) {
			bankAccountInformationCacheModel.accountNumber = null;
		}

		bankAccountInformationCacheModel.bankName = getBankName();

		String bankName = bankAccountInformationCacheModel.bankName;

		if ((bankName != null) && (bankName.length() == 0)) {
			bankAccountInformationCacheModel.bankName = null;
		}

		bankAccountInformationCacheModel.branchName = getBranchName();

		String branchName = bankAccountInformationCacheModel.branchName;

		if ((branchName != null) && (branchName.length() == 0)) {
			bankAccountInformationCacheModel.branchName = null;
		}

		bankAccountInformationCacheModel.routingCode = getRoutingCode();

		String routingCode = bankAccountInformationCacheModel.routingCode;

		if ((routingCode != null) && (routingCode.length() == 0)) {
			bankAccountInformationCacheModel.routingCode = null;
		}

		bankAccountInformationCacheModel.status = getStatus();

		bankAccountInformationCacheModel.version = getVersion();

		String version = bankAccountInformationCacheModel.version;

		if ((version != null) && (version.length() == 0)) {
			bankAccountInformationCacheModel.version = null;
		}

		bankAccountInformationCacheModel.classPK = getClassPK();

		bankAccountInformationCacheModel.classNameId = getClassNameId();

		return bankAccountInformationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<BankAccountInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<BankAccountInformation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BankAccountInformation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(BankAccountInformation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<BankAccountInformation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<BankAccountInformation, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<BankAccountInformation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((BankAccountInformation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, BankAccountInformation>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					BankAccountInformation.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _bankAccountInformationId;
	private long _createdBy;
	private Date _createDate;
	private String _accountNumber;
	private String _bankName;
	private String _branchName;
	private String _routingCode;
	private int _status;
	private String _version;
	private long _classPK;
	private long _classNameId;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<BankAccountInformation, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((BankAccountInformation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"bankAccountInformationId", _bankAccountInformationId);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("accountNumber", _accountNumber);
		_columnOriginalValues.put("bankName", _bankName);
		_columnOriginalValues.put("branchName", _branchName);
		_columnOriginalValues.put("routingCode", _routingCode);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("classPK", _classPK);
		_columnOriginalValues.put("classNameId", _classNameId);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("bankAccountInformationId", 2L);

		columnBitmasks.put("createdBy", 4L);

		columnBitmasks.put("createDate", 8L);

		columnBitmasks.put("accountNumber", 16L);

		columnBitmasks.put("bankName", 32L);

		columnBitmasks.put("branchName", 64L);

		columnBitmasks.put("routingCode", 128L);

		columnBitmasks.put("status", 256L);

		columnBitmasks.put("version", 512L);

		columnBitmasks.put("classPK", 1024L);

		columnBitmasks.put("classNameId", 2048L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private BankAccountInformation _escapedModel;

}