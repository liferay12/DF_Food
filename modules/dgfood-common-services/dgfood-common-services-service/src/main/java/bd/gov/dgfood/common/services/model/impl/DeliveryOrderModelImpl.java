/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.common.services.model.impl;

import bd.gov.dgfood.common.services.model.DeliveryOrder;
import bd.gov.dgfood.common.services.model.DeliveryOrderModel;
import bd.gov.dgfood.common.services.service.persistence.DeliveryOrderPK;

import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.util.Validator;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DeliveryOrder service. Represents a row in the &quot;DGF_DeliveryOrder&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>DeliveryOrderModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DeliveryOrderImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DeliveryOrderImpl
 * @generated
 */
@JSON(strict = true)
public class DeliveryOrderModelImpl
	extends BaseModelImpl<DeliveryOrder> implements DeliveryOrderModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a delivery order model instance should use the <code>DeliveryOrder</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGF_DeliveryOrder";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"deliveryOrderId", Types.BIGINT},
		{"indentId", Types.BIGINT}, {"deliveryOrderNo", Types.VARCHAR},
		{"customerNo", Types.VARCHAR}, {"name", Types.VARCHAR},
		{"doDate", Types.TIMESTAMP}, {"commodity", Types.VARCHAR},
		{"commodityDescription", Types.VARCHAR}, {"doQty", Types.VARCHAR},
		{"doQtyUnit", Types.VARCHAR}, {"depo", Types.VARCHAR},
		{"warehouseNo", Types.VARCHAR}, {"khamaalNo", Types.VARCHAR},
		{"lUANo", Types.VARCHAR}, {"lUADate", Types.TIMESTAMP},
		{"bagUnit", Types.VARCHAR}, {"vehicleNo", Types.VARCHAR},
		{"gateKeeper", Types.VARCHAR}, {"goodsIssueDate", Types.VARCHAR},
		{"shipToParty", Types.VARCHAR}, {"shipToPartyName", Types.VARCHAR},
		{"deliveredQty", Types.VARCHAR}, {"deliveredQtyUnit", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"status", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliveryOrderId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("indentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deliveryOrderNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("commodity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commodityDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doQty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("doQtyUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("depo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("warehouseNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("khamaalNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lUANo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lUADate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("bagUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gateKeeper", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("goodsIssueDate", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shipToParty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("shipToPartyName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliveredQty", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliveredQtyUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGF_DeliveryOrder (uuid_ VARCHAR(75) null,deliveryOrderId LONG not null,indentId LONG not null,deliveryOrderNo VARCHAR(75) null,customerNo VARCHAR(75) null,name STRING null,doDate DATE null,commodity STRING null,commodityDescription STRING null,doQty STRING null,doQtyUnit STRING null,depo STRING null,warehouseNo VARCHAR(75) null,khamaalNo VARCHAR(75) null,lUANo VARCHAR(75) null,lUADate DATE null,bagUnit STRING null,vehicleNo VARCHAR(75) null,gateKeeper STRING null,goodsIssueDate VARCHAR(75) null,shipToParty VARCHAR(75) null,shipToPartyName STRING null,deliveredQty STRING null,deliveredQtyUnit STRING null,companyId LONG,createDate DATE null,modifiedDate DATE null,status INTEGER,primary key (deliveryOrderId, indentId))";

	public static final String TABLE_SQL_DROP = "drop table DGF_DeliveryOrder";

	public static final String ORDER_BY_JPQL =
		" ORDER BY deliveryOrder.id.deliveryOrderId ASC, deliveryOrder.id.indentId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGF_DeliveryOrder.deliveryOrderId ASC, DGF_DeliveryOrder.indentId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DELIVERYORDERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long INDENTID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public DeliveryOrderModelImpl() {
	}

	@Override
	public DeliveryOrderPK getPrimaryKey() {
		return new DeliveryOrderPK(_deliveryOrderId, _indentId);
	}

	@Override
	public void setPrimaryKey(DeliveryOrderPK primaryKey) {
		setDeliveryOrderId(primaryKey.deliveryOrderId);
		setIndentId(primaryKey.indentId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new DeliveryOrderPK(_deliveryOrderId, _indentId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((DeliveryOrderPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return DeliveryOrder.class;
	}

	@Override
	public String getModelClassName() {
		return DeliveryOrder.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DeliveryOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DeliveryOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DeliveryOrder, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((DeliveryOrder)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DeliveryOrder, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DeliveryOrder, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(DeliveryOrder)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<DeliveryOrder, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DeliveryOrder, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DeliveryOrder, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<DeliveryOrder, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<DeliveryOrder, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<DeliveryOrder, Object>>();
		Map<String, BiConsumer<DeliveryOrder, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<DeliveryOrder, ?>>();

		attributeGetterFunctions.put("uuid", DeliveryOrder::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<DeliveryOrder, String>)DeliveryOrder::setUuid);
		attributeGetterFunctions.put(
			"deliveryOrderId", DeliveryOrder::getDeliveryOrderId);
		attributeSetterBiConsumers.put(
			"deliveryOrderId",
			(BiConsumer<DeliveryOrder, Long>)DeliveryOrder::setDeliveryOrderId);
		attributeGetterFunctions.put("indentId", DeliveryOrder::getIndentId);
		attributeSetterBiConsumers.put(
			"indentId",
			(BiConsumer<DeliveryOrder, Long>)DeliveryOrder::setIndentId);
		attributeGetterFunctions.put(
			"deliveryOrderNo", DeliveryOrder::getDeliveryOrderNo);
		attributeSetterBiConsumers.put(
			"deliveryOrderNo",
			(BiConsumer<DeliveryOrder, String>)
				DeliveryOrder::setDeliveryOrderNo);
		attributeGetterFunctions.put(
			"customerNo", DeliveryOrder::getCustomerNo);
		attributeSetterBiConsumers.put(
			"customerNo",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setCustomerNo);
		attributeGetterFunctions.put("name", DeliveryOrder::getName);
		attributeSetterBiConsumers.put(
			"name", (BiConsumer<DeliveryOrder, String>)DeliveryOrder::setName);
		attributeGetterFunctions.put("doDate", DeliveryOrder::getDoDate);
		attributeSetterBiConsumers.put(
			"doDate",
			(BiConsumer<DeliveryOrder, Date>)DeliveryOrder::setDoDate);
		attributeGetterFunctions.put("commodity", DeliveryOrder::getCommodity);
		attributeSetterBiConsumers.put(
			"commodity",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setCommodity);
		attributeGetterFunctions.put(
			"commodityDescription", DeliveryOrder::getCommodityDescription);
		attributeSetterBiConsumers.put(
			"commodityDescription",
			(BiConsumer<DeliveryOrder, String>)
				DeliveryOrder::setCommodityDescription);
		attributeGetterFunctions.put("doQty", DeliveryOrder::getDoQty);
		attributeSetterBiConsumers.put(
			"doQty",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setDoQty);
		attributeGetterFunctions.put("doQtyUnit", DeliveryOrder::getDoQtyUnit);
		attributeSetterBiConsumers.put(
			"doQtyUnit",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setDoQtyUnit);
		attributeGetterFunctions.put("depo", DeliveryOrder::getDepo);
		attributeSetterBiConsumers.put(
			"depo", (BiConsumer<DeliveryOrder, String>)DeliveryOrder::setDepo);
		attributeGetterFunctions.put(
			"warehouseNo", DeliveryOrder::getWarehouseNo);
		attributeSetterBiConsumers.put(
			"warehouseNo",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setWarehouseNo);
		attributeGetterFunctions.put("khamaalNo", DeliveryOrder::getKhamaalNo);
		attributeSetterBiConsumers.put(
			"khamaalNo",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setKhamaalNo);
		attributeGetterFunctions.put("lUANo", DeliveryOrder::getLUANo);
		attributeSetterBiConsumers.put(
			"lUANo",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setLUANo);
		attributeGetterFunctions.put("lUADate", DeliveryOrder::getLUADate);
		attributeSetterBiConsumers.put(
			"lUADate",
			(BiConsumer<DeliveryOrder, Date>)DeliveryOrder::setLUADate);
		attributeGetterFunctions.put("bagUnit", DeliveryOrder::getBagUnit);
		attributeSetterBiConsumers.put(
			"bagUnit",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setBagUnit);
		attributeGetterFunctions.put("vehicleNo", DeliveryOrder::getVehicleNo);
		attributeSetterBiConsumers.put(
			"vehicleNo",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setVehicleNo);
		attributeGetterFunctions.put(
			"gateKeeper", DeliveryOrder::getGateKeeper);
		attributeSetterBiConsumers.put(
			"gateKeeper",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setGateKeeper);
		attributeGetterFunctions.put(
			"goodsIssueDate", DeliveryOrder::getGoodsIssueDate);
		attributeSetterBiConsumers.put(
			"goodsIssueDate",
			(BiConsumer<DeliveryOrder, String>)
				DeliveryOrder::setGoodsIssueDate);
		attributeGetterFunctions.put(
			"shipToParty", DeliveryOrder::getShipToParty);
		attributeSetterBiConsumers.put(
			"shipToParty",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setShipToParty);
		attributeGetterFunctions.put(
			"shipToPartyName", DeliveryOrder::getShipToPartyName);
		attributeSetterBiConsumers.put(
			"shipToPartyName",
			(BiConsumer<DeliveryOrder, String>)
				DeliveryOrder::setShipToPartyName);
		attributeGetterFunctions.put(
			"deliveredQty", DeliveryOrder::getDeliveredQty);
		attributeSetterBiConsumers.put(
			"deliveredQty",
			(BiConsumer<DeliveryOrder, String>)DeliveryOrder::setDeliveredQty);
		attributeGetterFunctions.put(
			"deliveredQtyUnit", DeliveryOrder::getDeliveredQtyUnit);
		attributeSetterBiConsumers.put(
			"deliveredQtyUnit",
			(BiConsumer<DeliveryOrder, String>)
				DeliveryOrder::setDeliveredQtyUnit);
		attributeGetterFunctions.put("companyId", DeliveryOrder::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<DeliveryOrder, Long>)DeliveryOrder::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", DeliveryOrder::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<DeliveryOrder, Date>)DeliveryOrder::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", DeliveryOrder::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<DeliveryOrder, Date>)DeliveryOrder::setModifiedDate);
		attributeGetterFunctions.put("status", DeliveryOrder::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<DeliveryOrder, Integer>)DeliveryOrder::setStatus);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getDeliveryOrderId() {
		return _deliveryOrderId;
	}

	@Override
	public void setDeliveryOrderId(long deliveryOrderId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveryOrderId = deliveryOrderId;
	}

	@JSON
	@Override
	public long getIndentId() {
		return _indentId;
	}

	@Override
	public void setIndentId(long indentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indentId = indentId;
	}

	@JSON
	@Override
	public String getDeliveryOrderNo() {
		if (_deliveryOrderNo == null) {
			return "";
		}
		else {
			return _deliveryOrderNo;
		}
	}

	@Override
	public void setDeliveryOrderNo(String deliveryOrderNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveryOrderNo = deliveryOrderNo;
	}

	@JSON
	@Override
	public String getCustomerNo() {
		if (_customerNo == null) {
			return "";
		}
		else {
			return _customerNo;
		}
	}

	@Override
	public void setCustomerNo(String customerNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_customerNo = customerNo;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public String getName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId);
	}

	@Override
	public String getName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getName(languageId, useDefault);
	}

	@Override
	public String getName(String languageId) {
		return LocalizationUtil.getLocalization(getName(), languageId);
	}

	@Override
	public String getName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getName(), languageId, useDefault);
	}

	@Override
	public String getNameCurrentLanguageId() {
		return _nameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getNameCurrentValue() {
		Locale locale = getLocale(_nameCurrentLanguageId);

		return getName(locale);
	}

	@Override
	public Map<Locale, String> getNameMap() {
		return LocalizationUtil.getLocalizationMap(getName());
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public void setName(String name, Locale locale) {
		setName(name, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setName(String name, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(name)) {
			setName(
				LocalizationUtil.updateLocalization(
					getName(), "Name", name, languageId, defaultLanguageId));
		}
		else {
			setName(
				LocalizationUtil.removeLocalization(
					getName(), "Name", languageId));
		}
	}

	@Override
	public void setNameCurrentLanguageId(String languageId) {
		_nameCurrentLanguageId = languageId;
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap) {
		setNameMap(nameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setNameMap(Map<Locale, String> nameMap, Locale defaultLocale) {
		if (nameMap == null) {
			return;
		}

		setName(
			LocalizationUtil.updateLocalization(
				nameMap, getName(), "Name",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public Date getDoDate() {
		return _doDate;
	}

	@Override
	public void setDoDate(Date doDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doDate = doDate;
	}

	@JSON
	@Override
	public String getCommodity() {
		if (_commodity == null) {
			return "";
		}
		else {
			return _commodity;
		}
	}

	@Override
	public String getCommodity(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCommodity(languageId);
	}

	@Override
	public String getCommodity(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCommodity(languageId, useDefault);
	}

	@Override
	public String getCommodity(String languageId) {
		return LocalizationUtil.getLocalization(getCommodity(), languageId);
	}

	@Override
	public String getCommodity(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getCommodity(), languageId, useDefault);
	}

	@Override
	public String getCommodityCurrentLanguageId() {
		return _commodityCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCommodityCurrentValue() {
		Locale locale = getLocale(_commodityCurrentLanguageId);

		return getCommodity(locale);
	}

	@Override
	public Map<Locale, String> getCommodityMap() {
		return LocalizationUtil.getLocalizationMap(getCommodity());
	}

	@Override
	public void setCommodity(String commodity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodity = commodity;
	}

	@Override
	public void setCommodity(String commodity, Locale locale) {
		setCommodity(commodity, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setCommodity(
		String commodity, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(commodity)) {
			setCommodity(
				LocalizationUtil.updateLocalization(
					getCommodity(), "Commodity", commodity, languageId,
					defaultLanguageId));
		}
		else {
			setCommodity(
				LocalizationUtil.removeLocalization(
					getCommodity(), "Commodity", languageId));
		}
	}

	@Override
	public void setCommodityCurrentLanguageId(String languageId) {
		_commodityCurrentLanguageId = languageId;
	}

	@Override
	public void setCommodityMap(Map<Locale, String> commodityMap) {
		setCommodityMap(commodityMap, LocaleUtil.getDefault());
	}

	@Override
	public void setCommodityMap(
		Map<Locale, String> commodityMap, Locale defaultLocale) {

		if (commodityMap == null) {
			return;
		}

		setCommodity(
			LocalizationUtil.updateLocalization(
				commodityMap, getCommodity(), "Commodity",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getCommodityDescription() {
		if (_commodityDescription == null) {
			return "";
		}
		else {
			return _commodityDescription;
		}
	}

	@Override
	public String getCommodityDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCommodityDescription(languageId);
	}

	@Override
	public String getCommodityDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getCommodityDescription(languageId, useDefault);
	}

	@Override
	public String getCommodityDescription(String languageId) {
		return LocalizationUtil.getLocalization(
			getCommodityDescription(), languageId);
	}

	@Override
	public String getCommodityDescription(
		String languageId, boolean useDefault) {

		return LocalizationUtil.getLocalization(
			getCommodityDescription(), languageId, useDefault);
	}

	@Override
	public String getCommodityDescriptionCurrentLanguageId() {
		return _commodityDescriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getCommodityDescriptionCurrentValue() {
		Locale locale = getLocale(_commodityDescriptionCurrentLanguageId);

		return getCommodityDescription(locale);
	}

	@Override
	public Map<Locale, String> getCommodityDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getCommodityDescription());
	}

	@Override
	public void setCommodityDescription(String commodityDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityDescription = commodityDescription;
	}

	@Override
	public void setCommodityDescription(
		String commodityDescription, Locale locale) {

		setCommodityDescription(
			commodityDescription, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setCommodityDescription(
		String commodityDescription, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(commodityDescription)) {
			setCommodityDescription(
				LocalizationUtil.updateLocalization(
					getCommodityDescription(), "CommodityDescription",
					commodityDescription, languageId, defaultLanguageId));
		}
		else {
			setCommodityDescription(
				LocalizationUtil.removeLocalization(
					getCommodityDescription(), "CommodityDescription",
					languageId));
		}
	}

	@Override
	public void setCommodityDescriptionCurrentLanguageId(String languageId) {
		_commodityDescriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setCommodityDescriptionMap(
		Map<Locale, String> commodityDescriptionMap) {

		setCommodityDescriptionMap(
			commodityDescriptionMap, LocaleUtil.getDefault());
	}

	@Override
	public void setCommodityDescriptionMap(
		Map<Locale, String> commodityDescriptionMap, Locale defaultLocale) {

		if (commodityDescriptionMap == null) {
			return;
		}

		setCommodityDescription(
			LocalizationUtil.updateLocalization(
				commodityDescriptionMap, getCommodityDescription(),
				"CommodityDescription",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDoQty() {
		if (_doQty == null) {
			return "";
		}
		else {
			return _doQty;
		}
	}

	@Override
	public String getDoQty(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDoQty(languageId);
	}

	@Override
	public String getDoQty(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDoQty(languageId, useDefault);
	}

	@Override
	public String getDoQty(String languageId) {
		return LocalizationUtil.getLocalization(getDoQty(), languageId);
	}

	@Override
	public String getDoQty(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDoQty(), languageId, useDefault);
	}

	@Override
	public String getDoQtyCurrentLanguageId() {
		return _doQtyCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDoQtyCurrentValue() {
		Locale locale = getLocale(_doQtyCurrentLanguageId);

		return getDoQty(locale);
	}

	@Override
	public Map<Locale, String> getDoQtyMap() {
		return LocalizationUtil.getLocalizationMap(getDoQty());
	}

	@Override
	public void setDoQty(String doQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doQty = doQty;
	}

	@Override
	public void setDoQty(String doQty, Locale locale) {
		setDoQty(doQty, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDoQty(String doQty, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(doQty)) {
			setDoQty(
				LocalizationUtil.updateLocalization(
					getDoQty(), "DoQty", doQty, languageId, defaultLanguageId));
		}
		else {
			setDoQty(
				LocalizationUtil.removeLocalization(
					getDoQty(), "DoQty", languageId));
		}
	}

	@Override
	public void setDoQtyCurrentLanguageId(String languageId) {
		_doQtyCurrentLanguageId = languageId;
	}

	@Override
	public void setDoQtyMap(Map<Locale, String> doQtyMap) {
		setDoQtyMap(doQtyMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDoQtyMap(
		Map<Locale, String> doQtyMap, Locale defaultLocale) {

		if (doQtyMap == null) {
			return;
		}

		setDoQty(
			LocalizationUtil.updateLocalization(
				doQtyMap, getDoQty(), "DoQty",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDoQtyUnit() {
		if (_doQtyUnit == null) {
			return "";
		}
		else {
			return _doQtyUnit;
		}
	}

	@Override
	public String getDoQtyUnit(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDoQtyUnit(languageId);
	}

	@Override
	public String getDoQtyUnit(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDoQtyUnit(languageId, useDefault);
	}

	@Override
	public String getDoQtyUnit(String languageId) {
		return LocalizationUtil.getLocalization(getDoQtyUnit(), languageId);
	}

	@Override
	public String getDoQtyUnit(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDoQtyUnit(), languageId, useDefault);
	}

	@Override
	public String getDoQtyUnitCurrentLanguageId() {
		return _doQtyUnitCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDoQtyUnitCurrentValue() {
		Locale locale = getLocale(_doQtyUnitCurrentLanguageId);

		return getDoQtyUnit(locale);
	}

	@Override
	public Map<Locale, String> getDoQtyUnitMap() {
		return LocalizationUtil.getLocalizationMap(getDoQtyUnit());
	}

	@Override
	public void setDoQtyUnit(String doQtyUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_doQtyUnit = doQtyUnit;
	}

	@Override
	public void setDoQtyUnit(String doQtyUnit, Locale locale) {
		setDoQtyUnit(doQtyUnit, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDoQtyUnit(
		String doQtyUnit, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(doQtyUnit)) {
			setDoQtyUnit(
				LocalizationUtil.updateLocalization(
					getDoQtyUnit(), "DoQtyUnit", doQtyUnit, languageId,
					defaultLanguageId));
		}
		else {
			setDoQtyUnit(
				LocalizationUtil.removeLocalization(
					getDoQtyUnit(), "DoQtyUnit", languageId));
		}
	}

	@Override
	public void setDoQtyUnitCurrentLanguageId(String languageId) {
		_doQtyUnitCurrentLanguageId = languageId;
	}

	@Override
	public void setDoQtyUnitMap(Map<Locale, String> doQtyUnitMap) {
		setDoQtyUnitMap(doQtyUnitMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDoQtyUnitMap(
		Map<Locale, String> doQtyUnitMap, Locale defaultLocale) {

		if (doQtyUnitMap == null) {
			return;
		}

		setDoQtyUnit(
			LocalizationUtil.updateLocalization(
				doQtyUnitMap, getDoQtyUnit(), "DoQtyUnit",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDepo() {
		if (_depo == null) {
			return "";
		}
		else {
			return _depo;
		}
	}

	@Override
	public String getDepo(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDepo(languageId);
	}

	@Override
	public String getDepo(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDepo(languageId, useDefault);
	}

	@Override
	public String getDepo(String languageId) {
		return LocalizationUtil.getLocalization(getDepo(), languageId);
	}

	@Override
	public String getDepo(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDepo(), languageId, useDefault);
	}

	@Override
	public String getDepoCurrentLanguageId() {
		return _depoCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDepoCurrentValue() {
		Locale locale = getLocale(_depoCurrentLanguageId);

		return getDepo(locale);
	}

	@Override
	public Map<Locale, String> getDepoMap() {
		return LocalizationUtil.getLocalizationMap(getDepo());
	}

	@Override
	public void setDepo(String depo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_depo = depo;
	}

	@Override
	public void setDepo(String depo, Locale locale) {
		setDepo(depo, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDepo(String depo, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(depo)) {
			setDepo(
				LocalizationUtil.updateLocalization(
					getDepo(), "Depo", depo, languageId, defaultLanguageId));
		}
		else {
			setDepo(
				LocalizationUtil.removeLocalization(
					getDepo(), "Depo", languageId));
		}
	}

	@Override
	public void setDepoCurrentLanguageId(String languageId) {
		_depoCurrentLanguageId = languageId;
	}

	@Override
	public void setDepoMap(Map<Locale, String> depoMap) {
		setDepoMap(depoMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDepoMap(Map<Locale, String> depoMap, Locale defaultLocale) {
		if (depoMap == null) {
			return;
		}

		setDepo(
			LocalizationUtil.updateLocalization(
				depoMap, getDepo(), "Depo",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getWarehouseNo() {
		if (_warehouseNo == null) {
			return "";
		}
		else {
			return _warehouseNo;
		}
	}

	@Override
	public void setWarehouseNo(String warehouseNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_warehouseNo = warehouseNo;
	}

	@JSON
	@Override
	public String getKhamaalNo() {
		if (_khamaalNo == null) {
			return "";
		}
		else {
			return _khamaalNo;
		}
	}

	@Override
	public void setKhamaalNo(String khamaalNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_khamaalNo = khamaalNo;
	}

	@JSON
	@Override
	public String getLUANo() {
		if (_lUANo == null) {
			return "";
		}
		else {
			return _lUANo;
		}
	}

	@Override
	public void setLUANo(String lUANo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lUANo = lUANo;
	}

	@JSON
	@Override
	public Date getLUADate() {
		return _lUADate;
	}

	@Override
	public void setLUADate(Date lUADate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_lUADate = lUADate;
	}

	@JSON
	@Override
	public String getBagUnit() {
		if (_bagUnit == null) {
			return "";
		}
		else {
			return _bagUnit;
		}
	}

	@Override
	public String getBagUnit(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBagUnit(languageId);
	}

	@Override
	public String getBagUnit(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getBagUnit(languageId, useDefault);
	}

	@Override
	public String getBagUnit(String languageId) {
		return LocalizationUtil.getLocalization(getBagUnit(), languageId);
	}

	@Override
	public String getBagUnit(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getBagUnit(), languageId, useDefault);
	}

	@Override
	public String getBagUnitCurrentLanguageId() {
		return _bagUnitCurrentLanguageId;
	}

	@JSON
	@Override
	public String getBagUnitCurrentValue() {
		Locale locale = getLocale(_bagUnitCurrentLanguageId);

		return getBagUnit(locale);
	}

	@Override
	public Map<Locale, String> getBagUnitMap() {
		return LocalizationUtil.getLocalizationMap(getBagUnit());
	}

	@Override
	public void setBagUnit(String bagUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bagUnit = bagUnit;
	}

	@Override
	public void setBagUnit(String bagUnit, Locale locale) {
		setBagUnit(bagUnit, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setBagUnit(
		String bagUnit, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(bagUnit)) {
			setBagUnit(
				LocalizationUtil.updateLocalization(
					getBagUnit(), "BagUnit", bagUnit, languageId,
					defaultLanguageId));
		}
		else {
			setBagUnit(
				LocalizationUtil.removeLocalization(
					getBagUnit(), "BagUnit", languageId));
		}
	}

	@Override
	public void setBagUnitCurrentLanguageId(String languageId) {
		_bagUnitCurrentLanguageId = languageId;
	}

	@Override
	public void setBagUnitMap(Map<Locale, String> bagUnitMap) {
		setBagUnitMap(bagUnitMap, LocaleUtil.getDefault());
	}

	@Override
	public void setBagUnitMap(
		Map<Locale, String> bagUnitMap, Locale defaultLocale) {

		if (bagUnitMap == null) {
			return;
		}

		setBagUnit(
			LocalizationUtil.updateLocalization(
				bagUnitMap, getBagUnit(), "BagUnit",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getVehicleNo() {
		if (_vehicleNo == null) {
			return "";
		}
		else {
			return _vehicleNo;
		}
	}

	@Override
	public void setVehicleNo(String vehicleNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleNo = vehicleNo;
	}

	@JSON
	@Override
	public String getGateKeeper() {
		if (_gateKeeper == null) {
			return "";
		}
		else {
			return _gateKeeper;
		}
	}

	@Override
	public String getGateKeeper(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getGateKeeper(languageId);
	}

	@Override
	public String getGateKeeper(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getGateKeeper(languageId, useDefault);
	}

	@Override
	public String getGateKeeper(String languageId) {
		return LocalizationUtil.getLocalization(getGateKeeper(), languageId);
	}

	@Override
	public String getGateKeeper(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getGateKeeper(), languageId, useDefault);
	}

	@Override
	public String getGateKeeperCurrentLanguageId() {
		return _gateKeeperCurrentLanguageId;
	}

	@JSON
	@Override
	public String getGateKeeperCurrentValue() {
		Locale locale = getLocale(_gateKeeperCurrentLanguageId);

		return getGateKeeper(locale);
	}

	@Override
	public Map<Locale, String> getGateKeeperMap() {
		return LocalizationUtil.getLocalizationMap(getGateKeeper());
	}

	@Override
	public void setGateKeeper(String gateKeeper) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gateKeeper = gateKeeper;
	}

	@Override
	public void setGateKeeper(String gateKeeper, Locale locale) {
		setGateKeeper(gateKeeper, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setGateKeeper(
		String gateKeeper, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(gateKeeper)) {
			setGateKeeper(
				LocalizationUtil.updateLocalization(
					getGateKeeper(), "GateKeeper", gateKeeper, languageId,
					defaultLanguageId));
		}
		else {
			setGateKeeper(
				LocalizationUtil.removeLocalization(
					getGateKeeper(), "GateKeeper", languageId));
		}
	}

	@Override
	public void setGateKeeperCurrentLanguageId(String languageId) {
		_gateKeeperCurrentLanguageId = languageId;
	}

	@Override
	public void setGateKeeperMap(Map<Locale, String> gateKeeperMap) {
		setGateKeeperMap(gateKeeperMap, LocaleUtil.getDefault());
	}

	@Override
	public void setGateKeeperMap(
		Map<Locale, String> gateKeeperMap, Locale defaultLocale) {

		if (gateKeeperMap == null) {
			return;
		}

		setGateKeeper(
			LocalizationUtil.updateLocalization(
				gateKeeperMap, getGateKeeper(), "GateKeeper",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getGoodsIssueDate() {
		if (_goodsIssueDate == null) {
			return "";
		}
		else {
			return _goodsIssueDate;
		}
	}

	@Override
	public void setGoodsIssueDate(String goodsIssueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_goodsIssueDate = goodsIssueDate;
	}

	@JSON
	@Override
	public String getShipToParty() {
		if (_shipToParty == null) {
			return "";
		}
		else {
			return _shipToParty;
		}
	}

	@Override
	public void setShipToParty(String shipToParty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shipToParty = shipToParty;
	}

	@JSON
	@Override
	public String getShipToPartyName() {
		if (_shipToPartyName == null) {
			return "";
		}
		else {
			return _shipToPartyName;
		}
	}

	@Override
	public String getShipToPartyName(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getShipToPartyName(languageId);
	}

	@Override
	public String getShipToPartyName(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getShipToPartyName(languageId, useDefault);
	}

	@Override
	public String getShipToPartyName(String languageId) {
		return LocalizationUtil.getLocalization(
			getShipToPartyName(), languageId);
	}

	@Override
	public String getShipToPartyName(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getShipToPartyName(), languageId, useDefault);
	}

	@Override
	public String getShipToPartyNameCurrentLanguageId() {
		return _shipToPartyNameCurrentLanguageId;
	}

	@JSON
	@Override
	public String getShipToPartyNameCurrentValue() {
		Locale locale = getLocale(_shipToPartyNameCurrentLanguageId);

		return getShipToPartyName(locale);
	}

	@Override
	public Map<Locale, String> getShipToPartyNameMap() {
		return LocalizationUtil.getLocalizationMap(getShipToPartyName());
	}

	@Override
	public void setShipToPartyName(String shipToPartyName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_shipToPartyName = shipToPartyName;
	}

	@Override
	public void setShipToPartyName(String shipToPartyName, Locale locale) {
		setShipToPartyName(shipToPartyName, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setShipToPartyName(
		String shipToPartyName, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(shipToPartyName)) {
			setShipToPartyName(
				LocalizationUtil.updateLocalization(
					getShipToPartyName(), "ShipToPartyName", shipToPartyName,
					languageId, defaultLanguageId));
		}
		else {
			setShipToPartyName(
				LocalizationUtil.removeLocalization(
					getShipToPartyName(), "ShipToPartyName", languageId));
		}
	}

	@Override
	public void setShipToPartyNameCurrentLanguageId(String languageId) {
		_shipToPartyNameCurrentLanguageId = languageId;
	}

	@Override
	public void setShipToPartyNameMap(Map<Locale, String> shipToPartyNameMap) {
		setShipToPartyNameMap(shipToPartyNameMap, LocaleUtil.getDefault());
	}

	@Override
	public void setShipToPartyNameMap(
		Map<Locale, String> shipToPartyNameMap, Locale defaultLocale) {

		if (shipToPartyNameMap == null) {
			return;
		}

		setShipToPartyName(
			LocalizationUtil.updateLocalization(
				shipToPartyNameMap, getShipToPartyName(), "ShipToPartyName",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDeliveredQty() {
		if (_deliveredQty == null) {
			return "";
		}
		else {
			return _deliveredQty;
		}
	}

	@Override
	public String getDeliveredQty(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeliveredQty(languageId);
	}

	@Override
	public String getDeliveredQty(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeliveredQty(languageId, useDefault);
	}

	@Override
	public String getDeliveredQty(String languageId) {
		return LocalizationUtil.getLocalization(getDeliveredQty(), languageId);
	}

	@Override
	public String getDeliveredQty(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDeliveredQty(), languageId, useDefault);
	}

	@Override
	public String getDeliveredQtyCurrentLanguageId() {
		return _deliveredQtyCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDeliveredQtyCurrentValue() {
		Locale locale = getLocale(_deliveredQtyCurrentLanguageId);

		return getDeliveredQty(locale);
	}

	@Override
	public Map<Locale, String> getDeliveredQtyMap() {
		return LocalizationUtil.getLocalizationMap(getDeliveredQty());
	}

	@Override
	public void setDeliveredQty(String deliveredQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveredQty = deliveredQty;
	}

	@Override
	public void setDeliveredQty(String deliveredQty, Locale locale) {
		setDeliveredQty(deliveredQty, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDeliveredQty(
		String deliveredQty, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(deliveredQty)) {
			setDeliveredQty(
				LocalizationUtil.updateLocalization(
					getDeliveredQty(), "DeliveredQty", deliveredQty, languageId,
					defaultLanguageId));
		}
		else {
			setDeliveredQty(
				LocalizationUtil.removeLocalization(
					getDeliveredQty(), "DeliveredQty", languageId));
		}
	}

	@Override
	public void setDeliveredQtyCurrentLanguageId(String languageId) {
		_deliveredQtyCurrentLanguageId = languageId;
	}

	@Override
	public void setDeliveredQtyMap(Map<Locale, String> deliveredQtyMap) {
		setDeliveredQtyMap(deliveredQtyMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDeliveredQtyMap(
		Map<Locale, String> deliveredQtyMap, Locale defaultLocale) {

		if (deliveredQtyMap == null) {
			return;
		}

		setDeliveredQty(
			LocalizationUtil.updateLocalization(
				deliveredQtyMap, getDeliveredQty(), "DeliveredQty",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getDeliveredQtyUnit() {
		if (_deliveredQtyUnit == null) {
			return "";
		}
		else {
			return _deliveredQtyUnit;
		}
	}

	@Override
	public String getDeliveredQtyUnit(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeliveredQtyUnit(languageId);
	}

	@Override
	public String getDeliveredQtyUnit(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDeliveredQtyUnit(languageId, useDefault);
	}

	@Override
	public String getDeliveredQtyUnit(String languageId) {
		return LocalizationUtil.getLocalization(
			getDeliveredQtyUnit(), languageId);
	}

	@Override
	public String getDeliveredQtyUnit(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDeliveredQtyUnit(), languageId, useDefault);
	}

	@Override
	public String getDeliveredQtyUnitCurrentLanguageId() {
		return _deliveredQtyUnitCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDeliveredQtyUnitCurrentValue() {
		Locale locale = getLocale(_deliveredQtyUnitCurrentLanguageId);

		return getDeliveredQtyUnit(locale);
	}

	@Override
	public Map<Locale, String> getDeliveredQtyUnitMap() {
		return LocalizationUtil.getLocalizationMap(getDeliveredQtyUnit());
	}

	@Override
	public void setDeliveredQtyUnit(String deliveredQtyUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveredQtyUnit = deliveredQtyUnit;
	}

	@Override
	public void setDeliveredQtyUnit(String deliveredQtyUnit, Locale locale) {
		setDeliveredQtyUnit(deliveredQtyUnit, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setDeliveredQtyUnit(
		String deliveredQtyUnit, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(deliveredQtyUnit)) {
			setDeliveredQtyUnit(
				LocalizationUtil.updateLocalization(
					getDeliveredQtyUnit(), "DeliveredQtyUnit", deliveredQtyUnit,
					languageId, defaultLanguageId));
		}
		else {
			setDeliveredQtyUnit(
				LocalizationUtil.removeLocalization(
					getDeliveredQtyUnit(), "DeliveredQtyUnit", languageId));
		}
	}

	@Override
	public void setDeliveredQtyUnitCurrentLanguageId(String languageId) {
		_deliveredQtyUnitCurrentLanguageId = languageId;
	}

	@Override
	public void setDeliveredQtyUnitMap(
		Map<Locale, String> deliveredQtyUnitMap) {

		setDeliveredQtyUnitMap(deliveredQtyUnitMap, LocaleUtil.getDefault());
	}

	@Override
	public void setDeliveredQtyUnitMap(
		Map<Locale, String> deliveredQtyUnitMap, Locale defaultLocale) {

		if (deliveredQtyUnitMap == null) {
			return;
		}

		setDeliveredQtyUnit(
			LocalizationUtil.updateLocalization(
				deliveredQtyUnitMap, getDeliveredQtyUnit(), "DeliveredQtyUnit",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(DeliveryOrder.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> nameMap = getNameMap();

		for (Map.Entry<Locale, String> entry : nameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> commodityMap = getCommodityMap();

		for (Map.Entry<Locale, String> entry : commodityMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> commodityDescriptionMap =
			getCommodityDescriptionMap();

		for (Map.Entry<Locale, String> entry :
				commodityDescriptionMap.entrySet()) {

			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> doQtyMap = getDoQtyMap();

		for (Map.Entry<Locale, String> entry : doQtyMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> doQtyUnitMap = getDoQtyUnitMap();

		for (Map.Entry<Locale, String> entry : doQtyUnitMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> depoMap = getDepoMap();

		for (Map.Entry<Locale, String> entry : depoMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> bagUnitMap = getBagUnitMap();

		for (Map.Entry<Locale, String> entry : bagUnitMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> gateKeeperMap = getGateKeeperMap();

		for (Map.Entry<Locale, String> entry : gateKeeperMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> shipToPartyNameMap = getShipToPartyNameMap();

		for (Map.Entry<Locale, String> entry : shipToPartyNameMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> deliveredQtyMap = getDeliveredQtyMap();

		for (Map.Entry<Locale, String> entry : deliveredQtyMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> deliveredQtyUnitMap = getDeliveredQtyUnitMap();

		for (Map.Entry<Locale, String> entry : deliveredQtyUnitMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getName();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			DeliveryOrder.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String name = getName(defaultLocale);

		if (Validator.isNull(name)) {
			setName(getName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setName(getName(defaultLocale), defaultLocale, defaultLocale);
		}

		String commodity = getCommodity(defaultLocale);

		if (Validator.isNull(commodity)) {
			setCommodity(getCommodity(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setCommodity(
				getCommodity(defaultLocale), defaultLocale, defaultLocale);
		}

		String commodityDescription = getCommodityDescription(defaultLocale);

		if (Validator.isNull(commodityDescription)) {
			setCommodityDescription(
				getCommodityDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setCommodityDescription(
				getCommodityDescription(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String doQty = getDoQty(defaultLocale);

		if (Validator.isNull(doQty)) {
			setDoQty(getDoQty(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDoQty(getDoQty(defaultLocale), defaultLocale, defaultLocale);
		}

		String doQtyUnit = getDoQtyUnit(defaultLocale);

		if (Validator.isNull(doQtyUnit)) {
			setDoQtyUnit(getDoQtyUnit(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDoQtyUnit(
				getDoQtyUnit(defaultLocale), defaultLocale, defaultLocale);
		}

		String depo = getDepo(defaultLocale);

		if (Validator.isNull(depo)) {
			setDepo(getDepo(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDepo(getDepo(defaultLocale), defaultLocale, defaultLocale);
		}

		String bagUnit = getBagUnit(defaultLocale);

		if (Validator.isNull(bagUnit)) {
			setBagUnit(getBagUnit(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setBagUnit(getBagUnit(defaultLocale), defaultLocale, defaultLocale);
		}

		String gateKeeper = getGateKeeper(defaultLocale);

		if (Validator.isNull(gateKeeper)) {
			setGateKeeper(getGateKeeper(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setGateKeeper(
				getGateKeeper(defaultLocale), defaultLocale, defaultLocale);
		}

		String shipToPartyName = getShipToPartyName(defaultLocale);

		if (Validator.isNull(shipToPartyName)) {
			setShipToPartyName(
				getShipToPartyName(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setShipToPartyName(
				getShipToPartyName(defaultLocale), defaultLocale,
				defaultLocale);
		}

		String deliveredQty = getDeliveredQty(defaultLocale);

		if (Validator.isNull(deliveredQty)) {
			setDeliveredQty(
				getDeliveredQty(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDeliveredQty(
				getDeliveredQty(defaultLocale), defaultLocale, defaultLocale);
		}

		String deliveredQtyUnit = getDeliveredQtyUnit(defaultLocale);

		if (Validator.isNull(deliveredQtyUnit)) {
			setDeliveredQtyUnit(
				getDeliveredQtyUnit(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDeliveredQtyUnit(
				getDeliveredQtyUnit(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public DeliveryOrder toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, DeliveryOrder>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DeliveryOrderImpl deliveryOrderImpl = new DeliveryOrderImpl();

		deliveryOrderImpl.setUuid(getUuid());
		deliveryOrderImpl.setDeliveryOrderId(getDeliveryOrderId());
		deliveryOrderImpl.setIndentId(getIndentId());
		deliveryOrderImpl.setDeliveryOrderNo(getDeliveryOrderNo());
		deliveryOrderImpl.setCustomerNo(getCustomerNo());
		deliveryOrderImpl.setName(getName());
		deliveryOrderImpl.setDoDate(getDoDate());
		deliveryOrderImpl.setCommodity(getCommodity());
		deliveryOrderImpl.setCommodityDescription(getCommodityDescription());
		deliveryOrderImpl.setDoQty(getDoQty());
		deliveryOrderImpl.setDoQtyUnit(getDoQtyUnit());
		deliveryOrderImpl.setDepo(getDepo());
		deliveryOrderImpl.setWarehouseNo(getWarehouseNo());
		deliveryOrderImpl.setKhamaalNo(getKhamaalNo());
		deliveryOrderImpl.setLUANo(getLUANo());
		deliveryOrderImpl.setLUADate(getLUADate());
		deliveryOrderImpl.setBagUnit(getBagUnit());
		deliveryOrderImpl.setVehicleNo(getVehicleNo());
		deliveryOrderImpl.setGateKeeper(getGateKeeper());
		deliveryOrderImpl.setGoodsIssueDate(getGoodsIssueDate());
		deliveryOrderImpl.setShipToParty(getShipToParty());
		deliveryOrderImpl.setShipToPartyName(getShipToPartyName());
		deliveryOrderImpl.setDeliveredQty(getDeliveredQty());
		deliveryOrderImpl.setDeliveredQtyUnit(getDeliveredQtyUnit());
		deliveryOrderImpl.setCompanyId(getCompanyId());
		deliveryOrderImpl.setCreateDate(getCreateDate());
		deliveryOrderImpl.setModifiedDate(getModifiedDate());
		deliveryOrderImpl.setStatus(getStatus());

		deliveryOrderImpl.resetOriginalValues();

		return deliveryOrderImpl;
	}

	@Override
	public DeliveryOrder cloneWithOriginalValues() {
		DeliveryOrderImpl deliveryOrderImpl = new DeliveryOrderImpl();

		deliveryOrderImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		deliveryOrderImpl.setDeliveryOrderId(
			this.<Long>getColumnOriginalValue("deliveryOrderId"));
		deliveryOrderImpl.setIndentId(
			this.<Long>getColumnOriginalValue("indentId"));
		deliveryOrderImpl.setDeliveryOrderNo(
			this.<String>getColumnOriginalValue("deliveryOrderNo"));
		deliveryOrderImpl.setCustomerNo(
			this.<String>getColumnOriginalValue("customerNo"));
		deliveryOrderImpl.setName(this.<String>getColumnOriginalValue("name"));
		deliveryOrderImpl.setDoDate(
			this.<Date>getColumnOriginalValue("doDate"));
		deliveryOrderImpl.setCommodity(
			this.<String>getColumnOriginalValue("commodity"));
		deliveryOrderImpl.setCommodityDescription(
			this.<String>getColumnOriginalValue("commodityDescription"));
		deliveryOrderImpl.setDoQty(
			this.<String>getColumnOriginalValue("doQty"));
		deliveryOrderImpl.setDoQtyUnit(
			this.<String>getColumnOriginalValue("doQtyUnit"));
		deliveryOrderImpl.setDepo(this.<String>getColumnOriginalValue("depo"));
		deliveryOrderImpl.setWarehouseNo(
			this.<String>getColumnOriginalValue("warehouseNo"));
		deliveryOrderImpl.setKhamaalNo(
			this.<String>getColumnOriginalValue("khamaalNo"));
		deliveryOrderImpl.setLUANo(
			this.<String>getColumnOriginalValue("lUANo"));
		deliveryOrderImpl.setLUADate(
			this.<Date>getColumnOriginalValue("lUADate"));
		deliveryOrderImpl.setBagUnit(
			this.<String>getColumnOriginalValue("bagUnit"));
		deliveryOrderImpl.setVehicleNo(
			this.<String>getColumnOriginalValue("vehicleNo"));
		deliveryOrderImpl.setGateKeeper(
			this.<String>getColumnOriginalValue("gateKeeper"));
		deliveryOrderImpl.setGoodsIssueDate(
			this.<String>getColumnOriginalValue("goodsIssueDate"));
		deliveryOrderImpl.setShipToParty(
			this.<String>getColumnOriginalValue("shipToParty"));
		deliveryOrderImpl.setShipToPartyName(
			this.<String>getColumnOriginalValue("shipToPartyName"));
		deliveryOrderImpl.setDeliveredQty(
			this.<String>getColumnOriginalValue("deliveredQty"));
		deliveryOrderImpl.setDeliveredQtyUnit(
			this.<String>getColumnOriginalValue("deliveredQtyUnit"));
		deliveryOrderImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		deliveryOrderImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		deliveryOrderImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		deliveryOrderImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));

		return deliveryOrderImpl;
	}

	@Override
	public int compareTo(DeliveryOrder deliveryOrder) {
		DeliveryOrderPK primaryKey = deliveryOrder.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof DeliveryOrder)) {
			return false;
		}

		DeliveryOrder deliveryOrder = (DeliveryOrder)object;

		DeliveryOrderPK primaryKey = deliveryOrder.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<DeliveryOrder> toCacheModel() {
		DeliveryOrderCacheModel deliveryOrderCacheModel =
			new DeliveryOrderCacheModel();

		deliveryOrderCacheModel.deliveryOrderPK = getPrimaryKey();

		deliveryOrderCacheModel.uuid = getUuid();

		String uuid = deliveryOrderCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			deliveryOrderCacheModel.uuid = null;
		}

		deliveryOrderCacheModel.deliveryOrderId = getDeliveryOrderId();

		deliveryOrderCacheModel.indentId = getIndentId();

		deliveryOrderCacheModel.deliveryOrderNo = getDeliveryOrderNo();

		String deliveryOrderNo = deliveryOrderCacheModel.deliveryOrderNo;

		if ((deliveryOrderNo != null) && (deliveryOrderNo.length() == 0)) {
			deliveryOrderCacheModel.deliveryOrderNo = null;
		}

		deliveryOrderCacheModel.customerNo = getCustomerNo();

		String customerNo = deliveryOrderCacheModel.customerNo;

		if ((customerNo != null) && (customerNo.length() == 0)) {
			deliveryOrderCacheModel.customerNo = null;
		}

		deliveryOrderCacheModel.name = getName();

		String name = deliveryOrderCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			deliveryOrderCacheModel.name = null;
		}

		Date doDate = getDoDate();

		if (doDate != null) {
			deliveryOrderCacheModel.doDate = doDate.getTime();
		}
		else {
			deliveryOrderCacheModel.doDate = Long.MIN_VALUE;
		}

		deliveryOrderCacheModel.commodity = getCommodity();

		String commodity = deliveryOrderCacheModel.commodity;

		if ((commodity != null) && (commodity.length() == 0)) {
			deliveryOrderCacheModel.commodity = null;
		}

		deliveryOrderCacheModel.commodityDescription =
			getCommodityDescription();

		String commodityDescription =
			deliveryOrderCacheModel.commodityDescription;

		if ((commodityDescription != null) &&
			(commodityDescription.length() == 0)) {

			deliveryOrderCacheModel.commodityDescription = null;
		}

		deliveryOrderCacheModel.doQty = getDoQty();

		String doQty = deliveryOrderCacheModel.doQty;

		if ((doQty != null) && (doQty.length() == 0)) {
			deliveryOrderCacheModel.doQty = null;
		}

		deliveryOrderCacheModel.doQtyUnit = getDoQtyUnit();

		String doQtyUnit = deliveryOrderCacheModel.doQtyUnit;

		if ((doQtyUnit != null) && (doQtyUnit.length() == 0)) {
			deliveryOrderCacheModel.doQtyUnit = null;
		}

		deliveryOrderCacheModel.depo = getDepo();

		String depo = deliveryOrderCacheModel.depo;

		if ((depo != null) && (depo.length() == 0)) {
			deliveryOrderCacheModel.depo = null;
		}

		deliveryOrderCacheModel.warehouseNo = getWarehouseNo();

		String warehouseNo = deliveryOrderCacheModel.warehouseNo;

		if ((warehouseNo != null) && (warehouseNo.length() == 0)) {
			deliveryOrderCacheModel.warehouseNo = null;
		}

		deliveryOrderCacheModel.khamaalNo = getKhamaalNo();

		String khamaalNo = deliveryOrderCacheModel.khamaalNo;

		if ((khamaalNo != null) && (khamaalNo.length() == 0)) {
			deliveryOrderCacheModel.khamaalNo = null;
		}

		deliveryOrderCacheModel.lUANo = getLUANo();

		String lUANo = deliveryOrderCacheModel.lUANo;

		if ((lUANo != null) && (lUANo.length() == 0)) {
			deliveryOrderCacheModel.lUANo = null;
		}

		Date lUADate = getLUADate();

		if (lUADate != null) {
			deliveryOrderCacheModel.lUADate = lUADate.getTime();
		}
		else {
			deliveryOrderCacheModel.lUADate = Long.MIN_VALUE;
		}

		deliveryOrderCacheModel.bagUnit = getBagUnit();

		String bagUnit = deliveryOrderCacheModel.bagUnit;

		if ((bagUnit != null) && (bagUnit.length() == 0)) {
			deliveryOrderCacheModel.bagUnit = null;
		}

		deliveryOrderCacheModel.vehicleNo = getVehicleNo();

		String vehicleNo = deliveryOrderCacheModel.vehicleNo;

		if ((vehicleNo != null) && (vehicleNo.length() == 0)) {
			deliveryOrderCacheModel.vehicleNo = null;
		}

		deliveryOrderCacheModel.gateKeeper = getGateKeeper();

		String gateKeeper = deliveryOrderCacheModel.gateKeeper;

		if ((gateKeeper != null) && (gateKeeper.length() == 0)) {
			deliveryOrderCacheModel.gateKeeper = null;
		}

		deliveryOrderCacheModel.goodsIssueDate = getGoodsIssueDate();

		String goodsIssueDate = deliveryOrderCacheModel.goodsIssueDate;

		if ((goodsIssueDate != null) && (goodsIssueDate.length() == 0)) {
			deliveryOrderCacheModel.goodsIssueDate = null;
		}

		deliveryOrderCacheModel.shipToParty = getShipToParty();

		String shipToParty = deliveryOrderCacheModel.shipToParty;

		if ((shipToParty != null) && (shipToParty.length() == 0)) {
			deliveryOrderCacheModel.shipToParty = null;
		}

		deliveryOrderCacheModel.shipToPartyName = getShipToPartyName();

		String shipToPartyName = deliveryOrderCacheModel.shipToPartyName;

		if ((shipToPartyName != null) && (shipToPartyName.length() == 0)) {
			deliveryOrderCacheModel.shipToPartyName = null;
		}

		deliveryOrderCacheModel.deliveredQty = getDeliveredQty();

		String deliveredQty = deliveryOrderCacheModel.deliveredQty;

		if ((deliveredQty != null) && (deliveredQty.length() == 0)) {
			deliveryOrderCacheModel.deliveredQty = null;
		}

		deliveryOrderCacheModel.deliveredQtyUnit = getDeliveredQtyUnit();

		String deliveredQtyUnit = deliveryOrderCacheModel.deliveredQtyUnit;

		if ((deliveredQtyUnit != null) && (deliveredQtyUnit.length() == 0)) {
			deliveryOrderCacheModel.deliveredQtyUnit = null;
		}

		deliveryOrderCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			deliveryOrderCacheModel.createDate = createDate.getTime();
		}
		else {
			deliveryOrderCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			deliveryOrderCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			deliveryOrderCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		deliveryOrderCacheModel.status = getStatus();

		return deliveryOrderCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DeliveryOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<DeliveryOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DeliveryOrder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((DeliveryOrder)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DeliveryOrder, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DeliveryOrder, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<DeliveryOrder, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DeliveryOrder)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, DeliveryOrder>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					DeliveryOrder.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _deliveryOrderId;
	private long _indentId;
	private String _deliveryOrderNo;
	private String _customerNo;
	private String _name;
	private String _nameCurrentLanguageId;
	private Date _doDate;
	private String _commodity;
	private String _commodityCurrentLanguageId;
	private String _commodityDescription;
	private String _commodityDescriptionCurrentLanguageId;
	private String _doQty;
	private String _doQtyCurrentLanguageId;
	private String _doQtyUnit;
	private String _doQtyUnitCurrentLanguageId;
	private String _depo;
	private String _depoCurrentLanguageId;
	private String _warehouseNo;
	private String _khamaalNo;
	private String _lUANo;
	private Date _lUADate;
	private String _bagUnit;
	private String _bagUnitCurrentLanguageId;
	private String _vehicleNo;
	private String _gateKeeper;
	private String _gateKeeperCurrentLanguageId;
	private String _goodsIssueDate;
	private String _shipToParty;
	private String _shipToPartyName;
	private String _shipToPartyNameCurrentLanguageId;
	private String _deliveredQty;
	private String _deliveredQtyCurrentLanguageId;
	private String _deliveredQtyUnit;
	private String _deliveredQtyUnitCurrentLanguageId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<DeliveryOrder, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((DeliveryOrder)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("deliveryOrderId", _deliveryOrderId);
		_columnOriginalValues.put("indentId", _indentId);
		_columnOriginalValues.put("deliveryOrderNo", _deliveryOrderNo);
		_columnOriginalValues.put("customerNo", _customerNo);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("doDate", _doDate);
		_columnOriginalValues.put("commodity", _commodity);
		_columnOriginalValues.put(
			"commodityDescription", _commodityDescription);
		_columnOriginalValues.put("doQty", _doQty);
		_columnOriginalValues.put("doQtyUnit", _doQtyUnit);
		_columnOriginalValues.put("depo", _depo);
		_columnOriginalValues.put("warehouseNo", _warehouseNo);
		_columnOriginalValues.put("khamaalNo", _khamaalNo);
		_columnOriginalValues.put("lUANo", _lUANo);
		_columnOriginalValues.put("lUADate", _lUADate);
		_columnOriginalValues.put("bagUnit", _bagUnit);
		_columnOriginalValues.put("vehicleNo", _vehicleNo);
		_columnOriginalValues.put("gateKeeper", _gateKeeper);
		_columnOriginalValues.put("goodsIssueDate", _goodsIssueDate);
		_columnOriginalValues.put("shipToParty", _shipToParty);
		_columnOriginalValues.put("shipToPartyName", _shipToPartyName);
		_columnOriginalValues.put("deliveredQty", _deliveredQty);
		_columnOriginalValues.put("deliveredQtyUnit", _deliveredQtyUnit);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("deliveryOrderId", 2L);

		columnBitmasks.put("indentId", 4L);

		columnBitmasks.put("deliveryOrderNo", 8L);

		columnBitmasks.put("customerNo", 16L);

		columnBitmasks.put("name", 32L);

		columnBitmasks.put("doDate", 64L);

		columnBitmasks.put("commodity", 128L);

		columnBitmasks.put("commodityDescription", 256L);

		columnBitmasks.put("doQty", 512L);

		columnBitmasks.put("doQtyUnit", 1024L);

		columnBitmasks.put("depo", 2048L);

		columnBitmasks.put("warehouseNo", 4096L);

		columnBitmasks.put("khamaalNo", 8192L);

		columnBitmasks.put("lUANo", 16384L);

		columnBitmasks.put("lUADate", 32768L);

		columnBitmasks.put("bagUnit", 65536L);

		columnBitmasks.put("vehicleNo", 131072L);

		columnBitmasks.put("gateKeeper", 262144L);

		columnBitmasks.put("goodsIssueDate", 524288L);

		columnBitmasks.put("shipToParty", 1048576L);

		columnBitmasks.put("shipToPartyName", 2097152L);

		columnBitmasks.put("deliveredQty", 4194304L);

		columnBitmasks.put("deliveredQtyUnit", 8388608L);

		columnBitmasks.put("companyId", 16777216L);

		columnBitmasks.put("createDate", 33554432L);

		columnBitmasks.put("modifiedDate", 67108864L);

		columnBitmasks.put("status", 134217728L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private DeliveryOrder _escapedModel;

}