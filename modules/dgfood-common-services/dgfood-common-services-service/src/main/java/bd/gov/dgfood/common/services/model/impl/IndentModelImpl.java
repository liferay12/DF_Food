/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.common.services.model.impl;

import bd.gov.dgfood.common.services.model.Indent;
import bd.gov.dgfood.common.services.model.IndentModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the Indent service. Represents a row in the &quot;DGF_Indent&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>IndentModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IndentImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see IndentImpl
 * @generated
 */
@JSON(strict = true)
public class IndentModelImpl
	extends BaseModelImpl<Indent> implements IndentModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a indent model instance should use the <code>Indent</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGF_Indent";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"indentId", Types.BIGINT},
		{"allocationId", Types.BIGINT}, {"commodity", Types.VARCHAR},
		{"commodityDescription", Types.VARCHAR}, {"quantity", Types.DOUBLE},
		{"quantityUnit", Types.VARCHAR},
		{"requiredDeliveryDate", Types.TIMESTAMP},
		{"foodGrainissueDate", Types.TIMESTAMP}, {"netPrice", Types.DOUBLE},
		{"netPriceCurrencyKey", Types.VARCHAR}, {"netValue", Types.DOUBLE},
		{"netValueCurrencyKey", Types.VARCHAR}, {"salesOffice", Types.VARCHAR},
		{"depo", Types.VARCHAR}, {"repaymentTerms", Types.VARCHAR},
		{"deliveryTerms", Types.VARCHAR}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"userId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"reason", Types.INTEGER}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("indentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("allocationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("commodity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commodityDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("quantityUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("requiredDeliveryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("foodGrainissueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("netPrice", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("netPriceCurrencyKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("netValue", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("netValueCurrencyKey", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salesOffice", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("depo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("repaymentTerms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliveryTerms", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("reason", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGF_Indent (uuid_ VARCHAR(75) null,indentId LONG not null primary key,allocationId LONG,commodity VARCHAR(75) null,commodityDescription VARCHAR(75) null,quantity DOUBLE,quantityUnit VARCHAR(75) null,requiredDeliveryDate DATE null,foodGrainissueDate DATE null,netPrice DOUBLE,netPriceCurrencyKey VARCHAR(75) null,netValue DOUBLE,netValueCurrencyKey VARCHAR(75) null,salesOffice VARCHAR(75) null,depo VARCHAR(75) null,repaymentTerms VARCHAR(75) null,deliveryTerms VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,status INTEGER,reason INTEGER)";

	public static final String TABLE_SQL_DROP = "drop table DGF_Indent";

	public static final String ORDER_BY_JPQL =
		" ORDER BY indent.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGF_Indent.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long ALLOCATIONID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public IndentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _indentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIndentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _indentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Indent.class;
	}

	@Override
	public String getModelClassName() {
		return Indent.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<Indent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<Indent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Indent, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((Indent)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<Indent, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<Indent, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(Indent)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<Indent, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<Indent, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<Indent, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<Indent, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<Indent, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<Indent, Object>>();
		Map<String, BiConsumer<Indent, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<Indent, ?>>();

		attributeGetterFunctions.put("uuid", Indent::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<Indent, String>)Indent::setUuid);
		attributeGetterFunctions.put("indentId", Indent::getIndentId);
		attributeSetterBiConsumers.put(
			"indentId", (BiConsumer<Indent, Long>)Indent::setIndentId);
		attributeGetterFunctions.put("allocationId", Indent::getAllocationId);
		attributeSetterBiConsumers.put(
			"allocationId", (BiConsumer<Indent, Long>)Indent::setAllocationId);
		attributeGetterFunctions.put("commodity", Indent::getCommodity);
		attributeSetterBiConsumers.put(
			"commodity", (BiConsumer<Indent, String>)Indent::setCommodity);
		attributeGetterFunctions.put(
			"commodityDescription", Indent::getCommodityDescription);
		attributeSetterBiConsumers.put(
			"commodityDescription",
			(BiConsumer<Indent, String>)Indent::setCommodityDescription);
		attributeGetterFunctions.put("quantity", Indent::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity", (BiConsumer<Indent, Double>)Indent::setQuantity);
		attributeGetterFunctions.put("quantityUnit", Indent::getQuantityUnit);
		attributeSetterBiConsumers.put(
			"quantityUnit",
			(BiConsumer<Indent, String>)Indent::setQuantityUnit);
		attributeGetterFunctions.put(
			"requiredDeliveryDate", Indent::getRequiredDeliveryDate);
		attributeSetterBiConsumers.put(
			"requiredDeliveryDate",
			(BiConsumer<Indent, Date>)Indent::setRequiredDeliveryDate);
		attributeGetterFunctions.put(
			"foodGrainissueDate", Indent::getFoodGrainissueDate);
		attributeSetterBiConsumers.put(
			"foodGrainissueDate",
			(BiConsumer<Indent, Date>)Indent::setFoodGrainissueDate);
		attributeGetterFunctions.put("netPrice", Indent::getNetPrice);
		attributeSetterBiConsumers.put(
			"netPrice", (BiConsumer<Indent, Double>)Indent::setNetPrice);
		attributeGetterFunctions.put(
			"netPriceCurrencyKey", Indent::getNetPriceCurrencyKey);
		attributeSetterBiConsumers.put(
			"netPriceCurrencyKey",
			(BiConsumer<Indent, String>)Indent::setNetPriceCurrencyKey);
		attributeGetterFunctions.put("netValue", Indent::getNetValue);
		attributeSetterBiConsumers.put(
			"netValue", (BiConsumer<Indent, Double>)Indent::setNetValue);
		attributeGetterFunctions.put(
			"netValueCurrencyKey", Indent::getNetValueCurrencyKey);
		attributeSetterBiConsumers.put(
			"netValueCurrencyKey",
			(BiConsumer<Indent, String>)Indent::setNetValueCurrencyKey);
		attributeGetterFunctions.put("salesOffice", Indent::getSalesOffice);
		attributeSetterBiConsumers.put(
			"salesOffice", (BiConsumer<Indent, String>)Indent::setSalesOffice);
		attributeGetterFunctions.put("depo", Indent::getDepo);
		attributeSetterBiConsumers.put(
			"depo", (BiConsumer<Indent, String>)Indent::setDepo);
		attributeGetterFunctions.put(
			"repaymentTerms", Indent::getRepaymentTerms);
		attributeSetterBiConsumers.put(
			"repaymentTerms",
			(BiConsumer<Indent, String>)Indent::setRepaymentTerms);
		attributeGetterFunctions.put("deliveryTerms", Indent::getDeliveryTerms);
		attributeSetterBiConsumers.put(
			"deliveryTerms",
			(BiConsumer<Indent, String>)Indent::setDeliveryTerms);
		attributeGetterFunctions.put("groupId", Indent::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<Indent, Long>)Indent::setGroupId);
		attributeGetterFunctions.put("companyId", Indent::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<Indent, Long>)Indent::setCompanyId);
		attributeGetterFunctions.put("userId", Indent::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<Indent, Long>)Indent::setUserId);
		attributeGetterFunctions.put("createDate", Indent::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<Indent, Date>)Indent::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", Indent::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<Indent, Date>)Indent::setModifiedDate);
		attributeGetterFunctions.put("status", Indent::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<Indent, Integer>)Indent::setStatus);
		attributeGetterFunctions.put("reason", Indent::getReason);
		attributeSetterBiConsumers.put(
			"reason", (BiConsumer<Indent, Integer>)Indent::setReason);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getIndentId() {
		return _indentId;
	}

	@Override
	public void setIndentId(long indentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_indentId = indentId;
	}

	@JSON
	@Override
	public long getAllocationId() {
		return _allocationId;
	}

	@Override
	public void setAllocationId(long allocationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allocationId = allocationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalAllocationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("allocationId"));
	}

	@JSON
	@Override
	public String getCommodity() {
		if (_commodity == null) {
			return "";
		}
		else {
			return _commodity;
		}
	}

	@Override
	public void setCommodity(String commodity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodity = commodity;
	}

	@JSON
	@Override
	public String getCommodityDescription() {
		if (_commodityDescription == null) {
			return "";
		}
		else {
			return _commodityDescription;
		}
	}

	@Override
	public void setCommodityDescription(String commodityDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodityDescription = commodityDescription;
	}

	@JSON
	@Override
	public double getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(double quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@JSON
	@Override
	public String getQuantityUnit() {
		if (_quantityUnit == null) {
			return "";
		}
		else {
			return _quantityUnit;
		}
	}

	@Override
	public void setQuantityUnit(String quantityUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantityUnit = quantityUnit;
	}

	@JSON
	@Override
	public Date getRequiredDeliveryDate() {
		return _requiredDeliveryDate;
	}

	@Override
	public void setRequiredDeliveryDate(Date requiredDeliveryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requiredDeliveryDate = requiredDeliveryDate;
	}

	@JSON
	@Override
	public Date getFoodGrainissueDate() {
		return _foodGrainissueDate;
	}

	@Override
	public void setFoodGrainissueDate(Date foodGrainissueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodGrainissueDate = foodGrainissueDate;
	}

	@JSON
	@Override
	public double getNetPrice() {
		return _netPrice;
	}

	@Override
	public void setNetPrice(double netPrice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_netPrice = netPrice;
	}

	@JSON
	@Override
	public String getNetPriceCurrencyKey() {
		if (_netPriceCurrencyKey == null) {
			return "";
		}
		else {
			return _netPriceCurrencyKey;
		}
	}

	@Override
	public void setNetPriceCurrencyKey(String netPriceCurrencyKey) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_netPriceCurrencyKey = netPriceCurrencyKey;
	}

	@JSON
	@Override
	public double getNetValue() {
		return _netValue;
	}

	@Override
	public void setNetValue(double netValue) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_netValue = netValue;
	}

	@JSON
	@Override
	public String getNetValueCurrencyKey() {
		if (_netValueCurrencyKey == null) {
			return "";
		}
		else {
			return _netValueCurrencyKey;
		}
	}

	@Override
	public void setNetValueCurrencyKey(String netValueCurrencyKey) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_netValueCurrencyKey = netValueCurrencyKey;
	}

	@JSON
	@Override
	public String getSalesOffice() {
		if (_salesOffice == null) {
			return "";
		}
		else {
			return _salesOffice;
		}
	}

	@Override
	public void setSalesOffice(String salesOffice) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesOffice = salesOffice;
	}

	@JSON
	@Override
	public String getDepo() {
		if (_depo == null) {
			return "";
		}
		else {
			return _depo;
		}
	}

	@Override
	public void setDepo(String depo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_depo = depo;
	}

	@JSON
	@Override
	public String getRepaymentTerms() {
		if (_repaymentTerms == null) {
			return "";
		}
		else {
			return _repaymentTerms;
		}
	}

	@Override
	public void setRepaymentTerms(String repaymentTerms) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_repaymentTerms = repaymentTerms;
	}

	@JSON
	@Override
	public String getDeliveryTerms() {
		if (_deliveryTerms == null) {
			return "";
		}
		else {
			return _deliveryTerms;
		}
	}

	@Override
	public void setDeliveryTerms(String deliveryTerms) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveryTerms = deliveryTerms;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public int getReason() {
		return _reason;
	}

	@Override
	public void setReason(int reason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reason = reason;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(Indent.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), Indent.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Indent toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, Indent>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IndentImpl indentImpl = new IndentImpl();

		indentImpl.setUuid(getUuid());
		indentImpl.setIndentId(getIndentId());
		indentImpl.setAllocationId(getAllocationId());
		indentImpl.setCommodity(getCommodity());
		indentImpl.setCommodityDescription(getCommodityDescription());
		indentImpl.setQuantity(getQuantity());
		indentImpl.setQuantityUnit(getQuantityUnit());
		indentImpl.setRequiredDeliveryDate(getRequiredDeliveryDate());
		indentImpl.setFoodGrainissueDate(getFoodGrainissueDate());
		indentImpl.setNetPrice(getNetPrice());
		indentImpl.setNetPriceCurrencyKey(getNetPriceCurrencyKey());
		indentImpl.setNetValue(getNetValue());
		indentImpl.setNetValueCurrencyKey(getNetValueCurrencyKey());
		indentImpl.setSalesOffice(getSalesOffice());
		indentImpl.setDepo(getDepo());
		indentImpl.setRepaymentTerms(getRepaymentTerms());
		indentImpl.setDeliveryTerms(getDeliveryTerms());
		indentImpl.setGroupId(getGroupId());
		indentImpl.setCompanyId(getCompanyId());
		indentImpl.setUserId(getUserId());
		indentImpl.setCreateDate(getCreateDate());
		indentImpl.setModifiedDate(getModifiedDate());
		indentImpl.setStatus(getStatus());
		indentImpl.setReason(getReason());

		indentImpl.resetOriginalValues();

		return indentImpl;
	}

	@Override
	public Indent cloneWithOriginalValues() {
		IndentImpl indentImpl = new IndentImpl();

		indentImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		indentImpl.setIndentId(this.<Long>getColumnOriginalValue("indentId"));
		indentImpl.setAllocationId(
			this.<Long>getColumnOriginalValue("allocationId"));
		indentImpl.setCommodity(
			this.<String>getColumnOriginalValue("commodity"));
		indentImpl.setCommodityDescription(
			this.<String>getColumnOriginalValue("commodityDescription"));
		indentImpl.setQuantity(this.<Double>getColumnOriginalValue("quantity"));
		indentImpl.setQuantityUnit(
			this.<String>getColumnOriginalValue("quantityUnit"));
		indentImpl.setRequiredDeliveryDate(
			this.<Date>getColumnOriginalValue("requiredDeliveryDate"));
		indentImpl.setFoodGrainissueDate(
			this.<Date>getColumnOriginalValue("foodGrainissueDate"));
		indentImpl.setNetPrice(this.<Double>getColumnOriginalValue("netPrice"));
		indentImpl.setNetPriceCurrencyKey(
			this.<String>getColumnOriginalValue("netPriceCurrencyKey"));
		indentImpl.setNetValue(this.<Double>getColumnOriginalValue("netValue"));
		indentImpl.setNetValueCurrencyKey(
			this.<String>getColumnOriginalValue("netValueCurrencyKey"));
		indentImpl.setSalesOffice(
			this.<String>getColumnOriginalValue("salesOffice"));
		indentImpl.setDepo(this.<String>getColumnOriginalValue("depo"));
		indentImpl.setRepaymentTerms(
			this.<String>getColumnOriginalValue("repaymentTerms"));
		indentImpl.setDeliveryTerms(
			this.<String>getColumnOriginalValue("deliveryTerms"));
		indentImpl.setGroupId(this.<Long>getColumnOriginalValue("groupId"));
		indentImpl.setCompanyId(this.<Long>getColumnOriginalValue("companyId"));
		indentImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		indentImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		indentImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		indentImpl.setStatus(this.<Integer>getColumnOriginalValue("status"));
		indentImpl.setReason(this.<Integer>getColumnOriginalValue("reason"));

		return indentImpl;
	}

	@Override
	public int compareTo(Indent indent) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), indent.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof Indent)) {
			return false;
		}

		Indent indent = (Indent)object;

		long primaryKey = indent.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<Indent> toCacheModel() {
		IndentCacheModel indentCacheModel = new IndentCacheModel();

		indentCacheModel.uuid = getUuid();

		String uuid = indentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			indentCacheModel.uuid = null;
		}

		indentCacheModel.indentId = getIndentId();

		indentCacheModel.allocationId = getAllocationId();

		indentCacheModel.commodity = getCommodity();

		String commodity = indentCacheModel.commodity;

		if ((commodity != null) && (commodity.length() == 0)) {
			indentCacheModel.commodity = null;
		}

		indentCacheModel.commodityDescription = getCommodityDescription();

		String commodityDescription = indentCacheModel.commodityDescription;

		if ((commodityDescription != null) &&
			(commodityDescription.length() == 0)) {

			indentCacheModel.commodityDescription = null;
		}

		indentCacheModel.quantity = getQuantity();

		indentCacheModel.quantityUnit = getQuantityUnit();

		String quantityUnit = indentCacheModel.quantityUnit;

		if ((quantityUnit != null) && (quantityUnit.length() == 0)) {
			indentCacheModel.quantityUnit = null;
		}

		Date requiredDeliveryDate = getRequiredDeliveryDate();

		if (requiredDeliveryDate != null) {
			indentCacheModel.requiredDeliveryDate =
				requiredDeliveryDate.getTime();
		}
		else {
			indentCacheModel.requiredDeliveryDate = Long.MIN_VALUE;
		}

		Date foodGrainissueDate = getFoodGrainissueDate();

		if (foodGrainissueDate != null) {
			indentCacheModel.foodGrainissueDate = foodGrainissueDate.getTime();
		}
		else {
			indentCacheModel.foodGrainissueDate = Long.MIN_VALUE;
		}

		indentCacheModel.netPrice = getNetPrice();

		indentCacheModel.netPriceCurrencyKey = getNetPriceCurrencyKey();

		String netPriceCurrencyKey = indentCacheModel.netPriceCurrencyKey;

		if ((netPriceCurrencyKey != null) &&
			(netPriceCurrencyKey.length() == 0)) {

			indentCacheModel.netPriceCurrencyKey = null;
		}

		indentCacheModel.netValue = getNetValue();

		indentCacheModel.netValueCurrencyKey = getNetValueCurrencyKey();

		String netValueCurrencyKey = indentCacheModel.netValueCurrencyKey;

		if ((netValueCurrencyKey != null) &&
			(netValueCurrencyKey.length() == 0)) {

			indentCacheModel.netValueCurrencyKey = null;
		}

		indentCacheModel.salesOffice = getSalesOffice();

		String salesOffice = indentCacheModel.salesOffice;

		if ((salesOffice != null) && (salesOffice.length() == 0)) {
			indentCacheModel.salesOffice = null;
		}

		indentCacheModel.depo = getDepo();

		String depo = indentCacheModel.depo;

		if ((depo != null) && (depo.length() == 0)) {
			indentCacheModel.depo = null;
		}

		indentCacheModel.repaymentTerms = getRepaymentTerms();

		String repaymentTerms = indentCacheModel.repaymentTerms;

		if ((repaymentTerms != null) && (repaymentTerms.length() == 0)) {
			indentCacheModel.repaymentTerms = null;
		}

		indentCacheModel.deliveryTerms = getDeliveryTerms();

		String deliveryTerms = indentCacheModel.deliveryTerms;

		if ((deliveryTerms != null) && (deliveryTerms.length() == 0)) {
			indentCacheModel.deliveryTerms = null;
		}

		indentCacheModel.groupId = getGroupId();

		indentCacheModel.companyId = getCompanyId();

		indentCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			indentCacheModel.createDate = createDate.getTime();
		}
		else {
			indentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			indentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			indentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		indentCacheModel.status = getStatus();

		indentCacheModel.reason = getReason();

		return indentCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<Indent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<Indent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Indent, Object> attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((Indent)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<Indent, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<Indent, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<Indent, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((Indent)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, Indent>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					Indent.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _indentId;
	private long _allocationId;
	private String _commodity;
	private String _commodityDescription;
	private double _quantity;
	private String _quantityUnit;
	private Date _requiredDeliveryDate;
	private Date _foodGrainissueDate;
	private double _netPrice;
	private String _netPriceCurrencyKey;
	private double _netValue;
	private String _netValueCurrencyKey;
	private String _salesOffice;
	private String _depo;
	private String _repaymentTerms;
	private String _deliveryTerms;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _reason;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<Indent, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((Indent)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("indentId", _indentId);
		_columnOriginalValues.put("allocationId", _allocationId);
		_columnOriginalValues.put("commodity", _commodity);
		_columnOriginalValues.put(
			"commodityDescription", _commodityDescription);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("quantityUnit", _quantityUnit);
		_columnOriginalValues.put(
			"requiredDeliveryDate", _requiredDeliveryDate);
		_columnOriginalValues.put("foodGrainissueDate", _foodGrainissueDate);
		_columnOriginalValues.put("netPrice", _netPrice);
		_columnOriginalValues.put("netPriceCurrencyKey", _netPriceCurrencyKey);
		_columnOriginalValues.put("netValue", _netValue);
		_columnOriginalValues.put("netValueCurrencyKey", _netValueCurrencyKey);
		_columnOriginalValues.put("salesOffice", _salesOffice);
		_columnOriginalValues.put("depo", _depo);
		_columnOriginalValues.put("repaymentTerms", _repaymentTerms);
		_columnOriginalValues.put("deliveryTerms", _deliveryTerms);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("reason", _reason);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("indentId", 2L);

		columnBitmasks.put("allocationId", 4L);

		columnBitmasks.put("commodity", 8L);

		columnBitmasks.put("commodityDescription", 16L);

		columnBitmasks.put("quantity", 32L);

		columnBitmasks.put("quantityUnit", 64L);

		columnBitmasks.put("requiredDeliveryDate", 128L);

		columnBitmasks.put("foodGrainissueDate", 256L);

		columnBitmasks.put("netPrice", 512L);

		columnBitmasks.put("netPriceCurrencyKey", 1024L);

		columnBitmasks.put("netValue", 2048L);

		columnBitmasks.put("netValueCurrencyKey", 4096L);

		columnBitmasks.put("salesOffice", 8192L);

		columnBitmasks.put("depo", 16384L);

		columnBitmasks.put("repaymentTerms", 32768L);

		columnBitmasks.put("deliveryTerms", 65536L);

		columnBitmasks.put("groupId", 131072L);

		columnBitmasks.put("companyId", 262144L);

		columnBitmasks.put("userId", 524288L);

		columnBitmasks.put("createDate", 1048576L);

		columnBitmasks.put("modifiedDate", 2097152L);

		columnBitmasks.put("status", 4194304L);

		columnBitmasks.put("reason", 8388608L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private Indent _escapedModel;

}