/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.common.services.model.impl;

import bd.gov.dgfood.common.services.model.MDMSyncStatus;
import bd.gov.dgfood.common.services.model.MDMSyncStatusModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MDMSyncStatus service. Represents a row in the &quot;DGF_MDMSyncStatus&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MDMSyncStatusModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MDMSyncStatusImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MDMSyncStatusImpl
 * @generated
 */
@JSON(strict = true)
public class MDMSyncStatusModelImpl
	extends BaseModelImpl<MDMSyncStatus> implements MDMSyncStatusModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a mdm sync status model instance should use the <code>MDMSyncStatus</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGF_MDMSyncStatus";

	public static final Object[][] TABLE_COLUMNS = {
		{"mdmSyncStatusId", Types.BIGINT}, {"userType", Types.VARCHAR},
		{"className", Types.VARCHAR}, {"classPk", Types.BIGINT},
		{"requestPayload", Types.VARCHAR}, {"mdmEndPoint", Types.VARCHAR},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("mdmSyncStatusId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("className", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPk", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("requestPayload", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mdmEndPoint", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGF_MDMSyncStatus (mdmSyncStatusId LONG not null primary key,userType VARCHAR(75) null,className VARCHAR(75) null,classPk LONG,requestPayload VARCHAR(75) null,mdmEndPoint VARCHAR(75) null,userId LONG,createDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table DGF_MDMSyncStatus";

	public static final String ORDER_BY_JPQL =
		" ORDER BY mdmSyncStatus.mdmSyncStatusId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGF_MDMSyncStatus.mdmSyncStatusId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MDMSYNCSTATUSID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MDMSyncStatusModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _mdmSyncStatusId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMdmSyncStatusId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _mdmSyncStatusId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MDMSyncStatus.class;
	}

	@Override
	public String getModelClassName() {
		return MDMSyncStatus.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MDMSyncStatus, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MDMSyncStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MDMSyncStatus, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MDMSyncStatus)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MDMSyncStatus, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MDMSyncStatus, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MDMSyncStatus)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MDMSyncStatus, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MDMSyncStatus, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<MDMSyncStatus, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MDMSyncStatus, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MDMSyncStatus, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<MDMSyncStatus, Object>>();
		Map<String, BiConsumer<MDMSyncStatus, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<MDMSyncStatus, ?>>();

		attributeGetterFunctions.put(
			"mdmSyncStatusId", MDMSyncStatus::getMdmSyncStatusId);
		attributeSetterBiConsumers.put(
			"mdmSyncStatusId",
			(BiConsumer<MDMSyncStatus, Long>)MDMSyncStatus::setMdmSyncStatusId);
		attributeGetterFunctions.put("userType", MDMSyncStatus::getUserType);
		attributeSetterBiConsumers.put(
			"userType",
			(BiConsumer<MDMSyncStatus, String>)MDMSyncStatus::setUserType);
		attributeGetterFunctions.put("className", MDMSyncStatus::getClassName);
		attributeSetterBiConsumers.put(
			"className",
			(BiConsumer<MDMSyncStatus, String>)MDMSyncStatus::setClassName);
		attributeGetterFunctions.put("classPk", MDMSyncStatus::getClassPk);
		attributeSetterBiConsumers.put(
			"classPk",
			(BiConsumer<MDMSyncStatus, Long>)MDMSyncStatus::setClassPk);
		attributeGetterFunctions.put(
			"requestPayload", MDMSyncStatus::getRequestPayload);
		attributeSetterBiConsumers.put(
			"requestPayload",
			(BiConsumer<MDMSyncStatus, String>)
				MDMSyncStatus::setRequestPayload);
		attributeGetterFunctions.put(
			"mdmEndPoint", MDMSyncStatus::getMdmEndPoint);
		attributeSetterBiConsumers.put(
			"mdmEndPoint",
			(BiConsumer<MDMSyncStatus, String>)MDMSyncStatus::setMdmEndPoint);
		attributeGetterFunctions.put("userId", MDMSyncStatus::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<MDMSyncStatus, Long>)MDMSyncStatus::setUserId);
		attributeGetterFunctions.put(
			"createDate", MDMSyncStatus::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MDMSyncStatus, Date>)MDMSyncStatus::setCreateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getMdmSyncStatusId() {
		return _mdmSyncStatusId;
	}

	@Override
	public void setMdmSyncStatusId(long mdmSyncStatusId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mdmSyncStatusId = mdmSyncStatusId;
	}

	@JSON
	@Override
	public String getUserType() {
		if (_userType == null) {
			return "";
		}
		else {
			return _userType;
		}
	}

	@Override
	public void setUserType(String userType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userType = userType;
	}

	@JSON
	@Override
	public String getClassName() {
		if (_className == null) {
			return "";
		}
		else {
			return _className;
		}
	}

	@Override
	public void setClassName(String className) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_className = className;
	}

	@JSON
	@Override
	public long getClassPk() {
		return _classPk;
	}

	@Override
	public void setClassPk(long classPk) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_classPk = classPk;
	}

	@JSON
	@Override
	public String getRequestPayload() {
		if (_requestPayload == null) {
			return "";
		}
		else {
			return _requestPayload;
		}
	}

	@Override
	public void setRequestPayload(String requestPayload) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestPayload = requestPayload;
	}

	@JSON
	@Override
	public String getMdmEndPoint() {
		if (_mdmEndPoint == null) {
			return "";
		}
		else {
			return _mdmEndPoint;
		}
	}

	@Override
	public void setMdmEndPoint(String mdmEndPoint) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mdmEndPoint = mdmEndPoint;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, MDMSyncStatus.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MDMSyncStatus toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MDMSyncStatus>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MDMSyncStatusImpl mdmSyncStatusImpl = new MDMSyncStatusImpl();

		mdmSyncStatusImpl.setMdmSyncStatusId(getMdmSyncStatusId());
		mdmSyncStatusImpl.setUserType(getUserType());
		mdmSyncStatusImpl.setClassName(getClassName());
		mdmSyncStatusImpl.setClassPk(getClassPk());
		mdmSyncStatusImpl.setRequestPayload(getRequestPayload());
		mdmSyncStatusImpl.setMdmEndPoint(getMdmEndPoint());
		mdmSyncStatusImpl.setUserId(getUserId());
		mdmSyncStatusImpl.setCreateDate(getCreateDate());

		mdmSyncStatusImpl.resetOriginalValues();

		return mdmSyncStatusImpl;
	}

	@Override
	public MDMSyncStatus cloneWithOriginalValues() {
		MDMSyncStatusImpl mdmSyncStatusImpl = new MDMSyncStatusImpl();

		mdmSyncStatusImpl.setMdmSyncStatusId(
			this.<Long>getColumnOriginalValue("mdmSyncStatusId"));
		mdmSyncStatusImpl.setUserType(
			this.<String>getColumnOriginalValue("userType"));
		mdmSyncStatusImpl.setClassName(
			this.<String>getColumnOriginalValue("className"));
		mdmSyncStatusImpl.setClassPk(
			this.<Long>getColumnOriginalValue("classPk"));
		mdmSyncStatusImpl.setRequestPayload(
			this.<String>getColumnOriginalValue("requestPayload"));
		mdmSyncStatusImpl.setMdmEndPoint(
			this.<String>getColumnOriginalValue("mdmEndPoint"));
		mdmSyncStatusImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		mdmSyncStatusImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return mdmSyncStatusImpl;
	}

	@Override
	public int compareTo(MDMSyncStatus mdmSyncStatus) {
		long primaryKey = mdmSyncStatus.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MDMSyncStatus)) {
			return false;
		}

		MDMSyncStatus mdmSyncStatus = (MDMSyncStatus)object;

		long primaryKey = mdmSyncStatus.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MDMSyncStatus> toCacheModel() {
		MDMSyncStatusCacheModel mdmSyncStatusCacheModel =
			new MDMSyncStatusCacheModel();

		mdmSyncStatusCacheModel.mdmSyncStatusId = getMdmSyncStatusId();

		mdmSyncStatusCacheModel.userType = getUserType();

		String userType = mdmSyncStatusCacheModel.userType;

		if ((userType != null) && (userType.length() == 0)) {
			mdmSyncStatusCacheModel.userType = null;
		}

		mdmSyncStatusCacheModel.className = getClassName();

		String className = mdmSyncStatusCacheModel.className;

		if ((className != null) && (className.length() == 0)) {
			mdmSyncStatusCacheModel.className = null;
		}

		mdmSyncStatusCacheModel.classPk = getClassPk();

		mdmSyncStatusCacheModel.requestPayload = getRequestPayload();

		String requestPayload = mdmSyncStatusCacheModel.requestPayload;

		if ((requestPayload != null) && (requestPayload.length() == 0)) {
			mdmSyncStatusCacheModel.requestPayload = null;
		}

		mdmSyncStatusCacheModel.mdmEndPoint = getMdmEndPoint();

		String mdmEndPoint = mdmSyncStatusCacheModel.mdmEndPoint;

		if ((mdmEndPoint != null) && (mdmEndPoint.length() == 0)) {
			mdmSyncStatusCacheModel.mdmEndPoint = null;
		}

		mdmSyncStatusCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			mdmSyncStatusCacheModel.createDate = createDate.getTime();
		}
		else {
			mdmSyncStatusCacheModel.createDate = Long.MIN_VALUE;
		}

		return mdmSyncStatusCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MDMSyncStatus, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MDMSyncStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MDMSyncStatus, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((MDMSyncStatus)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MDMSyncStatus, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MDMSyncStatus, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MDMSyncStatus, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MDMSyncStatus)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MDMSyncStatus>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MDMSyncStatus.class, ModelWrapper.class);

	}

	private long _mdmSyncStatusId;
	private String _userType;
	private String _className;
	private long _classPk;
	private String _requestPayload;
	private String _mdmEndPoint;
	private long _userId;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		Function<MDMSyncStatus, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MDMSyncStatus)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("mdmSyncStatusId", _mdmSyncStatusId);
		_columnOriginalValues.put("userType", _userType);
		_columnOriginalValues.put("className", _className);
		_columnOriginalValues.put("classPk", _classPk);
		_columnOriginalValues.put("requestPayload", _requestPayload);
		_columnOriginalValues.put("mdmEndPoint", _mdmEndPoint);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("mdmSyncStatusId", 1L);

		columnBitmasks.put("userType", 2L);

		columnBitmasks.put("className", 4L);

		columnBitmasks.put("classPk", 8L);

		columnBitmasks.put("requestPayload", 16L);

		columnBitmasks.put("mdmEndPoint", 32L);

		columnBitmasks.put("userId", 64L);

		columnBitmasks.put("createDate", 128L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MDMSyncStatus _escapedModel;

}