/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.common.services.model.impl;

import bd.gov.dgfood.common.services.model.UserDetails;
import bd.gov.dgfood.common.services.model.UserDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserDetails service. Represents a row in the &quot;DGF_UserDetails&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class UserDetailsModelImpl
	extends BaseModelImpl<UserDetails> implements UserDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user details model instance should use the <code>UserDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGF_UserDetails";

	public static final Object[][] TABLE_COLUMNS = {
		{"userDetailsId", Types.BIGINT}, {"nationalId", Types.VARCHAR},
		{"applicantName", Types.VARCHAR}, {"fatherName", Types.VARCHAR},
		{"motherName", Types.VARCHAR}, {"gender", Types.VARCHAR},
		{"nidPhotoAttachmentId", Types.BIGINT}, {"nidDivision", Types.VARCHAR},
		{"nidDistrict", Types.VARCHAR}, {"nidUpzilla", Types.VARCHAR},
		{"nidUnion", Types.VARCHAR}, {"nidVillage", Types.VARCHAR},
		{"nidWard", Types.VARCHAR}, {"nidZipCode", Types.BIGINT},
		{"houseAddress", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("userDetailsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("motherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nidPhotoAttachmentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nidDivision", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nidDistrict", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nidUpzilla", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nidUnion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nidVillage", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nidWard", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nidZipCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("houseAddress", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGF_UserDetails (userDetailsId LONG not null primary key,nationalId VARCHAR(75) null,applicantName VARCHAR(75) null,fatherName VARCHAR(75) null,motherName VARCHAR(75) null,gender VARCHAR(75) null,nidPhotoAttachmentId LONG,nidDivision VARCHAR(75) null,nidDistrict VARCHAR(75) null,nidUpzilla VARCHAR(75) null,nidUnion VARCHAR(75) null,nidVillage VARCHAR(75) null,nidWard VARCHAR(75) null,nidZipCode LONG,houseAddress VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table DGF_UserDetails";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userDetails.userDetailsId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGF_UserDetails.userDetailsId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERDETAILSID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public UserDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _userDetailsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setUserDetailsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _userDetailsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserDetails.class;
	}

	@Override
	public String getModelClassName() {
		return UserDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<UserDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserDetails, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UserDetails, Object>>();
		Map<String, BiConsumer<UserDetails, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserDetails, ?>>();

		attributeGetterFunctions.put(
			"userDetailsId", UserDetails::getUserDetailsId);
		attributeSetterBiConsumers.put(
			"userDetailsId",
			(BiConsumer<UserDetails, Long>)UserDetails::setUserDetailsId);
		attributeGetterFunctions.put("nationalId", UserDetails::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<UserDetails, String>)UserDetails::setNationalId);
		attributeGetterFunctions.put(
			"applicantName", UserDetails::getApplicantName);
		attributeSetterBiConsumers.put(
			"applicantName",
			(BiConsumer<UserDetails, String>)UserDetails::setApplicantName);
		attributeGetterFunctions.put("fatherName", UserDetails::getFatherName);
		attributeSetterBiConsumers.put(
			"fatherName",
			(BiConsumer<UserDetails, String>)UserDetails::setFatherName);
		attributeGetterFunctions.put("motherName", UserDetails::getMotherName);
		attributeSetterBiConsumers.put(
			"motherName",
			(BiConsumer<UserDetails, String>)UserDetails::setMotherName);
		attributeGetterFunctions.put("gender", UserDetails::getGender);
		attributeSetterBiConsumers.put(
			"gender", (BiConsumer<UserDetails, String>)UserDetails::setGender);
		attributeGetterFunctions.put(
			"nidPhotoAttachmentId", UserDetails::getNidPhotoAttachmentId);
		attributeSetterBiConsumers.put(
			"nidPhotoAttachmentId",
			(BiConsumer<UserDetails, Long>)
				UserDetails::setNidPhotoAttachmentId);
		attributeGetterFunctions.put(
			"nidDivision", UserDetails::getNidDivision);
		attributeSetterBiConsumers.put(
			"nidDivision",
			(BiConsumer<UserDetails, String>)UserDetails::setNidDivision);
		attributeGetterFunctions.put(
			"nidDistrict", UserDetails::getNidDistrict);
		attributeSetterBiConsumers.put(
			"nidDistrict",
			(BiConsumer<UserDetails, String>)UserDetails::setNidDistrict);
		attributeGetterFunctions.put("nidUpzilla", UserDetails::getNidUpzilla);
		attributeSetterBiConsumers.put(
			"nidUpzilla",
			(BiConsumer<UserDetails, String>)UserDetails::setNidUpzilla);
		attributeGetterFunctions.put("nidUnion", UserDetails::getNidUnion);
		attributeSetterBiConsumers.put(
			"nidUnion",
			(BiConsumer<UserDetails, String>)UserDetails::setNidUnion);
		attributeGetterFunctions.put("nidVillage", UserDetails::getNidVillage);
		attributeSetterBiConsumers.put(
			"nidVillage",
			(BiConsumer<UserDetails, String>)UserDetails::setNidVillage);
		attributeGetterFunctions.put("nidWard", UserDetails::getNidWard);
		attributeSetterBiConsumers.put(
			"nidWard",
			(BiConsumer<UserDetails, String>)UserDetails::setNidWard);
		attributeGetterFunctions.put("nidZipCode", UserDetails::getNidZipCode);
		attributeSetterBiConsumers.put(
			"nidZipCode",
			(BiConsumer<UserDetails, Long>)UserDetails::setNidZipCode);
		attributeGetterFunctions.put(
			"houseAddress", UserDetails::getHouseAddress);
		attributeSetterBiConsumers.put(
			"houseAddress",
			(BiConsumer<UserDetails, String>)UserDetails::setHouseAddress);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getUserDetailsId() {
		return _userDetailsId;
	}

	@Override
	public void setUserDetailsId(long userDetailsId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userDetailsId = userDetailsId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("nationalId");
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getFatherName() {
		if (_fatherName == null) {
			return "";
		}
		else {
			return _fatherName;
		}
	}

	@Override
	public void setFatherName(String fatherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fatherName = fatherName;
	}

	@JSON
	@Override
	public String getMotherName() {
		if (_motherName == null) {
			return "";
		}
		else {
			return _motherName;
		}
	}

	@Override
	public void setMotherName(String motherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_motherName = motherName;
	}

	@JSON
	@Override
	public String getGender() {
		if (_gender == null) {
			return "";
		}
		else {
			return _gender;
		}
	}

	@Override
	public void setGender(String gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public long getNidPhotoAttachmentId() {
		return _nidPhotoAttachmentId;
	}

	@Override
	public void setNidPhotoAttachmentId(long nidPhotoAttachmentId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidPhotoAttachmentId = nidPhotoAttachmentId;
	}

	@JSON
	@Override
	public String getNidDivision() {
		if (_nidDivision == null) {
			return "";
		}
		else {
			return _nidDivision;
		}
	}

	@Override
	public void setNidDivision(String nidDivision) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidDivision = nidDivision;
	}

	@JSON
	@Override
	public String getNidDistrict() {
		if (_nidDistrict == null) {
			return "";
		}
		else {
			return _nidDistrict;
		}
	}

	@Override
	public void setNidDistrict(String nidDistrict) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidDistrict = nidDistrict;
	}

	@JSON
	@Override
	public String getNidUpzilla() {
		if (_nidUpzilla == null) {
			return "";
		}
		else {
			return _nidUpzilla;
		}
	}

	@Override
	public void setNidUpzilla(String nidUpzilla) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidUpzilla = nidUpzilla;
	}

	@JSON
	@Override
	public String getNidUnion() {
		if (_nidUnion == null) {
			return "";
		}
		else {
			return _nidUnion;
		}
	}

	@Override
	public void setNidUnion(String nidUnion) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidUnion = nidUnion;
	}

	@JSON
	@Override
	public String getNidVillage() {
		if (_nidVillage == null) {
			return "";
		}
		else {
			return _nidVillage;
		}
	}

	@Override
	public void setNidVillage(String nidVillage) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidVillage = nidVillage;
	}

	@JSON
	@Override
	public String getNidWard() {
		if (_nidWard == null) {
			return "";
		}
		else {
			return _nidWard;
		}
	}

	@Override
	public void setNidWard(String nidWard) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidWard = nidWard;
	}

	@JSON
	@Override
	public long getNidZipCode() {
		return _nidZipCode;
	}

	@Override
	public void setNidZipCode(long nidZipCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nidZipCode = nidZipCode;
	}

	@JSON
	@Override
	public String getHouseAddress() {
		if (_houseAddress == null) {
			return "";
		}
		else {
			return _houseAddress;
		}
	}

	@Override
	public void setHouseAddress(String houseAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_houseAddress = houseAddress;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, UserDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserDetailsImpl userDetailsImpl = new UserDetailsImpl();

		userDetailsImpl.setUserDetailsId(getUserDetailsId());
		userDetailsImpl.setNationalId(getNationalId());
		userDetailsImpl.setApplicantName(getApplicantName());
		userDetailsImpl.setFatherName(getFatherName());
		userDetailsImpl.setMotherName(getMotherName());
		userDetailsImpl.setGender(getGender());
		userDetailsImpl.setNidPhotoAttachmentId(getNidPhotoAttachmentId());
		userDetailsImpl.setNidDivision(getNidDivision());
		userDetailsImpl.setNidDistrict(getNidDistrict());
		userDetailsImpl.setNidUpzilla(getNidUpzilla());
		userDetailsImpl.setNidUnion(getNidUnion());
		userDetailsImpl.setNidVillage(getNidVillage());
		userDetailsImpl.setNidWard(getNidWard());
		userDetailsImpl.setNidZipCode(getNidZipCode());
		userDetailsImpl.setHouseAddress(getHouseAddress());

		userDetailsImpl.resetOriginalValues();

		return userDetailsImpl;
	}

	@Override
	public UserDetails cloneWithOriginalValues() {
		UserDetailsImpl userDetailsImpl = new UserDetailsImpl();

		userDetailsImpl.setUserDetailsId(
			this.<Long>getColumnOriginalValue("userDetailsId"));
		userDetailsImpl.setNationalId(
			this.<String>getColumnOriginalValue("nationalId"));
		userDetailsImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		userDetailsImpl.setFatherName(
			this.<String>getColumnOriginalValue("fatherName"));
		userDetailsImpl.setMotherName(
			this.<String>getColumnOriginalValue("motherName"));
		userDetailsImpl.setGender(
			this.<String>getColumnOriginalValue("gender"));
		userDetailsImpl.setNidPhotoAttachmentId(
			this.<Long>getColumnOriginalValue("nidPhotoAttachmentId"));
		userDetailsImpl.setNidDivision(
			this.<String>getColumnOriginalValue("nidDivision"));
		userDetailsImpl.setNidDistrict(
			this.<String>getColumnOriginalValue("nidDistrict"));
		userDetailsImpl.setNidUpzilla(
			this.<String>getColumnOriginalValue("nidUpzilla"));
		userDetailsImpl.setNidUnion(
			this.<String>getColumnOriginalValue("nidUnion"));
		userDetailsImpl.setNidVillage(
			this.<String>getColumnOriginalValue("nidVillage"));
		userDetailsImpl.setNidWard(
			this.<String>getColumnOriginalValue("nidWard"));
		userDetailsImpl.setNidZipCode(
			this.<Long>getColumnOriginalValue("nidZipCode"));
		userDetailsImpl.setHouseAddress(
			this.<String>getColumnOriginalValue("houseAddress"));

		return userDetailsImpl;
	}

	@Override
	public int compareTo(UserDetails userDetails) {
		long primaryKey = userDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof UserDetails)) {
			return false;
		}

		UserDetails userDetails = (UserDetails)object;

		long primaryKey = userDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<UserDetails> toCacheModel() {
		UserDetailsCacheModel userDetailsCacheModel =
			new UserDetailsCacheModel();

		userDetailsCacheModel.userDetailsId = getUserDetailsId();

		userDetailsCacheModel.nationalId = getNationalId();

		String nationalId = userDetailsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			userDetailsCacheModel.nationalId = null;
		}

		userDetailsCacheModel.applicantName = getApplicantName();

		String applicantName = userDetailsCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			userDetailsCacheModel.applicantName = null;
		}

		userDetailsCacheModel.fatherName = getFatherName();

		String fatherName = userDetailsCacheModel.fatherName;

		if ((fatherName != null) && (fatherName.length() == 0)) {
			userDetailsCacheModel.fatherName = null;
		}

		userDetailsCacheModel.motherName = getMotherName();

		String motherName = userDetailsCacheModel.motherName;

		if ((motherName != null) && (motherName.length() == 0)) {
			userDetailsCacheModel.motherName = null;
		}

		userDetailsCacheModel.gender = getGender();

		String gender = userDetailsCacheModel.gender;

		if ((gender != null) && (gender.length() == 0)) {
			userDetailsCacheModel.gender = null;
		}

		userDetailsCacheModel.nidPhotoAttachmentId = getNidPhotoAttachmentId();

		userDetailsCacheModel.nidDivision = getNidDivision();

		String nidDivision = userDetailsCacheModel.nidDivision;

		if ((nidDivision != null) && (nidDivision.length() == 0)) {
			userDetailsCacheModel.nidDivision = null;
		}

		userDetailsCacheModel.nidDistrict = getNidDistrict();

		String nidDistrict = userDetailsCacheModel.nidDistrict;

		if ((nidDistrict != null) && (nidDistrict.length() == 0)) {
			userDetailsCacheModel.nidDistrict = null;
		}

		userDetailsCacheModel.nidUpzilla = getNidUpzilla();

		String nidUpzilla = userDetailsCacheModel.nidUpzilla;

		if ((nidUpzilla != null) && (nidUpzilla.length() == 0)) {
			userDetailsCacheModel.nidUpzilla = null;
		}

		userDetailsCacheModel.nidUnion = getNidUnion();

		String nidUnion = userDetailsCacheModel.nidUnion;

		if ((nidUnion != null) && (nidUnion.length() == 0)) {
			userDetailsCacheModel.nidUnion = null;
		}

		userDetailsCacheModel.nidVillage = getNidVillage();

		String nidVillage = userDetailsCacheModel.nidVillage;

		if ((nidVillage != null) && (nidVillage.length() == 0)) {
			userDetailsCacheModel.nidVillage = null;
		}

		userDetailsCacheModel.nidWard = getNidWard();

		String nidWard = userDetailsCacheModel.nidWard;

		if ((nidWard != null) && (nidWard.length() == 0)) {
			userDetailsCacheModel.nidWard = null;
		}

		userDetailsCacheModel.nidZipCode = getNidZipCode();

		userDetailsCacheModel.houseAddress = getHouseAddress();

		String houseAddress = userDetailsCacheModel.houseAddress;

		if ((houseAddress != null) && (houseAddress.length() == 0)) {
			userDetailsCacheModel.houseAddress = null;
		}

		return userDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((UserDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserDetails, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					UserDetails.class, ModelWrapper.class);

	}

	private long _userDetailsId;
	private String _nationalId;
	private String _applicantName;
	private String _fatherName;
	private String _motherName;
	private String _gender;
	private long _nidPhotoAttachmentId;
	private String _nidDivision;
	private String _nidDistrict;
	private String _nidUpzilla;
	private String _nidUnion;
	private String _nidVillage;
	private String _nidWard;
	private long _nidZipCode;
	private String _houseAddress;

	public <T> T getColumnValue(String columnName) {
		Function<UserDetails, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((UserDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("userDetailsId", _userDetailsId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("fatherName", _fatherName);
		_columnOriginalValues.put("motherName", _motherName);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put(
			"nidPhotoAttachmentId", _nidPhotoAttachmentId);
		_columnOriginalValues.put("nidDivision", _nidDivision);
		_columnOriginalValues.put("nidDistrict", _nidDistrict);
		_columnOriginalValues.put("nidUpzilla", _nidUpzilla);
		_columnOriginalValues.put("nidUnion", _nidUnion);
		_columnOriginalValues.put("nidVillage", _nidVillage);
		_columnOriginalValues.put("nidWard", _nidWard);
		_columnOriginalValues.put("nidZipCode", _nidZipCode);
		_columnOriginalValues.put("houseAddress", _houseAddress);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("userDetailsId", 1L);

		columnBitmasks.put("nationalId", 2L);

		columnBitmasks.put("applicantName", 4L);

		columnBitmasks.put("fatherName", 8L);

		columnBitmasks.put("motherName", 16L);

		columnBitmasks.put("gender", 32L);

		columnBitmasks.put("nidPhotoAttachmentId", 64L);

		columnBitmasks.put("nidDivision", 128L);

		columnBitmasks.put("nidDistrict", 256L);

		columnBitmasks.put("nidUpzilla", 512L);

		columnBitmasks.put("nidUnion", 1024L);

		columnBitmasks.put("nidVillage", 2048L);

		columnBitmasks.put("nidWard", 4096L);

		columnBitmasks.put("nidZipCode", 8192L);

		columnBitmasks.put("houseAddress", 16384L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private UserDetails _escapedModel;

}