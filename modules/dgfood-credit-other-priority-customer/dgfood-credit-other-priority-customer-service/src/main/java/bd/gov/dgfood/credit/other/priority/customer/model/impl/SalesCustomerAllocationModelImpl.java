/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.credit.other.priority.customer.model.impl;

import bd.gov.dgfood.credit.other.priority.customer.model.SalesCustomerAllocation;
import bd.gov.dgfood.credit.other.priority.customer.model.SalesCustomerAllocationModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SalesCustomerAllocation service. Represents a row in the &quot;DGFOOD_SalesCustomerAllocation&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SalesCustomerAllocationModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SalesCustomerAllocationImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SalesCustomerAllocationImpl
 * @generated
 */
@JSON(strict = true)
public class SalesCustomerAllocationModelImpl
	extends BaseModelImpl<SalesCustomerAllocation>
	implements SalesCustomerAllocationModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sales customer allocation model instance should use the <code>SalesCustomerAllocation</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGFOOD_SalesCustomerAllocation";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"salesCustomerAllocationId", Types.BIGINT},
		{"salesCustomerCode", Types.BIGINT},
		{"salesCustomerName", Types.VARCHAR},
		{"allocationNumber", Types.BIGINT},
		{"salesOrganization", Types.VARCHAR},
		{"distributionChannel", Types.VARCHAR}, {"year", Types.INTEGER},
		{"district", Types.VARCHAR}, {"subDistrict", Types.VARCHAR},
		{"govOrderNumber", Types.VARCHAR}, {"commodity", Types.VARCHAR},
		{"yearlyQty", Types.DOUBLE}, {"yearlyQtyUnit", Types.VARCHAR},
		{"monthlyQty", Types.DOUBLE}, {"monthlyQtyUnit", Types.VARCHAR},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salesCustomerAllocationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salesCustomerCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salesCustomerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("allocationNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("salesOrganization", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("distributionChannel", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("subDistrict", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("govOrderNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("commodity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("yearlyQty", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("yearlyQtyUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("monthlyQty", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("monthlyQtyUnit", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGFOOD_SalesCustomerAllocation (uuid_ VARCHAR(75) null,salesCustomerAllocationId LONG not null primary key,salesCustomerCode LONG,salesCustomerName VARCHAR(75) null,allocationNumber LONG,salesOrganization VARCHAR(75) null,distributionChannel VARCHAR(75) null,year INTEGER,district VARCHAR(75) null,subDistrict VARCHAR(75) null,govOrderNumber VARCHAR(75) null,commodity VARCHAR(75) null,yearlyQty DOUBLE,yearlyQtyUnit VARCHAR(75) null,monthlyQty DOUBLE,monthlyQtyUnit VARCHAR(75) null,companyId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table DGFOOD_SalesCustomerAllocation";

	public static final String ORDER_BY_JPQL =
		" ORDER BY salesCustomerAllocation.salesCustomerAllocationId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGFOOD_SalesCustomerAllocation.salesCustomerAllocationId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SALESCUSTOMERALLOCATIONID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SalesCustomerAllocationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _salesCustomerAllocationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSalesCustomerAllocationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _salesCustomerAllocationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SalesCustomerAllocation.class;
	}

	@Override
	public String getModelClassName() {
		return SalesCustomerAllocation.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SalesCustomerAllocation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SalesCustomerAllocation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SalesCustomerAllocation, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SalesCustomerAllocation)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SalesCustomerAllocation, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SalesCustomerAllocation, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SalesCustomerAllocation)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SalesCustomerAllocation, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SalesCustomerAllocation, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SalesCustomerAllocation, Object>>
		_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<SalesCustomerAllocation, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<SalesCustomerAllocation, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<SalesCustomerAllocation, Object>>();
		Map<String, BiConsumer<SalesCustomerAllocation, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<SalesCustomerAllocation, ?>>();

		attributeGetterFunctions.put("uuid", SalesCustomerAllocation::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setUuid);
		attributeGetterFunctions.put(
			"salesCustomerAllocationId",
			SalesCustomerAllocation::getSalesCustomerAllocationId);
		attributeSetterBiConsumers.put(
			"salesCustomerAllocationId",
			(BiConsumer<SalesCustomerAllocation, Long>)
				SalesCustomerAllocation::setSalesCustomerAllocationId);
		attributeGetterFunctions.put(
			"salesCustomerCode", SalesCustomerAllocation::getSalesCustomerCode);
		attributeSetterBiConsumers.put(
			"salesCustomerCode",
			(BiConsumer<SalesCustomerAllocation, Long>)
				SalesCustomerAllocation::setSalesCustomerCode);
		attributeGetterFunctions.put(
			"salesCustomerName", SalesCustomerAllocation::getSalesCustomerName);
		attributeSetterBiConsumers.put(
			"salesCustomerName",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setSalesCustomerName);
		attributeGetterFunctions.put(
			"allocationNumber", SalesCustomerAllocation::getAllocationNumber);
		attributeSetterBiConsumers.put(
			"allocationNumber",
			(BiConsumer<SalesCustomerAllocation, Long>)
				SalesCustomerAllocation::setAllocationNumber);
		attributeGetterFunctions.put(
			"salesOrganization", SalesCustomerAllocation::getSalesOrganization);
		attributeSetterBiConsumers.put(
			"salesOrganization",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setSalesOrganization);
		attributeGetterFunctions.put(
			"distributionChannel",
			SalesCustomerAllocation::getDistributionChannel);
		attributeSetterBiConsumers.put(
			"distributionChannel",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setDistributionChannel);
		attributeGetterFunctions.put("year", SalesCustomerAllocation::getYear);
		attributeSetterBiConsumers.put(
			"year",
			(BiConsumer<SalesCustomerAllocation, Integer>)
				SalesCustomerAllocation::setYear);
		attributeGetterFunctions.put(
			"district", SalesCustomerAllocation::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setDistrict);
		attributeGetterFunctions.put(
			"subDistrict", SalesCustomerAllocation::getSubDistrict);
		attributeSetterBiConsumers.put(
			"subDistrict",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setSubDistrict);
		attributeGetterFunctions.put(
			"govOrderNumber", SalesCustomerAllocation::getGovOrderNumber);
		attributeSetterBiConsumers.put(
			"govOrderNumber",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setGovOrderNumber);
		attributeGetterFunctions.put(
			"commodity", SalesCustomerAllocation::getCommodity);
		attributeSetterBiConsumers.put(
			"commodity",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setCommodity);
		attributeGetterFunctions.put(
			"yearlyQty", SalesCustomerAllocation::getYearlyQty);
		attributeSetterBiConsumers.put(
			"yearlyQty",
			(BiConsumer<SalesCustomerAllocation, Double>)
				SalesCustomerAllocation::setYearlyQty);
		attributeGetterFunctions.put(
			"yearlyQtyUnit", SalesCustomerAllocation::getYearlyQtyUnit);
		attributeSetterBiConsumers.put(
			"yearlyQtyUnit",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setYearlyQtyUnit);
		attributeGetterFunctions.put(
			"monthlyQty", SalesCustomerAllocation::getMonthlyQty);
		attributeSetterBiConsumers.put(
			"monthlyQty",
			(BiConsumer<SalesCustomerAllocation, Double>)
				SalesCustomerAllocation::setMonthlyQty);
		attributeGetterFunctions.put(
			"monthlyQtyUnit", SalesCustomerAllocation::getMonthlyQtyUnit);
		attributeSetterBiConsumers.put(
			"monthlyQtyUnit",
			(BiConsumer<SalesCustomerAllocation, String>)
				SalesCustomerAllocation::setMonthlyQtyUnit);
		attributeGetterFunctions.put(
			"companyId", SalesCustomerAllocation::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<SalesCustomerAllocation, Long>)
				SalesCustomerAllocation::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", SalesCustomerAllocation::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<SalesCustomerAllocation, Date>)
				SalesCustomerAllocation::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", SalesCustomerAllocation::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SalesCustomerAllocation, Date>)
				SalesCustomerAllocation::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSalesCustomerAllocationId() {
		return _salesCustomerAllocationId;
	}

	@Override
	public void setSalesCustomerAllocationId(long salesCustomerAllocationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesCustomerAllocationId = salesCustomerAllocationId;
	}

	@JSON
	@Override
	public long getSalesCustomerCode() {
		return _salesCustomerCode;
	}

	@Override
	public void setSalesCustomerCode(long salesCustomerCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesCustomerCode = salesCustomerCode;
	}

	@JSON
	@Override
	public String getSalesCustomerName() {
		if (_salesCustomerName == null) {
			return "";
		}
		else {
			return _salesCustomerName;
		}
	}

	@Override
	public void setSalesCustomerName(String salesCustomerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesCustomerName = salesCustomerName;
	}

	@JSON
	@Override
	public long getAllocationNumber() {
		return _allocationNumber;
	}

	@Override
	public void setAllocationNumber(long allocationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_allocationNumber = allocationNumber;
	}

	@JSON
	@Override
	public String getSalesOrganization() {
		if (_salesOrganization == null) {
			return "";
		}
		else {
			return _salesOrganization;
		}
	}

	@Override
	public void setSalesOrganization(String salesOrganization) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesOrganization = salesOrganization;
	}

	@JSON
	@Override
	public String getDistributionChannel() {
		if (_distributionChannel == null) {
			return "";
		}
		else {
			return _distributionChannel;
		}
	}

	@Override
	public void setDistributionChannel(String distributionChannel) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_distributionChannel = distributionChannel;
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_year = year;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public String getSubDistrict() {
		if (_subDistrict == null) {
			return "";
		}
		else {
			return _subDistrict;
		}
	}

	@Override
	public void setSubDistrict(String subDistrict) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subDistrict = subDistrict;
	}

	@JSON
	@Override
	public String getGovOrderNumber() {
		if (_govOrderNumber == null) {
			return "";
		}
		else {
			return _govOrderNumber;
		}
	}

	@Override
	public void setGovOrderNumber(String govOrderNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_govOrderNumber = govOrderNumber;
	}

	@JSON
	@Override
	public String getCommodity() {
		if (_commodity == null) {
			return "";
		}
		else {
			return _commodity;
		}
	}

	@Override
	public void setCommodity(String commodity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_commodity = commodity;
	}

	@JSON
	@Override
	public double getYearlyQty() {
		return _yearlyQty;
	}

	@Override
	public void setYearlyQty(double yearlyQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yearlyQty = yearlyQty;
	}

	@JSON
	@Override
	public String getYearlyQtyUnit() {
		if (_yearlyQtyUnit == null) {
			return "";
		}
		else {
			return _yearlyQtyUnit;
		}
	}

	@Override
	public void setYearlyQtyUnit(String yearlyQtyUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_yearlyQtyUnit = yearlyQtyUnit;
	}

	@JSON
	@Override
	public double getMonthlyQty() {
		return _monthlyQty;
	}

	@Override
	public void setMonthlyQty(double monthlyQty) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monthlyQty = monthlyQty;
	}

	@JSON
	@Override
	public String getMonthlyQtyUnit() {
		if (_monthlyQtyUnit == null) {
			return "";
		}
		else {
			return _monthlyQtyUnit;
		}
	}

	@Override
	public void setMonthlyQtyUnit(String monthlyQtyUnit) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_monthlyQtyUnit = monthlyQtyUnit;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(SalesCustomerAllocation.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SalesCustomerAllocation.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SalesCustomerAllocation toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SalesCustomerAllocation>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SalesCustomerAllocationImpl salesCustomerAllocationImpl =
			new SalesCustomerAllocationImpl();

		salesCustomerAllocationImpl.setUuid(getUuid());
		salesCustomerAllocationImpl.setSalesCustomerAllocationId(
			getSalesCustomerAllocationId());
		salesCustomerAllocationImpl.setSalesCustomerCode(
			getSalesCustomerCode());
		salesCustomerAllocationImpl.setSalesCustomerName(
			getSalesCustomerName());
		salesCustomerAllocationImpl.setAllocationNumber(getAllocationNumber());
		salesCustomerAllocationImpl.setSalesOrganization(
			getSalesOrganization());
		salesCustomerAllocationImpl.setDistributionChannel(
			getDistributionChannel());
		salesCustomerAllocationImpl.setYear(getYear());
		salesCustomerAllocationImpl.setDistrict(getDistrict());
		salesCustomerAllocationImpl.setSubDistrict(getSubDistrict());
		salesCustomerAllocationImpl.setGovOrderNumber(getGovOrderNumber());
		salesCustomerAllocationImpl.setCommodity(getCommodity());
		salesCustomerAllocationImpl.setYearlyQty(getYearlyQty());
		salesCustomerAllocationImpl.setYearlyQtyUnit(getYearlyQtyUnit());
		salesCustomerAllocationImpl.setMonthlyQty(getMonthlyQty());
		salesCustomerAllocationImpl.setMonthlyQtyUnit(getMonthlyQtyUnit());
		salesCustomerAllocationImpl.setCompanyId(getCompanyId());
		salesCustomerAllocationImpl.setCreateDate(getCreateDate());
		salesCustomerAllocationImpl.setModifiedDate(getModifiedDate());

		salesCustomerAllocationImpl.resetOriginalValues();

		return salesCustomerAllocationImpl;
	}

	@Override
	public SalesCustomerAllocation cloneWithOriginalValues() {
		SalesCustomerAllocationImpl salesCustomerAllocationImpl =
			new SalesCustomerAllocationImpl();

		salesCustomerAllocationImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		salesCustomerAllocationImpl.setSalesCustomerAllocationId(
			this.<Long>getColumnOriginalValue("salesCustomerAllocationId"));
		salesCustomerAllocationImpl.setSalesCustomerCode(
			this.<Long>getColumnOriginalValue("salesCustomerCode"));
		salesCustomerAllocationImpl.setSalesCustomerName(
			this.<String>getColumnOriginalValue("salesCustomerName"));
		salesCustomerAllocationImpl.setAllocationNumber(
			this.<Long>getColumnOriginalValue("allocationNumber"));
		salesCustomerAllocationImpl.setSalesOrganization(
			this.<String>getColumnOriginalValue("salesOrganization"));
		salesCustomerAllocationImpl.setDistributionChannel(
			this.<String>getColumnOriginalValue("distributionChannel"));
		salesCustomerAllocationImpl.setYear(
			this.<Integer>getColumnOriginalValue("year"));
		salesCustomerAllocationImpl.setDistrict(
			this.<String>getColumnOriginalValue("district"));
		salesCustomerAllocationImpl.setSubDistrict(
			this.<String>getColumnOriginalValue("subDistrict"));
		salesCustomerAllocationImpl.setGovOrderNumber(
			this.<String>getColumnOriginalValue("govOrderNumber"));
		salesCustomerAllocationImpl.setCommodity(
			this.<String>getColumnOriginalValue("commodity"));
		salesCustomerAllocationImpl.setYearlyQty(
			this.<Double>getColumnOriginalValue("yearlyQty"));
		salesCustomerAllocationImpl.setYearlyQtyUnit(
			this.<String>getColumnOriginalValue("yearlyQtyUnit"));
		salesCustomerAllocationImpl.setMonthlyQty(
			this.<Double>getColumnOriginalValue("monthlyQty"));
		salesCustomerAllocationImpl.setMonthlyQtyUnit(
			this.<String>getColumnOriginalValue("monthlyQtyUnit"));
		salesCustomerAllocationImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		salesCustomerAllocationImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		salesCustomerAllocationImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return salesCustomerAllocationImpl;
	}

	@Override
	public int compareTo(SalesCustomerAllocation salesCustomerAllocation) {
		long primaryKey = salesCustomerAllocation.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SalesCustomerAllocation)) {
			return false;
		}

		SalesCustomerAllocation salesCustomerAllocation =
			(SalesCustomerAllocation)object;

		long primaryKey = salesCustomerAllocation.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SalesCustomerAllocation> toCacheModel() {
		SalesCustomerAllocationCacheModel salesCustomerAllocationCacheModel =
			new SalesCustomerAllocationCacheModel();

		salesCustomerAllocationCacheModel.uuid = getUuid();

		String uuid = salesCustomerAllocationCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			salesCustomerAllocationCacheModel.uuid = null;
		}

		salesCustomerAllocationCacheModel.salesCustomerAllocationId =
			getSalesCustomerAllocationId();

		salesCustomerAllocationCacheModel.salesCustomerCode =
			getSalesCustomerCode();

		salesCustomerAllocationCacheModel.salesCustomerName =
			getSalesCustomerName();

		String salesCustomerName =
			salesCustomerAllocationCacheModel.salesCustomerName;

		if ((salesCustomerName != null) && (salesCustomerName.length() == 0)) {
			salesCustomerAllocationCacheModel.salesCustomerName = null;
		}

		salesCustomerAllocationCacheModel.allocationNumber =
			getAllocationNumber();

		salesCustomerAllocationCacheModel.salesOrganization =
			getSalesOrganization();

		String salesOrganization =
			salesCustomerAllocationCacheModel.salesOrganization;

		if ((salesOrganization != null) && (salesOrganization.length() == 0)) {
			salesCustomerAllocationCacheModel.salesOrganization = null;
		}

		salesCustomerAllocationCacheModel.distributionChannel =
			getDistributionChannel();

		String distributionChannel =
			salesCustomerAllocationCacheModel.distributionChannel;

		if ((distributionChannel != null) &&
			(distributionChannel.length() == 0)) {

			salesCustomerAllocationCacheModel.distributionChannel = null;
		}

		salesCustomerAllocationCacheModel.year = getYear();

		salesCustomerAllocationCacheModel.district = getDistrict();

		String district = salesCustomerAllocationCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			salesCustomerAllocationCacheModel.district = null;
		}

		salesCustomerAllocationCacheModel.subDistrict = getSubDistrict();

		String subDistrict = salesCustomerAllocationCacheModel.subDistrict;

		if ((subDistrict != null) && (subDistrict.length() == 0)) {
			salesCustomerAllocationCacheModel.subDistrict = null;
		}

		salesCustomerAllocationCacheModel.govOrderNumber = getGovOrderNumber();

		String govOrderNumber =
			salesCustomerAllocationCacheModel.govOrderNumber;

		if ((govOrderNumber != null) && (govOrderNumber.length() == 0)) {
			salesCustomerAllocationCacheModel.govOrderNumber = null;
		}

		salesCustomerAllocationCacheModel.commodity = getCommodity();

		String commodity = salesCustomerAllocationCacheModel.commodity;

		if ((commodity != null) && (commodity.length() == 0)) {
			salesCustomerAllocationCacheModel.commodity = null;
		}

		salesCustomerAllocationCacheModel.yearlyQty = getYearlyQty();

		salesCustomerAllocationCacheModel.yearlyQtyUnit = getYearlyQtyUnit();

		String yearlyQtyUnit = salesCustomerAllocationCacheModel.yearlyQtyUnit;

		if ((yearlyQtyUnit != null) && (yearlyQtyUnit.length() == 0)) {
			salesCustomerAllocationCacheModel.yearlyQtyUnit = null;
		}

		salesCustomerAllocationCacheModel.monthlyQty = getMonthlyQty();

		salesCustomerAllocationCacheModel.monthlyQtyUnit = getMonthlyQtyUnit();

		String monthlyQtyUnit =
			salesCustomerAllocationCacheModel.monthlyQtyUnit;

		if ((monthlyQtyUnit != null) && (monthlyQtyUnit.length() == 0)) {
			salesCustomerAllocationCacheModel.monthlyQtyUnit = null;
		}

		salesCustomerAllocationCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			salesCustomerAllocationCacheModel.createDate = createDate.getTime();
		}
		else {
			salesCustomerAllocationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			salesCustomerAllocationCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			salesCustomerAllocationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return salesCustomerAllocationCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SalesCustomerAllocation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SalesCustomerAllocation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SalesCustomerAllocation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(SalesCustomerAllocation)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SalesCustomerAllocation, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SalesCustomerAllocation, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SalesCustomerAllocation, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((SalesCustomerAllocation)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, SalesCustomerAllocation>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						SalesCustomerAllocation.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _salesCustomerAllocationId;
	private long _salesCustomerCode;
	private String _salesCustomerName;
	private long _allocationNumber;
	private String _salesOrganization;
	private String _distributionChannel;
	private int _year;
	private String _district;
	private String _subDistrict;
	private String _govOrderNumber;
	private String _commodity;
	private double _yearlyQty;
	private String _yearlyQtyUnit;
	private double _monthlyQty;
	private String _monthlyQtyUnit;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<SalesCustomerAllocation, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SalesCustomerAllocation)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"salesCustomerAllocationId", _salesCustomerAllocationId);
		_columnOriginalValues.put("salesCustomerCode", _salesCustomerCode);
		_columnOriginalValues.put("salesCustomerName", _salesCustomerName);
		_columnOriginalValues.put("allocationNumber", _allocationNumber);
		_columnOriginalValues.put("salesOrganization", _salesOrganization);
		_columnOriginalValues.put("distributionChannel", _distributionChannel);
		_columnOriginalValues.put("year", _year);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("subDistrict", _subDistrict);
		_columnOriginalValues.put("govOrderNumber", _govOrderNumber);
		_columnOriginalValues.put("commodity", _commodity);
		_columnOriginalValues.put("yearlyQty", _yearlyQty);
		_columnOriginalValues.put("yearlyQtyUnit", _yearlyQtyUnit);
		_columnOriginalValues.put("monthlyQty", _monthlyQty);
		_columnOriginalValues.put("monthlyQtyUnit", _monthlyQtyUnit);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("salesCustomerAllocationId", 2L);

		columnBitmasks.put("salesCustomerCode", 4L);

		columnBitmasks.put("salesCustomerName", 8L);

		columnBitmasks.put("allocationNumber", 16L);

		columnBitmasks.put("salesOrganization", 32L);

		columnBitmasks.put("distributionChannel", 64L);

		columnBitmasks.put("year", 128L);

		columnBitmasks.put("district", 256L);

		columnBitmasks.put("subDistrict", 512L);

		columnBitmasks.put("govOrderNumber", 1024L);

		columnBitmasks.put("commodity", 2048L);

		columnBitmasks.put("yearlyQty", 4096L);

		columnBitmasks.put("yearlyQtyUnit", 8192L);

		columnBitmasks.put("monthlyQty", 16384L);

		columnBitmasks.put("monthlyQtyUnit", 32768L);

		columnBitmasks.put("companyId", 65536L);

		columnBitmasks.put("createDate", 131072L);

		columnBitmasks.put("modifiedDate", 262144L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SalesCustomerAllocation _escapedModel;

}