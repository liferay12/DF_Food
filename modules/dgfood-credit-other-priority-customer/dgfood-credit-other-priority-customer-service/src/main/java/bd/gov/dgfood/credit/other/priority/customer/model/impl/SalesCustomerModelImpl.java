/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.credit.other.priority.customer.model.impl;

import bd.gov.dgfood.credit.other.priority.customer.model.SalesCustomer;
import bd.gov.dgfood.credit.other.priority.customer.model.SalesCustomerModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SalesCustomer service. Represents a row in the &quot;DGFOOD_SalesCustomer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SalesCustomerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SalesCustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SalesCustomerImpl
 * @generated
 */
@JSON(strict = true)
public class SalesCustomerModelImpl
	extends BaseModelImpl<SalesCustomer> implements SalesCustomerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sales customer model instance should use the <code>SalesCustomer</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGFOOD_SalesCustomer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"salesCustomerId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createdBy", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedBy", Types.BIGINT}, {"modifiedDate", Types.TIMESTAMP},
		{"userId", Types.BIGINT}, {"userType", Types.VARCHAR},
		{"mobileNumber", Types.VARCHAR}, {"emailAddress", Types.VARCHAR},
		{"title", Types.VARCHAR}, {"contactPersonName", Types.VARCHAR},
		{"contactPersonDesignation", Types.VARCHAR},
		{"officeName", Types.VARCHAR}, {"organizationName", Types.VARCHAR},
		{"organizationType", Types.VARCHAR}, {"gender", Types.INTEGER},
		{"salesCustomerCode", Types.BIGINT}, {"version", Types.DOUBLE},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salesCustomerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("title", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("contactPersonDesignation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("officeName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("salesCustomerCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGFOOD_SalesCustomer (uuid_ VARCHAR(75) null,salesCustomerId LONG not null primary key,groupId LONG,companyId LONG,createdBy LONG,createDate DATE null,modifiedBy LONG,modifiedDate DATE null,userId LONG,userType VARCHAR(75) null,mobileNumber VARCHAR(75) null,emailAddress VARCHAR(75) null,title VARCHAR(75) null,contactPersonName VARCHAR(75) null,contactPersonDesignation VARCHAR(75) null,officeName VARCHAR(75) null,organizationName VARCHAR(75) null,organizationType VARCHAR(75) null,gender INTEGER,salesCustomerCode LONG,version DOUBLE,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table DGFOOD_SalesCustomer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY salesCustomer.modifiedDate DESC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGFOOD_SalesCustomer.modifiedDate DESC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long USERID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SalesCustomerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _salesCustomerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSalesCustomerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _salesCustomerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SalesCustomer.class;
	}

	@Override
	public String getModelClassName() {
		return SalesCustomer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SalesCustomer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SalesCustomer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SalesCustomer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((SalesCustomer)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SalesCustomer, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SalesCustomer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SalesCustomer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SalesCustomer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SalesCustomer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SalesCustomer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SalesCustomer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SalesCustomer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SalesCustomer, Object>>();
		Map<String, BiConsumer<SalesCustomer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SalesCustomer, ?>>();

		attributeGetterFunctions.put("uuid", SalesCustomer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<SalesCustomer, String>)SalesCustomer::setUuid);
		attributeGetterFunctions.put(
			"salesCustomerId", SalesCustomer::getSalesCustomerId);
		attributeSetterBiConsumers.put(
			"salesCustomerId",
			(BiConsumer<SalesCustomer, Long>)SalesCustomer::setSalesCustomerId);
		attributeGetterFunctions.put("groupId", SalesCustomer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<SalesCustomer, Long>)SalesCustomer::setGroupId);
		attributeGetterFunctions.put("companyId", SalesCustomer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<SalesCustomer, Long>)SalesCustomer::setCompanyId);
		attributeGetterFunctions.put("createdBy", SalesCustomer::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<SalesCustomer, Long>)SalesCustomer::setCreatedBy);
		attributeGetterFunctions.put(
			"createDate", SalesCustomer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<SalesCustomer, Date>)SalesCustomer::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedBy", SalesCustomer::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<SalesCustomer, Long>)SalesCustomer::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedDate", SalesCustomer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SalesCustomer, Date>)SalesCustomer::setModifiedDate);
		attributeGetterFunctions.put("userId", SalesCustomer::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<SalesCustomer, Long>)SalesCustomer::setUserId);
		attributeGetterFunctions.put("userType", SalesCustomer::getUserType);
		attributeSetterBiConsumers.put(
			"userType",
			(BiConsumer<SalesCustomer, String>)SalesCustomer::setUserType);
		attributeGetterFunctions.put(
			"mobileNumber", SalesCustomer::getMobileNumber);
		attributeSetterBiConsumers.put(
			"mobileNumber",
			(BiConsumer<SalesCustomer, String>)SalesCustomer::setMobileNumber);
		attributeGetterFunctions.put(
			"emailAddress", SalesCustomer::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<SalesCustomer, String>)SalesCustomer::setEmailAddress);
		attributeGetterFunctions.put("title", SalesCustomer::getTitle);
		attributeSetterBiConsumers.put(
			"title",
			(BiConsumer<SalesCustomer, String>)SalesCustomer::setTitle);
		attributeGetterFunctions.put(
			"contactPersonName", SalesCustomer::getContactPersonName);
		attributeSetterBiConsumers.put(
			"contactPersonName",
			(BiConsumer<SalesCustomer, String>)
				SalesCustomer::setContactPersonName);
		attributeGetterFunctions.put(
			"contactPersonDesignation",
			SalesCustomer::getContactPersonDesignation);
		attributeSetterBiConsumers.put(
			"contactPersonDesignation",
			(BiConsumer<SalesCustomer, String>)
				SalesCustomer::setContactPersonDesignation);
		attributeGetterFunctions.put(
			"officeName", SalesCustomer::getOfficeName);
		attributeSetterBiConsumers.put(
			"officeName",
			(BiConsumer<SalesCustomer, String>)SalesCustomer::setOfficeName);
		attributeGetterFunctions.put(
			"organizationName", SalesCustomer::getOrganizationName);
		attributeSetterBiConsumers.put(
			"organizationName",
			(BiConsumer<SalesCustomer, String>)
				SalesCustomer::setOrganizationName);
		attributeGetterFunctions.put(
			"organizationType", SalesCustomer::getOrganizationType);
		attributeSetterBiConsumers.put(
			"organizationType",
			(BiConsumer<SalesCustomer, String>)
				SalesCustomer::setOrganizationType);
		attributeGetterFunctions.put("gender", SalesCustomer::getGender);
		attributeSetterBiConsumers.put(
			"gender",
			(BiConsumer<SalesCustomer, Integer>)SalesCustomer::setGender);
		attributeGetterFunctions.put(
			"salesCustomerCode", SalesCustomer::getSalesCustomerCode);
		attributeSetterBiConsumers.put(
			"salesCustomerCode",
			(BiConsumer<SalesCustomer, Long>)
				SalesCustomer::setSalesCustomerCode);
		attributeGetterFunctions.put("version", SalesCustomer::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<SalesCustomer, Double>)SalesCustomer::setVersion);
		attributeGetterFunctions.put("status", SalesCustomer::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<SalesCustomer, Integer>)SalesCustomer::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", SalesCustomer::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<SalesCustomer, Long>)SalesCustomer::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", SalesCustomer::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<SalesCustomer, String>)
				SalesCustomer::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", SalesCustomer::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<SalesCustomer, Date>)SalesCustomer::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getSalesCustomerId() {
		return _salesCustomerId;
	}

	@Override
	public void setSalesCustomerId(long salesCustomerId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesCustomerId = salesCustomerId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalUserId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("userId"));
	}

	@JSON
	@Override
	public String getUserType() {
		if (_userType == null) {
			return "";
		}
		else {
			return _userType;
		}
	}

	@Override
	public void setUserType(String userType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userType = userType;
	}

	@JSON
	@Override
	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return "";
		}
		else {
			return _mobileNumber;
		}
	}

	@Override
	public void setMobileNumber(String mobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNumber = mobileNumber;
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getTitle() {
		if (_title == null) {
			return "";
		}
		else {
			return _title;
		}
	}

	@Override
	public void setTitle(String title) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_title = title;
	}

	@JSON
	@Override
	public String getContactPersonName() {
		if (_contactPersonName == null) {
			return "";
		}
		else {
			return _contactPersonName;
		}
	}

	@Override
	public void setContactPersonName(String contactPersonName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactPersonName = contactPersonName;
	}

	@JSON
	@Override
	public String getContactPersonDesignation() {
		if (_contactPersonDesignation == null) {
			return "";
		}
		else {
			return _contactPersonDesignation;
		}
	}

	@Override
	public void setContactPersonDesignation(String contactPersonDesignation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_contactPersonDesignation = contactPersonDesignation;
	}

	@JSON
	@Override
	public String getOfficeName() {
		if (_officeName == null) {
			return "";
		}
		else {
			return _officeName;
		}
	}

	@Override
	public void setOfficeName(String officeName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_officeName = officeName;
	}

	@JSON
	@Override
	public String getOrganizationName() {
		if (_organizationName == null) {
			return "";
		}
		else {
			return _organizationName;
		}
	}

	@Override
	public void setOrganizationName(String organizationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationName = organizationName;
	}

	@JSON
	@Override
	public String getOrganizationType() {
		if (_organizationType == null) {
			return "";
		}
		else {
			return _organizationType;
		}
	}

	@Override
	public void setOrganizationType(String organizationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationType = organizationType;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public long getSalesCustomerCode() {
		return _salesCustomerCode;
	}

	@Override
	public void setSalesCustomerCode(long salesCustomerCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_salesCustomerCode = salesCustomerCode;
	}

	@JSON
	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(SalesCustomer.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), SalesCustomer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SalesCustomer toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SalesCustomer>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SalesCustomerImpl salesCustomerImpl = new SalesCustomerImpl();

		salesCustomerImpl.setUuid(getUuid());
		salesCustomerImpl.setSalesCustomerId(getSalesCustomerId());
		salesCustomerImpl.setGroupId(getGroupId());
		salesCustomerImpl.setCompanyId(getCompanyId());
		salesCustomerImpl.setCreatedBy(getCreatedBy());
		salesCustomerImpl.setCreateDate(getCreateDate());
		salesCustomerImpl.setModifiedBy(getModifiedBy());
		salesCustomerImpl.setModifiedDate(getModifiedDate());
		salesCustomerImpl.setUserId(getUserId());
		salesCustomerImpl.setUserType(getUserType());
		salesCustomerImpl.setMobileNumber(getMobileNumber());
		salesCustomerImpl.setEmailAddress(getEmailAddress());
		salesCustomerImpl.setTitle(getTitle());
		salesCustomerImpl.setContactPersonName(getContactPersonName());
		salesCustomerImpl.setContactPersonDesignation(
			getContactPersonDesignation());
		salesCustomerImpl.setOfficeName(getOfficeName());
		salesCustomerImpl.setOrganizationName(getOrganizationName());
		salesCustomerImpl.setOrganizationType(getOrganizationType());
		salesCustomerImpl.setGender(getGender());
		salesCustomerImpl.setSalesCustomerCode(getSalesCustomerCode());
		salesCustomerImpl.setVersion(getVersion());
		salesCustomerImpl.setStatus(getStatus());
		salesCustomerImpl.setStatusByUserId(getStatusByUserId());
		salesCustomerImpl.setStatusByUserName(getStatusByUserName());
		salesCustomerImpl.setStatusDate(getStatusDate());

		salesCustomerImpl.resetOriginalValues();

		return salesCustomerImpl;
	}

	@Override
	public SalesCustomer cloneWithOriginalValues() {
		SalesCustomerImpl salesCustomerImpl = new SalesCustomerImpl();

		salesCustomerImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		salesCustomerImpl.setSalesCustomerId(
			this.<Long>getColumnOriginalValue("salesCustomerId"));
		salesCustomerImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		salesCustomerImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		salesCustomerImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		salesCustomerImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		salesCustomerImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		salesCustomerImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		salesCustomerImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		salesCustomerImpl.setUserType(
			this.<String>getColumnOriginalValue("userType"));
		salesCustomerImpl.setMobileNumber(
			this.<String>getColumnOriginalValue("mobileNumber"));
		salesCustomerImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		salesCustomerImpl.setTitle(
			this.<String>getColumnOriginalValue("title"));
		salesCustomerImpl.setContactPersonName(
			this.<String>getColumnOriginalValue("contactPersonName"));
		salesCustomerImpl.setContactPersonDesignation(
			this.<String>getColumnOriginalValue("contactPersonDesignation"));
		salesCustomerImpl.setOfficeName(
			this.<String>getColumnOriginalValue("officeName"));
		salesCustomerImpl.setOrganizationName(
			this.<String>getColumnOriginalValue("organizationName"));
		salesCustomerImpl.setOrganizationType(
			this.<String>getColumnOriginalValue("organizationType"));
		salesCustomerImpl.setGender(
			this.<Integer>getColumnOriginalValue("gender"));
		salesCustomerImpl.setSalesCustomerCode(
			this.<Long>getColumnOriginalValue("salesCustomerCode"));
		salesCustomerImpl.setVersion(
			this.<Double>getColumnOriginalValue("version"));
		salesCustomerImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		salesCustomerImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		salesCustomerImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		salesCustomerImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return salesCustomerImpl;
	}

	@Override
	public int compareTo(SalesCustomer salesCustomer) {
		int value = 0;

		value = DateUtil.compareTo(
			getModifiedDate(), salesCustomer.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SalesCustomer)) {
			return false;
		}

		SalesCustomer salesCustomer = (SalesCustomer)object;

		long primaryKey = salesCustomer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SalesCustomer> toCacheModel() {
		SalesCustomerCacheModel salesCustomerCacheModel =
			new SalesCustomerCacheModel();

		salesCustomerCacheModel.uuid = getUuid();

		String uuid = salesCustomerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			salesCustomerCacheModel.uuid = null;
		}

		salesCustomerCacheModel.salesCustomerId = getSalesCustomerId();

		salesCustomerCacheModel.groupId = getGroupId();

		salesCustomerCacheModel.companyId = getCompanyId();

		salesCustomerCacheModel.createdBy = getCreatedBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			salesCustomerCacheModel.createDate = createDate.getTime();
		}
		else {
			salesCustomerCacheModel.createDate = Long.MIN_VALUE;
		}

		salesCustomerCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			salesCustomerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			salesCustomerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		salesCustomerCacheModel.userId = getUserId();

		salesCustomerCacheModel.userType = getUserType();

		String userType = salesCustomerCacheModel.userType;

		if ((userType != null) && (userType.length() == 0)) {
			salesCustomerCacheModel.userType = null;
		}

		salesCustomerCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = salesCustomerCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			salesCustomerCacheModel.mobileNumber = null;
		}

		salesCustomerCacheModel.emailAddress = getEmailAddress();

		String emailAddress = salesCustomerCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			salesCustomerCacheModel.emailAddress = null;
		}

		salesCustomerCacheModel.title = getTitle();

		String title = salesCustomerCacheModel.title;

		if ((title != null) && (title.length() == 0)) {
			salesCustomerCacheModel.title = null;
		}

		salesCustomerCacheModel.contactPersonName = getContactPersonName();

		String contactPersonName = salesCustomerCacheModel.contactPersonName;

		if ((contactPersonName != null) && (contactPersonName.length() == 0)) {
			salesCustomerCacheModel.contactPersonName = null;
		}

		salesCustomerCacheModel.contactPersonDesignation =
			getContactPersonDesignation();

		String contactPersonDesignation =
			salesCustomerCacheModel.contactPersonDesignation;

		if ((contactPersonDesignation != null) &&
			(contactPersonDesignation.length() == 0)) {

			salesCustomerCacheModel.contactPersonDesignation = null;
		}

		salesCustomerCacheModel.officeName = getOfficeName();

		String officeName = salesCustomerCacheModel.officeName;

		if ((officeName != null) && (officeName.length() == 0)) {
			salesCustomerCacheModel.officeName = null;
		}

		salesCustomerCacheModel.organizationName = getOrganizationName();

		String organizationName = salesCustomerCacheModel.organizationName;

		if ((organizationName != null) && (organizationName.length() == 0)) {
			salesCustomerCacheModel.organizationName = null;
		}

		salesCustomerCacheModel.organizationType = getOrganizationType();

		String organizationType = salesCustomerCacheModel.organizationType;

		if ((organizationType != null) && (organizationType.length() == 0)) {
			salesCustomerCacheModel.organizationType = null;
		}

		salesCustomerCacheModel.gender = getGender();

		salesCustomerCacheModel.salesCustomerCode = getSalesCustomerCode();

		salesCustomerCacheModel.version = getVersion();

		salesCustomerCacheModel.status = getStatus();

		salesCustomerCacheModel.statusByUserId = getStatusByUserId();

		salesCustomerCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = salesCustomerCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			salesCustomerCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			salesCustomerCacheModel.statusDate = statusDate.getTime();
		}
		else {
			salesCustomerCacheModel.statusDate = Long.MIN_VALUE;
		}

		return salesCustomerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SalesCustomer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SalesCustomer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SalesCustomer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((SalesCustomer)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SalesCustomer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SalesCustomer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SalesCustomer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SalesCustomer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SalesCustomer>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SalesCustomer.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _salesCustomerId;
	private long _groupId;
	private long _companyId;
	private long _createdBy;
	private Date _createDate;
	private long _modifiedBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _userId;
	private String _userType;
	private String _mobileNumber;
	private String _emailAddress;
	private String _title;
	private String _contactPersonName;
	private String _contactPersonDesignation;
	private String _officeName;
	private String _organizationName;
	private String _organizationType;
	private int _gender;
	private long _salesCustomerCode;
	private double _version;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<SalesCustomer, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SalesCustomer)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("salesCustomerId", _salesCustomerId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("userType", _userType);
		_columnOriginalValues.put("mobileNumber", _mobileNumber);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("title", _title);
		_columnOriginalValues.put("contactPersonName", _contactPersonName);
		_columnOriginalValues.put(
			"contactPersonDesignation", _contactPersonDesignation);
		_columnOriginalValues.put("officeName", _officeName);
		_columnOriginalValues.put("organizationName", _organizationName);
		_columnOriginalValues.put("organizationType", _organizationType);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("salesCustomerCode", _salesCustomerCode);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("salesCustomerId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("createdBy", 16L);

		columnBitmasks.put("createDate", 32L);

		columnBitmasks.put("modifiedBy", 64L);

		columnBitmasks.put("modifiedDate", 128L);

		columnBitmasks.put("userId", 256L);

		columnBitmasks.put("userType", 512L);

		columnBitmasks.put("mobileNumber", 1024L);

		columnBitmasks.put("emailAddress", 2048L);

		columnBitmasks.put("title", 4096L);

		columnBitmasks.put("contactPersonName", 8192L);

		columnBitmasks.put("contactPersonDesignation", 16384L);

		columnBitmasks.put("officeName", 32768L);

		columnBitmasks.put("organizationName", 65536L);

		columnBitmasks.put("organizationType", 131072L);

		columnBitmasks.put("gender", 262144L);

		columnBitmasks.put("salesCustomerCode", 524288L);

		columnBitmasks.put("version", 1048576L);

		columnBitmasks.put("status", 2097152L);

		columnBitmasks.put("statusByUserId", 4194304L);

		columnBitmasks.put("statusByUserName", 8388608L);

		columnBitmasks.put("statusDate", 16777216L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SalesCustomer _escapedModel;

}