/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.farmer.information.management.system.model.impl;

import bd.gov.dgfood.farmer.information.management.system.model.FarmerRegistrationVersion;
import bd.gov.dgfood.farmer.information.management.system.model.FarmerRegistrationVersionModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerRegistrationVersion service. Represents a row in the &quot;DGFood_FarmerRegistrationVer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerRegistrationVersionModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerRegistrationVersionImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerRegistrationVersionImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerRegistrationVersionModelImpl
	extends BaseModelImpl<FarmerRegistrationVersion>
	implements FarmerRegistrationVersionModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer registration version model instance should use the <code>FarmerRegistrationVersion</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGFood_FarmerRegistrationVer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"farmerRegistrationVersionId", Types.BIGINT},
		{"applicationNumber", Types.VARCHAR},
		{"farmerRegistrationId", Types.BIGINT}, {"nationalId", Types.VARCHAR},
		{"emailAddress", Types.VARCHAR}, {"mobileNumber", Types.VARCHAR},
		{"dateOfBirth", Types.TIMESTAMP}, {"farmerName", Types.VARCHAR},
		{"fatherName", Types.VARCHAR}, {"motherName", Types.VARCHAR},
		{"gender", Types.INTEGER}, {"maritalStatus", Types.INTEGER},
		{"krishokCardNumber", Types.VARCHAR},
		{"cultivableLandSeason1", Types.CLOB},
		{"cultivableLandSeason2", Types.CLOB},
		{"cultivableLandSeason3", Types.CLOB},
		{"farmerCategory ", Types.VARCHAR}, {"password ", Types.VARCHAR},
		{"remarks", Types.VARCHAR}, {"businessCode", Types.VARCHAR},
		{"version", Types.DOUBLE}, {"userId", Types.VARCHAR},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"createdBy", Types.BIGINT}, {"modifiedBy", Types.BIGINT},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusByUserName", Types.VARCHAR}, {"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerRegistrationVersionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerRegistrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("farmerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("motherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("krishokCardNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cultivableLandSeason1", Types.CLOB);
		TABLE_COLUMNS_MAP.put("cultivableLandSeason2", Types.CLOB);
		TABLE_COLUMNS_MAP.put("cultivableLandSeason3", Types.CLOB);
		TABLE_COLUMNS_MAP.put("farmerCategory ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("password ", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("userId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGFood_FarmerRegistrationVer (uuid_ VARCHAR(75) null,farmerRegistrationVersionId LONG not null primary key,applicationNumber VARCHAR(75) null,farmerRegistrationId LONG,nationalId VARCHAR(75) null,emailAddress VARCHAR(75) null,mobileNumber VARCHAR(75) null,dateOfBirth DATE null,farmerName VARCHAR(75) null,fatherName VARCHAR(75) null,motherName VARCHAR(75) null,gender INTEGER,maritalStatus INTEGER,krishokCardNumber VARCHAR(75) null,cultivableLandSeason1 TEXT null,cultivableLandSeason2 TEXT null,cultivableLandSeason3 TEXT null,farmerCategory  VARCHAR(75) null,password  VARCHAR(75) null,remarks VARCHAR(75) null,businessCode VARCHAR(75) null,version DOUBLE,userId VARCHAR(75) null,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,createdBy LONG,modifiedBy LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table DGFood_FarmerRegistrationVer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerRegistrationVersion.farmerRegistrationId ASC, farmerRegistrationVersion.version ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGFood_FarmerRegistrationVer.farmerRegistrationId ASC, DGFood_FarmerRegistrationVer.version ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUSINESSCODE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERREGISTRATIONID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VERSION_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerRegistrationVersionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerRegistrationVersionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerRegistrationVersionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerRegistrationVersionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerRegistrationVersion.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerRegistrationVersion.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerRegistrationVersion, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerRegistrationVersion, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerRegistrationVersion, Object>
				attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerRegistrationVersion)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerRegistrationVersion, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerRegistrationVersion, Object>
				attributeSetterBiConsumer = attributeSetterBiConsumers.get(
					attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerRegistrationVersion)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerRegistrationVersion, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerRegistrationVersion, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map
		<String, Function<FarmerRegistrationVersion, Object>>
			_attributeGetterFunctions;
	private static final Map
		<String, BiConsumer<FarmerRegistrationVersion, Object>>
			_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerRegistrationVersion, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmerRegistrationVersion, Object>>();
		Map<String, BiConsumer<FarmerRegistrationVersion, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap
					<String, BiConsumer<FarmerRegistrationVersion, ?>>();

		attributeGetterFunctions.put(
			"uuid", FarmerRegistrationVersion::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setUuid);
		attributeGetterFunctions.put(
			"farmerRegistrationVersionId",
			FarmerRegistrationVersion::getFarmerRegistrationVersionId);
		attributeSetterBiConsumers.put(
			"farmerRegistrationVersionId",
			(BiConsumer<FarmerRegistrationVersion, Long>)
				FarmerRegistrationVersion::setFarmerRegistrationVersionId);
		attributeGetterFunctions.put(
			"applicationNumber",
			FarmerRegistrationVersion::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setApplicationNumber);
		attributeGetterFunctions.put(
			"farmerRegistrationId",
			FarmerRegistrationVersion::getFarmerRegistrationId);
		attributeSetterBiConsumers.put(
			"farmerRegistrationId",
			(BiConsumer<FarmerRegistrationVersion, Long>)
				FarmerRegistrationVersion::setFarmerRegistrationId);
		attributeGetterFunctions.put(
			"nationalId", FarmerRegistrationVersion::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setNationalId);
		attributeGetterFunctions.put(
			"emailAddress", FarmerRegistrationVersion::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setEmailAddress);
		attributeGetterFunctions.put(
			"mobileNumber", FarmerRegistrationVersion::getMobileNumber);
		attributeSetterBiConsumers.put(
			"mobileNumber",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setMobileNumber);
		attributeGetterFunctions.put(
			"dateOfBirth", FarmerRegistrationVersion::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth",
			(BiConsumer<FarmerRegistrationVersion, Date>)
				FarmerRegistrationVersion::setDateOfBirth);
		attributeGetterFunctions.put(
			"farmerName", FarmerRegistrationVersion::getFarmerName);
		attributeSetterBiConsumers.put(
			"farmerName",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setFarmerName);
		attributeGetterFunctions.put(
			"fatherName", FarmerRegistrationVersion::getFatherName);
		attributeSetterBiConsumers.put(
			"fatherName",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setFatherName);
		attributeGetterFunctions.put(
			"motherName", FarmerRegistrationVersion::getMotherName);
		attributeSetterBiConsumers.put(
			"motherName",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setMotherName);
		attributeGetterFunctions.put(
			"gender", FarmerRegistrationVersion::getGender);
		attributeSetterBiConsumers.put(
			"gender",
			(BiConsumer<FarmerRegistrationVersion, Integer>)
				FarmerRegistrationVersion::setGender);
		attributeGetterFunctions.put(
			"maritalStatus", FarmerRegistrationVersion::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<FarmerRegistrationVersion, Integer>)
				FarmerRegistrationVersion::setMaritalStatus);
		attributeGetterFunctions.put(
			"krishokCardNumber",
			FarmerRegistrationVersion::getKrishokCardNumber);
		attributeSetterBiConsumers.put(
			"krishokCardNumber",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setKrishokCardNumber);
		attributeGetterFunctions.put(
			"cultivableLandSeason1",
			FarmerRegistrationVersion::getCultivableLandSeason1);
		attributeSetterBiConsumers.put(
			"cultivableLandSeason1",
			(BiConsumer<FarmerRegistrationVersion, Map<String, Serializable>>)
				FarmerRegistrationVersion::setCultivableLandSeason1);
		attributeGetterFunctions.put(
			"cultivableLandSeason2",
			FarmerRegistrationVersion::getCultivableLandSeason2);
		attributeSetterBiConsumers.put(
			"cultivableLandSeason2",
			(BiConsumer<FarmerRegistrationVersion, Map<String, Serializable>>)
				FarmerRegistrationVersion::setCultivableLandSeason2);
		attributeGetterFunctions.put(
			"cultivableLandSeason3",
			FarmerRegistrationVersion::getCultivableLandSeason3);
		attributeSetterBiConsumers.put(
			"cultivableLandSeason3",
			(BiConsumer<FarmerRegistrationVersion, Map<String, Serializable>>)
				FarmerRegistrationVersion::setCultivableLandSeason3);
		attributeGetterFunctions.put(
			"farmerCategory ", FarmerRegistrationVersion::getFarmerCategory);
		attributeSetterBiConsumers.put(
			"farmerCategory ",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setFarmerCategory);
		attributeGetterFunctions.put(
			"password ", FarmerRegistrationVersion::getPassword);
		attributeSetterBiConsumers.put(
			"password ",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setPassword);
		attributeGetterFunctions.put(
			"remarks", FarmerRegistrationVersion::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setRemarks);
		attributeGetterFunctions.put(
			"businessCode", FarmerRegistrationVersion::getBusinessCode);
		attributeSetterBiConsumers.put(
			"businessCode",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setBusinessCode);
		attributeGetterFunctions.put(
			"version", FarmerRegistrationVersion::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<FarmerRegistrationVersion, Double>)
				FarmerRegistrationVersion::setVersion);
		attributeGetterFunctions.put(
			"userId", FarmerRegistrationVersion::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setUserId);
		attributeGetterFunctions.put(
			"groupId", FarmerRegistrationVersion::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerRegistrationVersion, Long>)
				FarmerRegistrationVersion::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerRegistrationVersion::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerRegistrationVersion, Long>)
				FarmerRegistrationVersion::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", FarmerRegistrationVersion::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerRegistrationVersion, Date>)
				FarmerRegistrationVersion::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerRegistrationVersion::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerRegistrationVersion, Date>)
				FarmerRegistrationVersion::setModifiedDate);
		attributeGetterFunctions.put(
			"createdBy", FarmerRegistrationVersion::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<FarmerRegistrationVersion, Long>)
				FarmerRegistrationVersion::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", FarmerRegistrationVersion::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<FarmerRegistrationVersion, Long>)
				FarmerRegistrationVersion::setModifiedBy);
		attributeGetterFunctions.put(
			"status", FarmerRegistrationVersion::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FarmerRegistrationVersion, Integer>)
				FarmerRegistrationVersion::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FarmerRegistrationVersion::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FarmerRegistrationVersion, Long>)
				FarmerRegistrationVersion::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", FarmerRegistrationVersion::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<FarmerRegistrationVersion, String>)
				FarmerRegistrationVersion::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", FarmerRegistrationVersion::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FarmerRegistrationVersion, Date>)
				FarmerRegistrationVersion::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFarmerRegistrationVersionId() {
		return _farmerRegistrationVersionId;
	}

	@Override
	public void setFarmerRegistrationVersionId(
		long farmerRegistrationVersionId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerRegistrationVersionId = farmerRegistrationVersionId;
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public long getFarmerRegistrationId() {
		return _farmerRegistrationId;
	}

	@Override
	public void setFarmerRegistrationId(long farmerRegistrationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerRegistrationId = farmerRegistrationId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalFarmerRegistrationId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("farmerRegistrationId"));
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("nationalId");
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return "";
		}
		else {
			return _mobileNumber;
		}
	}

	@Override
	public void setMobileNumber(String mobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNumber = mobileNumber;
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	@JSON
	@Override
	public String getFarmerName() {
		if (_farmerName == null) {
			return "";
		}
		else {
			return _farmerName;
		}
	}

	@Override
	public void setFarmerName(String farmerName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerName = farmerName;
	}

	@JSON
	@Override
	public String getFatherName() {
		if (_fatherName == null) {
			return "";
		}
		else {
			return _fatherName;
		}
	}

	@Override
	public void setFatherName(String fatherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fatherName = fatherName;
	}

	@JSON
	@Override
	public String getMotherName() {
		if (_motherName == null) {
			return "";
		}
		else {
			return _motherName;
		}
	}

	@Override
	public void setMotherName(String motherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_motherName = motherName;
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public int getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(int maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getKrishokCardNumber() {
		if (_krishokCardNumber == null) {
			return "";
		}
		else {
			return _krishokCardNumber;
		}
	}

	@Override
	public void setKrishokCardNumber(String krishokCardNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_krishokCardNumber = krishokCardNumber;
	}

	@JSON
	@Override
	public Map<String, Serializable> getCultivableLandSeason1() {
		return _cultivableLandSeason1;
	}

	@Override
	public void setCultivableLandSeason1(
		Map<String, Serializable> cultivableLandSeason1) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cultivableLandSeason1 = cultivableLandSeason1;
	}

	@JSON
	@Override
	public Map<String, Serializable> getCultivableLandSeason2() {
		return _cultivableLandSeason2;
	}

	@Override
	public void setCultivableLandSeason2(
		Map<String, Serializable> cultivableLandSeason2) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cultivableLandSeason2 = cultivableLandSeason2;
	}

	@JSON
	@Override
	public Map<String, Serializable> getCultivableLandSeason3() {
		return _cultivableLandSeason3;
	}

	@Override
	public void setCultivableLandSeason3(
		Map<String, Serializable> cultivableLandSeason3) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cultivableLandSeason3 = cultivableLandSeason3;
	}

	@JSON
	@Override
	public String getFarmerCategory() {
		if (_farmerCategory == null) {
			return "";
		}
		else {
			return _farmerCategory;
		}
	}

	@Override
	public void setFarmerCategory(String farmerCategory) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerCategory = farmerCategory;
	}

	@JSON
	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public String getBusinessCode() {
		if (_businessCode == null) {
			return "";
		}
		else {
			return _businessCode;
		}
	}

	@Override
	public void setBusinessCode(String businessCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessCode = businessCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalBusinessCode() {
		return getColumnOriginalValue("businessCode");
	}

	@JSON
	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public double getOriginalVersion() {
		return GetterUtil.getDouble(
			this.<Double>getColumnOriginalValue("version"));
	}

	@JSON
	@Override
	public String getUserId() {
		if (_userId == null) {
			return "";
		}
		else {
			return _userId;
		}
	}

	@Override
	public void setUserId(String userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(
				FarmerRegistrationVersion.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerRegistrationVersion.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerRegistrationVersion toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerRegistrationVersion>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerRegistrationVersionImpl farmerRegistrationVersionImpl =
			new FarmerRegistrationVersionImpl();

		farmerRegistrationVersionImpl.setUuid(getUuid());
		farmerRegistrationVersionImpl.setFarmerRegistrationVersionId(
			getFarmerRegistrationVersionId());
		farmerRegistrationVersionImpl.setApplicationNumber(
			getApplicationNumber());
		farmerRegistrationVersionImpl.setFarmerRegistrationId(
			getFarmerRegistrationId());
		farmerRegistrationVersionImpl.setNationalId(getNationalId());
		farmerRegistrationVersionImpl.setEmailAddress(getEmailAddress());
		farmerRegistrationVersionImpl.setMobileNumber(getMobileNumber());
		farmerRegistrationVersionImpl.setDateOfBirth(getDateOfBirth());
		farmerRegistrationVersionImpl.setFarmerName(getFarmerName());
		farmerRegistrationVersionImpl.setFatherName(getFatherName());
		farmerRegistrationVersionImpl.setMotherName(getMotherName());
		farmerRegistrationVersionImpl.setGender(getGender());
		farmerRegistrationVersionImpl.setMaritalStatus(getMaritalStatus());
		farmerRegistrationVersionImpl.setKrishokCardNumber(
			getKrishokCardNumber());
		farmerRegistrationVersionImpl.setCultivableLandSeason1(
			getCultivableLandSeason1());
		farmerRegistrationVersionImpl.setCultivableLandSeason2(
			getCultivableLandSeason2());
		farmerRegistrationVersionImpl.setCultivableLandSeason3(
			getCultivableLandSeason3());
		farmerRegistrationVersionImpl.setFarmerCategory(getFarmerCategory());
		farmerRegistrationVersionImpl.setPassword(getPassword());
		farmerRegistrationVersionImpl.setRemarks(getRemarks());
		farmerRegistrationVersionImpl.setBusinessCode(getBusinessCode());
		farmerRegistrationVersionImpl.setVersion(getVersion());
		farmerRegistrationVersionImpl.setUserId(getUserId());
		farmerRegistrationVersionImpl.setGroupId(getGroupId());
		farmerRegistrationVersionImpl.setCompanyId(getCompanyId());
		farmerRegistrationVersionImpl.setCreateDate(getCreateDate());
		farmerRegistrationVersionImpl.setModifiedDate(getModifiedDate());
		farmerRegistrationVersionImpl.setCreatedBy(getCreatedBy());
		farmerRegistrationVersionImpl.setModifiedBy(getModifiedBy());
		farmerRegistrationVersionImpl.setStatus(getStatus());
		farmerRegistrationVersionImpl.setStatusByUserId(getStatusByUserId());
		farmerRegistrationVersionImpl.setStatusByUserName(
			getStatusByUserName());
		farmerRegistrationVersionImpl.setStatusDate(getStatusDate());

		farmerRegistrationVersionImpl.resetOriginalValues();

		return farmerRegistrationVersionImpl;
	}

	@Override
	public FarmerRegistrationVersion cloneWithOriginalValues() {
		FarmerRegistrationVersionImpl farmerRegistrationVersionImpl =
			new FarmerRegistrationVersionImpl();

		farmerRegistrationVersionImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		farmerRegistrationVersionImpl.setFarmerRegistrationVersionId(
			this.<Long>getColumnOriginalValue("farmerRegistrationVersionId"));
		farmerRegistrationVersionImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		farmerRegistrationVersionImpl.setFarmerRegistrationId(
			this.<Long>getColumnOriginalValue("farmerRegistrationId"));
		farmerRegistrationVersionImpl.setNationalId(
			this.<String>getColumnOriginalValue("nationalId"));
		farmerRegistrationVersionImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		farmerRegistrationVersionImpl.setMobileNumber(
			this.<String>getColumnOriginalValue("mobileNumber"));
		farmerRegistrationVersionImpl.setDateOfBirth(
			this.<Date>getColumnOriginalValue("dateOfBirth"));
		farmerRegistrationVersionImpl.setFarmerName(
			this.<String>getColumnOriginalValue("farmerName"));
		farmerRegistrationVersionImpl.setFatherName(
			this.<String>getColumnOriginalValue("fatherName"));
		farmerRegistrationVersionImpl.setMotherName(
			this.<String>getColumnOriginalValue("motherName"));
		farmerRegistrationVersionImpl.setGender(
			this.<Integer>getColumnOriginalValue("gender"));
		farmerRegistrationVersionImpl.setMaritalStatus(
			this.<Integer>getColumnOriginalValue("maritalStatus"));
		farmerRegistrationVersionImpl.setKrishokCardNumber(
			this.<String>getColumnOriginalValue("krishokCardNumber"));
		farmerRegistrationVersionImpl.setCultivableLandSeason1(
			this.<Map>getColumnOriginalValue("cultivableLandSeason1"));
		farmerRegistrationVersionImpl.setCultivableLandSeason2(
			this.<Map>getColumnOriginalValue("cultivableLandSeason2"));
		farmerRegistrationVersionImpl.setCultivableLandSeason3(
			this.<Map>getColumnOriginalValue("cultivableLandSeason3"));
		farmerRegistrationVersionImpl.setFarmerCategory(
			this.<String>getColumnOriginalValue("farmerCategory "));
		farmerRegistrationVersionImpl.setPassword(
			this.<String>getColumnOriginalValue("password "));
		farmerRegistrationVersionImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		farmerRegistrationVersionImpl.setBusinessCode(
			this.<String>getColumnOriginalValue("businessCode"));
		farmerRegistrationVersionImpl.setVersion(
			this.<Double>getColumnOriginalValue("version"));
		farmerRegistrationVersionImpl.setUserId(
			this.<String>getColumnOriginalValue("userId"));
		farmerRegistrationVersionImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerRegistrationVersionImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerRegistrationVersionImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerRegistrationVersionImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerRegistrationVersionImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		farmerRegistrationVersionImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		farmerRegistrationVersionImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		farmerRegistrationVersionImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		farmerRegistrationVersionImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		farmerRegistrationVersionImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return farmerRegistrationVersionImpl;
	}

	@Override
	public int compareTo(FarmerRegistrationVersion farmerRegistrationVersion) {
		int value = 0;

		if (getFarmerRegistrationId() <
				farmerRegistrationVersion.getFarmerRegistrationId()) {

			value = -1;
		}
		else if (getFarmerRegistrationId() >
					farmerRegistrationVersion.getFarmerRegistrationId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		if (getVersion() < farmerRegistrationVersion.getVersion()) {
			value = -1;
		}
		else if (getVersion() > farmerRegistrationVersion.getVersion()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerRegistrationVersion)) {
			return false;
		}

		FarmerRegistrationVersion farmerRegistrationVersion =
			(FarmerRegistrationVersion)object;

		long primaryKey = farmerRegistrationVersion.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerRegistrationVersion> toCacheModel() {
		FarmerRegistrationVersionCacheModel
			farmerRegistrationVersionCacheModel =
				new FarmerRegistrationVersionCacheModel();

		farmerRegistrationVersionCacheModel.uuid = getUuid();

		String uuid = farmerRegistrationVersionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			farmerRegistrationVersionCacheModel.uuid = null;
		}

		farmerRegistrationVersionCacheModel.farmerRegistrationVersionId =
			getFarmerRegistrationVersionId();

		farmerRegistrationVersionCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			farmerRegistrationVersionCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			farmerRegistrationVersionCacheModel.applicationNumber = null;
		}

		farmerRegistrationVersionCacheModel.farmerRegistrationId =
			getFarmerRegistrationId();

		farmerRegistrationVersionCacheModel.nationalId = getNationalId();

		String nationalId = farmerRegistrationVersionCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			farmerRegistrationVersionCacheModel.nationalId = null;
		}

		farmerRegistrationVersionCacheModel.emailAddress = getEmailAddress();

		String emailAddress = farmerRegistrationVersionCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			farmerRegistrationVersionCacheModel.emailAddress = null;
		}

		farmerRegistrationVersionCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = farmerRegistrationVersionCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			farmerRegistrationVersionCacheModel.mobileNumber = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			farmerRegistrationVersionCacheModel.dateOfBirth =
				dateOfBirth.getTime();
		}
		else {
			farmerRegistrationVersionCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		farmerRegistrationVersionCacheModel.farmerName = getFarmerName();

		String farmerName = farmerRegistrationVersionCacheModel.farmerName;

		if ((farmerName != null) && (farmerName.length() == 0)) {
			farmerRegistrationVersionCacheModel.farmerName = null;
		}

		farmerRegistrationVersionCacheModel.fatherName = getFatherName();

		String fatherName = farmerRegistrationVersionCacheModel.fatherName;

		if ((fatherName != null) && (fatherName.length() == 0)) {
			farmerRegistrationVersionCacheModel.fatherName = null;
		}

		farmerRegistrationVersionCacheModel.motherName = getMotherName();

		String motherName = farmerRegistrationVersionCacheModel.motherName;

		if ((motherName != null) && (motherName.length() == 0)) {
			farmerRegistrationVersionCacheModel.motherName = null;
		}

		farmerRegistrationVersionCacheModel.gender = getGender();

		farmerRegistrationVersionCacheModel.maritalStatus = getMaritalStatus();

		farmerRegistrationVersionCacheModel.krishokCardNumber =
			getKrishokCardNumber();

		String krishokCardNumber =
			farmerRegistrationVersionCacheModel.krishokCardNumber;

		if ((krishokCardNumber != null) && (krishokCardNumber.length() == 0)) {
			farmerRegistrationVersionCacheModel.krishokCardNumber = null;
		}

		farmerRegistrationVersionCacheModel.cultivableLandSeason1 =
			getCultivableLandSeason1();

		farmerRegistrationVersionCacheModel.cultivableLandSeason2 =
			getCultivableLandSeason2();

		farmerRegistrationVersionCacheModel.cultivableLandSeason3 =
			getCultivableLandSeason3();

		farmerRegistrationVersionCacheModel.farmerCategory =
			getFarmerCategory();

		String farmerCategory =
			farmerRegistrationVersionCacheModel.farmerCategory;

		if ((farmerCategory != null) && (farmerCategory.length() == 0)) {
			farmerRegistrationVersionCacheModel.farmerCategory = null;
		}

		farmerRegistrationVersionCacheModel.password = getPassword();

		String password = farmerRegistrationVersionCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			farmerRegistrationVersionCacheModel.password = null;
		}

		farmerRegistrationVersionCacheModel.remarks = getRemarks();

		String remarks = farmerRegistrationVersionCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			farmerRegistrationVersionCacheModel.remarks = null;
		}

		farmerRegistrationVersionCacheModel.businessCode = getBusinessCode();

		String businessCode = farmerRegistrationVersionCacheModel.businessCode;

		if ((businessCode != null) && (businessCode.length() == 0)) {
			farmerRegistrationVersionCacheModel.businessCode = null;
		}

		farmerRegistrationVersionCacheModel.version = getVersion();

		farmerRegistrationVersionCacheModel.userId = getUserId();

		String userId = farmerRegistrationVersionCacheModel.userId;

		if ((userId != null) && (userId.length() == 0)) {
			farmerRegistrationVersionCacheModel.userId = null;
		}

		farmerRegistrationVersionCacheModel.groupId = getGroupId();

		farmerRegistrationVersionCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerRegistrationVersionCacheModel.createDate =
				createDate.getTime();
		}
		else {
			farmerRegistrationVersionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerRegistrationVersionCacheModel.modifiedDate =
				modifiedDate.getTime();
		}
		else {
			farmerRegistrationVersionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerRegistrationVersionCacheModel.createdBy = getCreatedBy();

		farmerRegistrationVersionCacheModel.modifiedBy = getModifiedBy();

		farmerRegistrationVersionCacheModel.status = getStatus();

		farmerRegistrationVersionCacheModel.statusByUserId =
			getStatusByUserId();

		farmerRegistrationVersionCacheModel.statusByUserName =
			getStatusByUserName();

		String statusByUserName =
			farmerRegistrationVersionCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			farmerRegistrationVersionCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			farmerRegistrationVersionCacheModel.statusDate =
				statusDate.getTime();
		}
		else {
			farmerRegistrationVersionCacheModel.statusDate = Long.MIN_VALUE;
		}

		return farmerRegistrationVersionCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerRegistrationVersion, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerRegistrationVersion, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerRegistrationVersion, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmerRegistrationVersion)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FarmerRegistrationVersion, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FarmerRegistrationVersion, Object>>
				entry : attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerRegistrationVersion, Object>
				attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(
				attributeGetterFunction.apply((FarmerRegistrationVersion)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function
			<InvocationHandler, FarmerRegistrationVersion>
				_escapedModelProxyProviderFunction =
					ProxyUtil.getProxyProviderFunction(
						FarmerRegistrationVersion.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _farmerRegistrationVersionId;
	private String _applicationNumber;
	private long _farmerRegistrationId;
	private String _nationalId;
	private String _emailAddress;
	private String _mobileNumber;
	private Date _dateOfBirth;
	private String _farmerName;
	private String _fatherName;
	private String _motherName;
	private int _gender;
	private int _maritalStatus;
	private String _krishokCardNumber;
	private Map<String, Serializable> _cultivableLandSeason1;
	private Map<String, Serializable> _cultivableLandSeason2;
	private Map<String, Serializable> _cultivableLandSeason3;
	private String _farmerCategory;
	private String _password;
	private String _remarks;
	private String _businessCode;
	private double _version;
	private String _userId;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdBy;
	private long _modifiedBy;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FarmerRegistrationVersion, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerRegistrationVersion)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"farmerRegistrationVersionId", _farmerRegistrationVersionId);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"farmerRegistrationId", _farmerRegistrationId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("mobileNumber", _mobileNumber);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("farmerName", _farmerName);
		_columnOriginalValues.put("fatherName", _fatherName);
		_columnOriginalValues.put("motherName", _motherName);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("maritalStatus", _maritalStatus);
		_columnOriginalValues.put("krishokCardNumber", _krishokCardNumber);
		_columnOriginalValues.put(
			"cultivableLandSeason1", _cultivableLandSeason1);
		_columnOriginalValues.put(
			"cultivableLandSeason2", _cultivableLandSeason2);
		_columnOriginalValues.put(
			"cultivableLandSeason3", _cultivableLandSeason3);
		_columnOriginalValues.put("farmerCategory ", _farmerCategory);
		_columnOriginalValues.put("password ", _password);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("businessCode", _businessCode);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("farmerRegistrationVersionId", 2L);

		columnBitmasks.put("applicationNumber", 4L);

		columnBitmasks.put("farmerRegistrationId", 8L);

		columnBitmasks.put("nationalId", 16L);

		columnBitmasks.put("emailAddress", 32L);

		columnBitmasks.put("mobileNumber", 64L);

		columnBitmasks.put("dateOfBirth", 128L);

		columnBitmasks.put("farmerName", 256L);

		columnBitmasks.put("fatherName", 512L);

		columnBitmasks.put("motherName", 1024L);

		columnBitmasks.put("gender", 2048L);

		columnBitmasks.put("maritalStatus", 4096L);

		columnBitmasks.put("krishokCardNumber", 8192L);

		columnBitmasks.put("cultivableLandSeason1", 16384L);

		columnBitmasks.put("cultivableLandSeason2", 32768L);

		columnBitmasks.put("cultivableLandSeason3", 65536L);

		columnBitmasks.put("farmerCategory ", 131072L);

		columnBitmasks.put("password ", 262144L);

		columnBitmasks.put("remarks", 524288L);

		columnBitmasks.put("businessCode", 1048576L);

		columnBitmasks.put("version", 2097152L);

		columnBitmasks.put("userId", 4194304L);

		columnBitmasks.put("groupId", 8388608L);

		columnBitmasks.put("companyId", 16777216L);

		columnBitmasks.put("createDate", 33554432L);

		columnBitmasks.put("modifiedDate", 67108864L);

		columnBitmasks.put("createdBy", 134217728L);

		columnBitmasks.put("modifiedBy", 268435456L);

		columnBitmasks.put("status", 536870912L);

		columnBitmasks.put("statusByUserId", 1073741824L);

		columnBitmasks.put("statusByUserName", 2147483648L);

		columnBitmasks.put("statusDate", 4294967296L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerRegistrationVersion _escapedModel;

}