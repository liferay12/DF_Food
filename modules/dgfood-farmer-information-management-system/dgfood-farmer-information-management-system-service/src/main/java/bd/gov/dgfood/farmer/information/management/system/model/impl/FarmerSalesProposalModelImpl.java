/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.farmer.information.management.system.model.impl;

import bd.gov.dgfood.farmer.information.management.system.model.FarmerSalesProposal;
import bd.gov.dgfood.farmer.information.management.system.model.FarmerSalesProposalModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FarmerSalesProposal service. Represents a row in the &quot;DGFood_SalesProposal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FarmerSalesProposalModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FarmerSalesProposalImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FarmerSalesProposalImpl
 * @generated
 */
@JSON(strict = true)
public class FarmerSalesProposalModelImpl
	extends BaseModelImpl<FarmerSalesProposal>
	implements FarmerSalesProposalModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a farmer sales proposal model instance should use the <code>FarmerSalesProposal</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGFood_SalesProposal";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"farmerSalesProposalId", Types.BIGINT},
		{"applicationNumber", Types.VARCHAR},
		{"farmerRegistrationId", Types.BIGINT}, {"businessCode", Types.VARCHAR},
		{"currentSeason", Types.VARCHAR}, {"foodGrainType", Types.VARCHAR},
		{"krishiCardNumber", Types.VARCHAR},
		{"pastProdDataSeason1", Types.CLOB},
		{"pastProdDataSeason2", Types.CLOB},
		{"pastProdDataSeason3", Types.CLOB},
		{"succeedingProdDataSeason1", Types.CLOB},
		{"succeedingProdDataSeason2", Types.CLOB},
		{"succeedingProdDataSeason3", Types.CLOB},
		{"grainProcuredInLast4Seasons ", Types.BOOLEAN},
		{"foodgranProcuredSeason1", Types.CLOB},
		{"foodgranProcuredSeason2", Types.CLOB},
		{"foodgranProcuredSeason3", Types.CLOB},
		{"foodgranProcuredSeason4", Types.CLOB},
		{"cultivableLandSeason1", Types.CLOB},
		{"cultivableLandSeason2", Types.CLOB},
		{"cultivableLandSeason3", Types.CLOB},
		{"foodgrainReceivedStatus", Types.INTEGER},
		{"receivedFoodgrainQty", Types.CLOB},
		{"foodgrainReceivedDate", Types.TIMESTAMP},
		{"paymentStatus", Types.INTEGER}, {"remarks", Types.VARCHAR},
		{"version", Types.DOUBLE}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"modifiedBy", Types.BIGINT}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerSalesProposalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("farmerRegistrationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("businessCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("currentSeason", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foodGrainType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("krishiCardNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pastProdDataSeason1", Types.CLOB);
		TABLE_COLUMNS_MAP.put("pastProdDataSeason2", Types.CLOB);
		TABLE_COLUMNS_MAP.put("pastProdDataSeason3", Types.CLOB);
		TABLE_COLUMNS_MAP.put("succeedingProdDataSeason1", Types.CLOB);
		TABLE_COLUMNS_MAP.put("succeedingProdDataSeason2", Types.CLOB);
		TABLE_COLUMNS_MAP.put("succeedingProdDataSeason3", Types.CLOB);
		TABLE_COLUMNS_MAP.put("grainProcuredInLast4Seasons ", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("foodgranProcuredSeason1", Types.CLOB);
		TABLE_COLUMNS_MAP.put("foodgranProcuredSeason2", Types.CLOB);
		TABLE_COLUMNS_MAP.put("foodgranProcuredSeason3", Types.CLOB);
		TABLE_COLUMNS_MAP.put("foodgranProcuredSeason4", Types.CLOB);
		TABLE_COLUMNS_MAP.put("cultivableLandSeason1", Types.CLOB);
		TABLE_COLUMNS_MAP.put("cultivableLandSeason2", Types.CLOB);
		TABLE_COLUMNS_MAP.put("cultivableLandSeason3", Types.CLOB);
		TABLE_COLUMNS_MAP.put("foodgrainReceivedStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("receivedFoodgrainQty", Types.CLOB);
		TABLE_COLUMNS_MAP.put("foodgrainReceivedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("paymentStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("remarks", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGFood_SalesProposal (uuid_ VARCHAR(75) null,farmerSalesProposalId LONG not null primary key,applicationNumber VARCHAR(75) null,farmerRegistrationId LONG,businessCode VARCHAR(75) null,currentSeason VARCHAR(75) null,foodGrainType VARCHAR(75) null,krishiCardNumber VARCHAR(75) null,pastProdDataSeason1 TEXT null,pastProdDataSeason2 TEXT null,pastProdDataSeason3 TEXT null,succeedingProdDataSeason1 TEXT null,succeedingProdDataSeason2 TEXT null,succeedingProdDataSeason3 TEXT null,grainProcuredInLast4Seasons  BOOLEAN,foodgranProcuredSeason1 TEXT null,foodgranProcuredSeason2 TEXT null,foodgranProcuredSeason3 TEXT null,foodgranProcuredSeason4 TEXT null,cultivableLandSeason1 TEXT null,cultivableLandSeason2 TEXT null,cultivableLandSeason3 TEXT null,foodgrainReceivedStatus INTEGER,receivedFoodgrainQty TEXT null,foodgrainReceivedDate DATE null,paymentStatus INTEGER,remarks VARCHAR(75) null,version DOUBLE,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,createdBy LONG,modifiedBy LONG,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table DGFood_SalesProposal";

	public static final String ORDER_BY_JPQL =
		" ORDER BY farmerSalesProposal.farmerSalesProposalId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGFood_SalesProposal.farmerSalesProposalId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BUSINESSCODE_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FARMERSALESPROPOSALID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FarmerSalesProposalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _farmerSalesProposalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFarmerSalesProposalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _farmerSalesProposalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FarmerSalesProposal.class;
	}

	@Override
	public String getModelClassName() {
		return FarmerSalesProposal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FarmerSalesProposal, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FarmerSalesProposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerSalesProposal, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FarmerSalesProposal)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FarmerSalesProposal, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FarmerSalesProposal, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FarmerSalesProposal)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FarmerSalesProposal, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FarmerSalesProposal, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FarmerSalesProposal, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FarmerSalesProposal, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FarmerSalesProposal, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<FarmerSalesProposal, Object>>();
		Map<String, BiConsumer<FarmerSalesProposal, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FarmerSalesProposal, ?>>();

		attributeGetterFunctions.put("uuid", FarmerSalesProposal::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setUuid);
		attributeGetterFunctions.put(
			"farmerSalesProposalId",
			FarmerSalesProposal::getFarmerSalesProposalId);
		attributeSetterBiConsumers.put(
			"farmerSalesProposalId",
			(BiConsumer<FarmerSalesProposal, Long>)
				FarmerSalesProposal::setFarmerSalesProposalId);
		attributeGetterFunctions.put(
			"applicationNumber", FarmerSalesProposal::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setApplicationNumber);
		attributeGetterFunctions.put(
			"farmerRegistrationId",
			FarmerSalesProposal::getFarmerRegistrationId);
		attributeSetterBiConsumers.put(
			"farmerRegistrationId",
			(BiConsumer<FarmerSalesProposal, Long>)
				FarmerSalesProposal::setFarmerRegistrationId);
		attributeGetterFunctions.put(
			"businessCode", FarmerSalesProposal::getBusinessCode);
		attributeSetterBiConsumers.put(
			"businessCode",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setBusinessCode);
		attributeGetterFunctions.put(
			"currentSeason", FarmerSalesProposal::getCurrentSeason);
		attributeSetterBiConsumers.put(
			"currentSeason",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setCurrentSeason);
		attributeGetterFunctions.put(
			"foodGrainType", FarmerSalesProposal::getFoodGrainType);
		attributeSetterBiConsumers.put(
			"foodGrainType",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setFoodGrainType);
		attributeGetterFunctions.put(
			"krishiCardNumber", FarmerSalesProposal::getKrishiCardNumber);
		attributeSetterBiConsumers.put(
			"krishiCardNumber",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setKrishiCardNumber);
		attributeGetterFunctions.put(
			"pastProdDataSeason1", FarmerSalesProposal::getPastProdDataSeason1);
		attributeSetterBiConsumers.put(
			"pastProdDataSeason1",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setPastProdDataSeason1);
		attributeGetterFunctions.put(
			"pastProdDataSeason2", FarmerSalesProposal::getPastProdDataSeason2);
		attributeSetterBiConsumers.put(
			"pastProdDataSeason2",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setPastProdDataSeason2);
		attributeGetterFunctions.put(
			"pastProdDataSeason3", FarmerSalesProposal::getPastProdDataSeason3);
		attributeSetterBiConsumers.put(
			"pastProdDataSeason3",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setPastProdDataSeason3);
		attributeGetterFunctions.put(
			"succeedingProdDataSeason1",
			FarmerSalesProposal::getSucceedingProdDataSeason1);
		attributeSetterBiConsumers.put(
			"succeedingProdDataSeason1",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setSucceedingProdDataSeason1);
		attributeGetterFunctions.put(
			"succeedingProdDataSeason2",
			FarmerSalesProposal::getSucceedingProdDataSeason2);
		attributeSetterBiConsumers.put(
			"succeedingProdDataSeason2",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setSucceedingProdDataSeason2);
		attributeGetterFunctions.put(
			"succeedingProdDataSeason3",
			FarmerSalesProposal::getSucceedingProdDataSeason3);
		attributeSetterBiConsumers.put(
			"succeedingProdDataSeason3",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setSucceedingProdDataSeason3);
		attributeGetterFunctions.put(
			"grainProcuredInLast4Seasons ",
			FarmerSalesProposal::getGrainProcuredInLast4Seasons);
		attributeSetterBiConsumers.put(
			"grainProcuredInLast4Seasons ",
			(BiConsumer<FarmerSalesProposal, Boolean>)
				FarmerSalesProposal::setGrainProcuredInLast4Seasons);
		attributeGetterFunctions.put(
			"foodgranProcuredSeason1",
			FarmerSalesProposal::getFoodgranProcuredSeason1);
		attributeSetterBiConsumers.put(
			"foodgranProcuredSeason1",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setFoodgranProcuredSeason1);
		attributeGetterFunctions.put(
			"foodgranProcuredSeason2",
			FarmerSalesProposal::getFoodgranProcuredSeason2);
		attributeSetterBiConsumers.put(
			"foodgranProcuredSeason2",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setFoodgranProcuredSeason2);
		attributeGetterFunctions.put(
			"foodgranProcuredSeason3",
			FarmerSalesProposal::getFoodgranProcuredSeason3);
		attributeSetterBiConsumers.put(
			"foodgranProcuredSeason3",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setFoodgranProcuredSeason3);
		attributeGetterFunctions.put(
			"foodgranProcuredSeason4",
			FarmerSalesProposal::getFoodgranProcuredSeason4);
		attributeSetterBiConsumers.put(
			"foodgranProcuredSeason4",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setFoodgranProcuredSeason4);
		attributeGetterFunctions.put(
			"cultivableLandSeason1",
			FarmerSalesProposal::getCultivableLandSeason1);
		attributeSetterBiConsumers.put(
			"cultivableLandSeason1",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setCultivableLandSeason1);
		attributeGetterFunctions.put(
			"cultivableLandSeason2",
			FarmerSalesProposal::getCultivableLandSeason2);
		attributeSetterBiConsumers.put(
			"cultivableLandSeason2",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setCultivableLandSeason2);
		attributeGetterFunctions.put(
			"cultivableLandSeason3",
			FarmerSalesProposal::getCultivableLandSeason3);
		attributeSetterBiConsumers.put(
			"cultivableLandSeason3",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setCultivableLandSeason3);
		attributeGetterFunctions.put(
			"foodgrainReceivedStatus",
			FarmerSalesProposal::getFoodgrainReceivedStatus);
		attributeSetterBiConsumers.put(
			"foodgrainReceivedStatus",
			(BiConsumer<FarmerSalesProposal, Integer>)
				FarmerSalesProposal::setFoodgrainReceivedStatus);
		attributeGetterFunctions.put(
			"receivedFoodgrainQty",
			FarmerSalesProposal::getReceivedFoodgrainQty);
		attributeSetterBiConsumers.put(
			"receivedFoodgrainQty",
			(BiConsumer<FarmerSalesProposal, Map<String, Serializable>>)
				FarmerSalesProposal::setReceivedFoodgrainQty);
		attributeGetterFunctions.put(
			"foodgrainReceivedDate",
			FarmerSalesProposal::getFoodgrainReceivedDate);
		attributeSetterBiConsumers.put(
			"foodgrainReceivedDate",
			(BiConsumer<FarmerSalesProposal, Date>)
				FarmerSalesProposal::setFoodgrainReceivedDate);
		attributeGetterFunctions.put(
			"paymentStatus", FarmerSalesProposal::getPaymentStatus);
		attributeSetterBiConsumers.put(
			"paymentStatus",
			(BiConsumer<FarmerSalesProposal, Integer>)
				FarmerSalesProposal::setPaymentStatus);
		attributeGetterFunctions.put(
			"remarks", FarmerSalesProposal::getRemarks);
		attributeSetterBiConsumers.put(
			"remarks",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setRemarks);
		attributeGetterFunctions.put(
			"version", FarmerSalesProposal::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<FarmerSalesProposal, Double>)
				FarmerSalesProposal::setVersion);
		attributeGetterFunctions.put(
			"groupId", FarmerSalesProposal::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FarmerSalesProposal, Long>)
				FarmerSalesProposal::setGroupId);
		attributeGetterFunctions.put(
			"companyId", FarmerSalesProposal::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FarmerSalesProposal, Long>)
				FarmerSalesProposal::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", FarmerSalesProposal::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FarmerSalesProposal, Date>)
				FarmerSalesProposal::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FarmerSalesProposal::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FarmerSalesProposal, Date>)
				FarmerSalesProposal::setModifiedDate);
		attributeGetterFunctions.put(
			"createdBy", FarmerSalesProposal::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<FarmerSalesProposal, Long>)
				FarmerSalesProposal::setCreatedBy);
		attributeGetterFunctions.put(
			"modifiedBy", FarmerSalesProposal::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<FarmerSalesProposal, Long>)
				FarmerSalesProposal::setModifiedBy);
		attributeGetterFunctions.put("status", FarmerSalesProposal::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FarmerSalesProposal, Integer>)
				FarmerSalesProposal::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FarmerSalesProposal::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FarmerSalesProposal, Long>)
				FarmerSalesProposal::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", FarmerSalesProposal::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<FarmerSalesProposal, String>)
				FarmerSalesProposal::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", FarmerSalesProposal::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FarmerSalesProposal, Date>)
				FarmerSalesProposal::setStatusDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFarmerSalesProposalId() {
		return _farmerSalesProposalId;
	}

	@Override
	public void setFarmerSalesProposalId(long farmerSalesProposalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerSalesProposalId = farmerSalesProposalId;
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public long getFarmerRegistrationId() {
		return _farmerRegistrationId;
	}

	@Override
	public void setFarmerRegistrationId(long farmerRegistrationId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_farmerRegistrationId = farmerRegistrationId;
	}

	@JSON
	@Override
	public String getBusinessCode() {
		if (_businessCode == null) {
			return "";
		}
		else {
			return _businessCode;
		}
	}

	@Override
	public void setBusinessCode(String businessCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessCode = businessCode;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalBusinessCode() {
		return getColumnOriginalValue("businessCode");
	}

	@JSON
	@Override
	public String getCurrentSeason() {
		if (_currentSeason == null) {
			return "";
		}
		else {
			return _currentSeason;
		}
	}

	@Override
	public void setCurrentSeason(String currentSeason) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_currentSeason = currentSeason;
	}

	@JSON
	@Override
	public String getFoodGrainType() {
		if (_foodGrainType == null) {
			return "";
		}
		else {
			return _foodGrainType;
		}
	}

	@Override
	public void setFoodGrainType(String foodGrainType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodGrainType = foodGrainType;
	}

	@JSON
	@Override
	public String getKrishiCardNumber() {
		if (_krishiCardNumber == null) {
			return "";
		}
		else {
			return _krishiCardNumber;
		}
	}

	@Override
	public void setKrishiCardNumber(String krishiCardNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_krishiCardNumber = krishiCardNumber;
	}

	@JSON
	@Override
	public Map<String, Serializable> getPastProdDataSeason1() {
		return _pastProdDataSeason1;
	}

	@Override
	public void setPastProdDataSeason1(
		Map<String, Serializable> pastProdDataSeason1) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pastProdDataSeason1 = pastProdDataSeason1;
	}

	@JSON
	@Override
	public Map<String, Serializable> getPastProdDataSeason2() {
		return _pastProdDataSeason2;
	}

	@Override
	public void setPastProdDataSeason2(
		Map<String, Serializable> pastProdDataSeason2) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pastProdDataSeason2 = pastProdDataSeason2;
	}

	@JSON
	@Override
	public Map<String, Serializable> getPastProdDataSeason3() {
		return _pastProdDataSeason3;
	}

	@Override
	public void setPastProdDataSeason3(
		Map<String, Serializable> pastProdDataSeason3) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_pastProdDataSeason3 = pastProdDataSeason3;
	}

	@JSON
	@Override
	public Map<String, Serializable> getSucceedingProdDataSeason1() {
		return _succeedingProdDataSeason1;
	}

	@Override
	public void setSucceedingProdDataSeason1(
		Map<String, Serializable> succeedingProdDataSeason1) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_succeedingProdDataSeason1 = succeedingProdDataSeason1;
	}

	@JSON
	@Override
	public Map<String, Serializable> getSucceedingProdDataSeason2() {
		return _succeedingProdDataSeason2;
	}

	@Override
	public void setSucceedingProdDataSeason2(
		Map<String, Serializable> succeedingProdDataSeason2) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_succeedingProdDataSeason2 = succeedingProdDataSeason2;
	}

	@JSON
	@Override
	public Map<String, Serializable> getSucceedingProdDataSeason3() {
		return _succeedingProdDataSeason3;
	}

	@Override
	public void setSucceedingProdDataSeason3(
		Map<String, Serializable> succeedingProdDataSeason3) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_succeedingProdDataSeason3 = succeedingProdDataSeason3;
	}

	@JSON
	@Override
	public boolean getGrainProcuredInLast4Seasons() {
		return _grainProcuredInLast4Seasons;
	}

	@JSON
	@Override
	public boolean isGrainProcuredInLast4Seasons() {
		return _grainProcuredInLast4Seasons;
	}

	@Override
	public void setGrainProcuredInLast4Seasons(
		boolean grainProcuredInLast4Seasons) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_grainProcuredInLast4Seasons = grainProcuredInLast4Seasons;
	}

	@JSON
	@Override
	public Map<String, Serializable> getFoodgranProcuredSeason1() {
		return _foodgranProcuredSeason1;
	}

	@Override
	public void setFoodgranProcuredSeason1(
		Map<String, Serializable> foodgranProcuredSeason1) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgranProcuredSeason1 = foodgranProcuredSeason1;
	}

	@JSON
	@Override
	public Map<String, Serializable> getFoodgranProcuredSeason2() {
		return _foodgranProcuredSeason2;
	}

	@Override
	public void setFoodgranProcuredSeason2(
		Map<String, Serializable> foodgranProcuredSeason2) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgranProcuredSeason2 = foodgranProcuredSeason2;
	}

	@JSON
	@Override
	public Map<String, Serializable> getFoodgranProcuredSeason3() {
		return _foodgranProcuredSeason3;
	}

	@Override
	public void setFoodgranProcuredSeason3(
		Map<String, Serializable> foodgranProcuredSeason3) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgranProcuredSeason3 = foodgranProcuredSeason3;
	}

	@JSON
	@Override
	public Map<String, Serializable> getFoodgranProcuredSeason4() {
		return _foodgranProcuredSeason4;
	}

	@Override
	public void setFoodgranProcuredSeason4(
		Map<String, Serializable> foodgranProcuredSeason4) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgranProcuredSeason4 = foodgranProcuredSeason4;
	}

	@JSON
	@Override
	public Map<String, Serializable> getCultivableLandSeason1() {
		return _cultivableLandSeason1;
	}

	@Override
	public void setCultivableLandSeason1(
		Map<String, Serializable> cultivableLandSeason1) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cultivableLandSeason1 = cultivableLandSeason1;
	}

	@JSON
	@Override
	public Map<String, Serializable> getCultivableLandSeason2() {
		return _cultivableLandSeason2;
	}

	@Override
	public void setCultivableLandSeason2(
		Map<String, Serializable> cultivableLandSeason2) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cultivableLandSeason2 = cultivableLandSeason2;
	}

	@JSON
	@Override
	public Map<String, Serializable> getCultivableLandSeason3() {
		return _cultivableLandSeason3;
	}

	@Override
	public void setCultivableLandSeason3(
		Map<String, Serializable> cultivableLandSeason3) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cultivableLandSeason3 = cultivableLandSeason3;
	}

	@JSON
	@Override
	public int getFoodgrainReceivedStatus() {
		return _foodgrainReceivedStatus;
	}

	@Override
	public void setFoodgrainReceivedStatus(int foodgrainReceivedStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainReceivedStatus = foodgrainReceivedStatus;
	}

	@JSON
	@Override
	public Map<String, Serializable> getReceivedFoodgrainQty() {
		return _receivedFoodgrainQty;
	}

	@Override
	public void setReceivedFoodgrainQty(
		Map<String, Serializable> receivedFoodgrainQty) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivedFoodgrainQty = receivedFoodgrainQty;
	}

	@JSON
	@Override
	public Date getFoodgrainReceivedDate() {
		return _foodgrainReceivedDate;
	}

	@Override
	public void setFoodgrainReceivedDate(Date foodgrainReceivedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainReceivedDate = foodgrainReceivedDate;
	}

	@JSON
	@Override
	public int getPaymentStatus() {
		return _paymentStatus;
	}

	@Override
	public void setPaymentStatus(int paymentStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentStatus = paymentStatus;
	}

	@JSON
	@Override
	public String getRemarks() {
		if (_remarks == null) {
			return "";
		}
		else {
			return _remarks;
		}
	}

	@Override
	public void setRemarks(String remarks) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_remarks = remarks;
	}

	@JSON
	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(FarmerSalesProposal.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FarmerSalesProposal.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FarmerSalesProposal toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FarmerSalesProposal>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FarmerSalesProposalImpl farmerSalesProposalImpl =
			new FarmerSalesProposalImpl();

		farmerSalesProposalImpl.setUuid(getUuid());
		farmerSalesProposalImpl.setFarmerSalesProposalId(
			getFarmerSalesProposalId());
		farmerSalesProposalImpl.setApplicationNumber(getApplicationNumber());
		farmerSalesProposalImpl.setFarmerRegistrationId(
			getFarmerRegistrationId());
		farmerSalesProposalImpl.setBusinessCode(getBusinessCode());
		farmerSalesProposalImpl.setCurrentSeason(getCurrentSeason());
		farmerSalesProposalImpl.setFoodGrainType(getFoodGrainType());
		farmerSalesProposalImpl.setKrishiCardNumber(getKrishiCardNumber());
		farmerSalesProposalImpl.setPastProdDataSeason1(
			getPastProdDataSeason1());
		farmerSalesProposalImpl.setPastProdDataSeason2(
			getPastProdDataSeason2());
		farmerSalesProposalImpl.setPastProdDataSeason3(
			getPastProdDataSeason3());
		farmerSalesProposalImpl.setSucceedingProdDataSeason1(
			getSucceedingProdDataSeason1());
		farmerSalesProposalImpl.setSucceedingProdDataSeason2(
			getSucceedingProdDataSeason2());
		farmerSalesProposalImpl.setSucceedingProdDataSeason3(
			getSucceedingProdDataSeason3());
		farmerSalesProposalImpl.setGrainProcuredInLast4Seasons(
			isGrainProcuredInLast4Seasons());
		farmerSalesProposalImpl.setFoodgranProcuredSeason1(
			getFoodgranProcuredSeason1());
		farmerSalesProposalImpl.setFoodgranProcuredSeason2(
			getFoodgranProcuredSeason2());
		farmerSalesProposalImpl.setFoodgranProcuredSeason3(
			getFoodgranProcuredSeason3());
		farmerSalesProposalImpl.setFoodgranProcuredSeason4(
			getFoodgranProcuredSeason4());
		farmerSalesProposalImpl.setCultivableLandSeason1(
			getCultivableLandSeason1());
		farmerSalesProposalImpl.setCultivableLandSeason2(
			getCultivableLandSeason2());
		farmerSalesProposalImpl.setCultivableLandSeason3(
			getCultivableLandSeason3());
		farmerSalesProposalImpl.setFoodgrainReceivedStatus(
			getFoodgrainReceivedStatus());
		farmerSalesProposalImpl.setReceivedFoodgrainQty(
			getReceivedFoodgrainQty());
		farmerSalesProposalImpl.setFoodgrainReceivedDate(
			getFoodgrainReceivedDate());
		farmerSalesProposalImpl.setPaymentStatus(getPaymentStatus());
		farmerSalesProposalImpl.setRemarks(getRemarks());
		farmerSalesProposalImpl.setVersion(getVersion());
		farmerSalesProposalImpl.setGroupId(getGroupId());
		farmerSalesProposalImpl.setCompanyId(getCompanyId());
		farmerSalesProposalImpl.setCreateDate(getCreateDate());
		farmerSalesProposalImpl.setModifiedDate(getModifiedDate());
		farmerSalesProposalImpl.setCreatedBy(getCreatedBy());
		farmerSalesProposalImpl.setModifiedBy(getModifiedBy());
		farmerSalesProposalImpl.setStatus(getStatus());
		farmerSalesProposalImpl.setStatusByUserId(getStatusByUserId());
		farmerSalesProposalImpl.setStatusByUserName(getStatusByUserName());
		farmerSalesProposalImpl.setStatusDate(getStatusDate());

		farmerSalesProposalImpl.resetOriginalValues();

		return farmerSalesProposalImpl;
	}

	@Override
	public FarmerSalesProposal cloneWithOriginalValues() {
		FarmerSalesProposalImpl farmerSalesProposalImpl =
			new FarmerSalesProposalImpl();

		farmerSalesProposalImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		farmerSalesProposalImpl.setFarmerSalesProposalId(
			this.<Long>getColumnOriginalValue("farmerSalesProposalId"));
		farmerSalesProposalImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		farmerSalesProposalImpl.setFarmerRegistrationId(
			this.<Long>getColumnOriginalValue("farmerRegistrationId"));
		farmerSalesProposalImpl.setBusinessCode(
			this.<String>getColumnOriginalValue("businessCode"));
		farmerSalesProposalImpl.setCurrentSeason(
			this.<String>getColumnOriginalValue("currentSeason"));
		farmerSalesProposalImpl.setFoodGrainType(
			this.<String>getColumnOriginalValue("foodGrainType"));
		farmerSalesProposalImpl.setKrishiCardNumber(
			this.<String>getColumnOriginalValue("krishiCardNumber"));
		farmerSalesProposalImpl.setPastProdDataSeason1(
			this.<Map>getColumnOriginalValue("pastProdDataSeason1"));
		farmerSalesProposalImpl.setPastProdDataSeason2(
			this.<Map>getColumnOriginalValue("pastProdDataSeason2"));
		farmerSalesProposalImpl.setPastProdDataSeason3(
			this.<Map>getColumnOriginalValue("pastProdDataSeason3"));
		farmerSalesProposalImpl.setSucceedingProdDataSeason1(
			this.<Map>getColumnOriginalValue("succeedingProdDataSeason1"));
		farmerSalesProposalImpl.setSucceedingProdDataSeason2(
			this.<Map>getColumnOriginalValue("succeedingProdDataSeason2"));
		farmerSalesProposalImpl.setSucceedingProdDataSeason3(
			this.<Map>getColumnOriginalValue("succeedingProdDataSeason3"));
		farmerSalesProposalImpl.setGrainProcuredInLast4Seasons(
			this.<Boolean>getColumnOriginalValue(
				"grainProcuredInLast4Seasons "));
		farmerSalesProposalImpl.setFoodgranProcuredSeason1(
			this.<Map>getColumnOriginalValue("foodgranProcuredSeason1"));
		farmerSalesProposalImpl.setFoodgranProcuredSeason2(
			this.<Map>getColumnOriginalValue("foodgranProcuredSeason2"));
		farmerSalesProposalImpl.setFoodgranProcuredSeason3(
			this.<Map>getColumnOriginalValue("foodgranProcuredSeason3"));
		farmerSalesProposalImpl.setFoodgranProcuredSeason4(
			this.<Map>getColumnOriginalValue("foodgranProcuredSeason4"));
		farmerSalesProposalImpl.setCultivableLandSeason1(
			this.<Map>getColumnOriginalValue("cultivableLandSeason1"));
		farmerSalesProposalImpl.setCultivableLandSeason2(
			this.<Map>getColumnOriginalValue("cultivableLandSeason2"));
		farmerSalesProposalImpl.setCultivableLandSeason3(
			this.<Map>getColumnOriginalValue("cultivableLandSeason3"));
		farmerSalesProposalImpl.setFoodgrainReceivedStatus(
			this.<Integer>getColumnOriginalValue("foodgrainReceivedStatus"));
		farmerSalesProposalImpl.setReceivedFoodgrainQty(
			this.<Map>getColumnOriginalValue("receivedFoodgrainQty"));
		farmerSalesProposalImpl.setFoodgrainReceivedDate(
			this.<Date>getColumnOriginalValue("foodgrainReceivedDate"));
		farmerSalesProposalImpl.setPaymentStatus(
			this.<Integer>getColumnOriginalValue("paymentStatus"));
		farmerSalesProposalImpl.setRemarks(
			this.<String>getColumnOriginalValue("remarks"));
		farmerSalesProposalImpl.setVersion(
			this.<Double>getColumnOriginalValue("version"));
		farmerSalesProposalImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		farmerSalesProposalImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		farmerSalesProposalImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		farmerSalesProposalImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		farmerSalesProposalImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		farmerSalesProposalImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		farmerSalesProposalImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		farmerSalesProposalImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		farmerSalesProposalImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		farmerSalesProposalImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));

		return farmerSalesProposalImpl;
	}

	@Override
	public int compareTo(FarmerSalesProposal farmerSalesProposal) {
		int value = 0;

		if (getFarmerSalesProposalId() <
				farmerSalesProposal.getFarmerSalesProposalId()) {

			value = -1;
		}
		else if (getFarmerSalesProposalId() >
					farmerSalesProposal.getFarmerSalesProposalId()) {

			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FarmerSalesProposal)) {
			return false;
		}

		FarmerSalesProposal farmerSalesProposal = (FarmerSalesProposal)object;

		long primaryKey = farmerSalesProposal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FarmerSalesProposal> toCacheModel() {
		FarmerSalesProposalCacheModel farmerSalesProposalCacheModel =
			new FarmerSalesProposalCacheModel();

		farmerSalesProposalCacheModel.uuid = getUuid();

		String uuid = farmerSalesProposalCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			farmerSalesProposalCacheModel.uuid = null;
		}

		farmerSalesProposalCacheModel.farmerSalesProposalId =
			getFarmerSalesProposalId();

		farmerSalesProposalCacheModel.applicationNumber =
			getApplicationNumber();

		String applicationNumber =
			farmerSalesProposalCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			farmerSalesProposalCacheModel.applicationNumber = null;
		}

		farmerSalesProposalCacheModel.farmerRegistrationId =
			getFarmerRegistrationId();

		farmerSalesProposalCacheModel.businessCode = getBusinessCode();

		String businessCode = farmerSalesProposalCacheModel.businessCode;

		if ((businessCode != null) && (businessCode.length() == 0)) {
			farmerSalesProposalCacheModel.businessCode = null;
		}

		farmerSalesProposalCacheModel.currentSeason = getCurrentSeason();

		String currentSeason = farmerSalesProposalCacheModel.currentSeason;

		if ((currentSeason != null) && (currentSeason.length() == 0)) {
			farmerSalesProposalCacheModel.currentSeason = null;
		}

		farmerSalesProposalCacheModel.foodGrainType = getFoodGrainType();

		String foodGrainType = farmerSalesProposalCacheModel.foodGrainType;

		if ((foodGrainType != null) && (foodGrainType.length() == 0)) {
			farmerSalesProposalCacheModel.foodGrainType = null;
		}

		farmerSalesProposalCacheModel.krishiCardNumber = getKrishiCardNumber();

		String krishiCardNumber =
			farmerSalesProposalCacheModel.krishiCardNumber;

		if ((krishiCardNumber != null) && (krishiCardNumber.length() == 0)) {
			farmerSalesProposalCacheModel.krishiCardNumber = null;
		}

		farmerSalesProposalCacheModel.pastProdDataSeason1 =
			getPastProdDataSeason1();

		farmerSalesProposalCacheModel.pastProdDataSeason2 =
			getPastProdDataSeason2();

		farmerSalesProposalCacheModel.pastProdDataSeason3 =
			getPastProdDataSeason3();

		farmerSalesProposalCacheModel.succeedingProdDataSeason1 =
			getSucceedingProdDataSeason1();

		farmerSalesProposalCacheModel.succeedingProdDataSeason2 =
			getSucceedingProdDataSeason2();

		farmerSalesProposalCacheModel.succeedingProdDataSeason3 =
			getSucceedingProdDataSeason3();

		farmerSalesProposalCacheModel.grainProcuredInLast4Seasons =
			isGrainProcuredInLast4Seasons();

		farmerSalesProposalCacheModel.foodgranProcuredSeason1 =
			getFoodgranProcuredSeason1();

		farmerSalesProposalCacheModel.foodgranProcuredSeason2 =
			getFoodgranProcuredSeason2();

		farmerSalesProposalCacheModel.foodgranProcuredSeason3 =
			getFoodgranProcuredSeason3();

		farmerSalesProposalCacheModel.foodgranProcuredSeason4 =
			getFoodgranProcuredSeason4();

		farmerSalesProposalCacheModel.cultivableLandSeason1 =
			getCultivableLandSeason1();

		farmerSalesProposalCacheModel.cultivableLandSeason2 =
			getCultivableLandSeason2();

		farmerSalesProposalCacheModel.cultivableLandSeason3 =
			getCultivableLandSeason3();

		farmerSalesProposalCacheModel.foodgrainReceivedStatus =
			getFoodgrainReceivedStatus();

		farmerSalesProposalCacheModel.receivedFoodgrainQty =
			getReceivedFoodgrainQty();

		Date foodgrainReceivedDate = getFoodgrainReceivedDate();

		if (foodgrainReceivedDate != null) {
			farmerSalesProposalCacheModel.foodgrainReceivedDate =
				foodgrainReceivedDate.getTime();
		}
		else {
			farmerSalesProposalCacheModel.foodgrainReceivedDate =
				Long.MIN_VALUE;
		}

		farmerSalesProposalCacheModel.paymentStatus = getPaymentStatus();

		farmerSalesProposalCacheModel.remarks = getRemarks();

		String remarks = farmerSalesProposalCacheModel.remarks;

		if ((remarks != null) && (remarks.length() == 0)) {
			farmerSalesProposalCacheModel.remarks = null;
		}

		farmerSalesProposalCacheModel.version = getVersion();

		farmerSalesProposalCacheModel.groupId = getGroupId();

		farmerSalesProposalCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			farmerSalesProposalCacheModel.createDate = createDate.getTime();
		}
		else {
			farmerSalesProposalCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			farmerSalesProposalCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			farmerSalesProposalCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		farmerSalesProposalCacheModel.createdBy = getCreatedBy();

		farmerSalesProposalCacheModel.modifiedBy = getModifiedBy();

		farmerSalesProposalCacheModel.status = getStatus();

		farmerSalesProposalCacheModel.statusByUserId = getStatusByUserId();

		farmerSalesProposalCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName =
			farmerSalesProposalCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			farmerSalesProposalCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			farmerSalesProposalCacheModel.statusDate = statusDate.getTime();
		}
		else {
			farmerSalesProposalCacheModel.statusDate = Long.MIN_VALUE;
		}

		return farmerSalesProposalCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FarmerSalesProposal, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FarmerSalesProposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerSalesProposal, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FarmerSalesProposal)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FarmerSalesProposal, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FarmerSalesProposal, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FarmerSalesProposal, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FarmerSalesProposal)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FarmerSalesProposal>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FarmerSalesProposal.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _farmerSalesProposalId;
	private String _applicationNumber;
	private long _farmerRegistrationId;
	private String _businessCode;
	private String _currentSeason;
	private String _foodGrainType;
	private String _krishiCardNumber;
	private Map<String, Serializable> _pastProdDataSeason1;
	private Map<String, Serializable> _pastProdDataSeason2;
	private Map<String, Serializable> _pastProdDataSeason3;
	private Map<String, Serializable> _succeedingProdDataSeason1;
	private Map<String, Serializable> _succeedingProdDataSeason2;
	private Map<String, Serializable> _succeedingProdDataSeason3;
	private boolean _grainProcuredInLast4Seasons;
	private Map<String, Serializable> _foodgranProcuredSeason1;
	private Map<String, Serializable> _foodgranProcuredSeason2;
	private Map<String, Serializable> _foodgranProcuredSeason3;
	private Map<String, Serializable> _foodgranProcuredSeason4;
	private Map<String, Serializable> _cultivableLandSeason1;
	private Map<String, Serializable> _cultivableLandSeason2;
	private Map<String, Serializable> _cultivableLandSeason3;
	private int _foodgrainReceivedStatus;
	private Map<String, Serializable> _receivedFoodgrainQty;
	private Date _foodgrainReceivedDate;
	private int _paymentStatus;
	private String _remarks;
	private double _version;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _createdBy;
	private long _modifiedBy;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FarmerSalesProposal, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FarmerSalesProposal)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"farmerSalesProposalId", _farmerSalesProposalId);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put(
			"farmerRegistrationId", _farmerRegistrationId);
		_columnOriginalValues.put("businessCode", _businessCode);
		_columnOriginalValues.put("currentSeason", _currentSeason);
		_columnOriginalValues.put("foodGrainType", _foodGrainType);
		_columnOriginalValues.put("krishiCardNumber", _krishiCardNumber);
		_columnOriginalValues.put("pastProdDataSeason1", _pastProdDataSeason1);
		_columnOriginalValues.put("pastProdDataSeason2", _pastProdDataSeason2);
		_columnOriginalValues.put("pastProdDataSeason3", _pastProdDataSeason3);
		_columnOriginalValues.put(
			"succeedingProdDataSeason1", _succeedingProdDataSeason1);
		_columnOriginalValues.put(
			"succeedingProdDataSeason2", _succeedingProdDataSeason2);
		_columnOriginalValues.put(
			"succeedingProdDataSeason3", _succeedingProdDataSeason3);
		_columnOriginalValues.put(
			"grainProcuredInLast4Seasons ", _grainProcuredInLast4Seasons);
		_columnOriginalValues.put(
			"foodgranProcuredSeason1", _foodgranProcuredSeason1);
		_columnOriginalValues.put(
			"foodgranProcuredSeason2", _foodgranProcuredSeason2);
		_columnOriginalValues.put(
			"foodgranProcuredSeason3", _foodgranProcuredSeason3);
		_columnOriginalValues.put(
			"foodgranProcuredSeason4", _foodgranProcuredSeason4);
		_columnOriginalValues.put(
			"cultivableLandSeason1", _cultivableLandSeason1);
		_columnOriginalValues.put(
			"cultivableLandSeason2", _cultivableLandSeason2);
		_columnOriginalValues.put(
			"cultivableLandSeason3", _cultivableLandSeason3);
		_columnOriginalValues.put(
			"foodgrainReceivedStatus", _foodgrainReceivedStatus);
		_columnOriginalValues.put(
			"receivedFoodgrainQty", _receivedFoodgrainQty);
		_columnOriginalValues.put(
			"foodgrainReceivedDate", _foodgrainReceivedDate);
		_columnOriginalValues.put("paymentStatus", _paymentStatus);
		_columnOriginalValues.put("remarks", _remarks);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("farmerSalesProposalId", 2L);

		columnBitmasks.put("applicationNumber", 4L);

		columnBitmasks.put("farmerRegistrationId", 8L);

		columnBitmasks.put("businessCode", 16L);

		columnBitmasks.put("currentSeason", 32L);

		columnBitmasks.put("foodGrainType", 64L);

		columnBitmasks.put("krishiCardNumber", 128L);

		columnBitmasks.put("pastProdDataSeason1", 256L);

		columnBitmasks.put("pastProdDataSeason2", 512L);

		columnBitmasks.put("pastProdDataSeason3", 1024L);

		columnBitmasks.put("succeedingProdDataSeason1", 2048L);

		columnBitmasks.put("succeedingProdDataSeason2", 4096L);

		columnBitmasks.put("succeedingProdDataSeason3", 8192L);

		columnBitmasks.put("grainProcuredInLast4Seasons ", 16384L);

		columnBitmasks.put("foodgranProcuredSeason1", 32768L);

		columnBitmasks.put("foodgranProcuredSeason2", 65536L);

		columnBitmasks.put("foodgranProcuredSeason3", 131072L);

		columnBitmasks.put("foodgranProcuredSeason4", 262144L);

		columnBitmasks.put("cultivableLandSeason1", 524288L);

		columnBitmasks.put("cultivableLandSeason2", 1048576L);

		columnBitmasks.put("cultivableLandSeason3", 2097152L);

		columnBitmasks.put("foodgrainReceivedStatus", 4194304L);

		columnBitmasks.put("receivedFoodgrainQty", 8388608L);

		columnBitmasks.put("foodgrainReceivedDate", 16777216L);

		columnBitmasks.put("paymentStatus", 33554432L);

		columnBitmasks.put("remarks", 67108864L);

		columnBitmasks.put("version", 134217728L);

		columnBitmasks.put("groupId", 268435456L);

		columnBitmasks.put("companyId", 536870912L);

		columnBitmasks.put("createDate", 1073741824L);

		columnBitmasks.put("modifiedDate", 2147483648L);

		columnBitmasks.put("createdBy", 4294967296L);

		columnBitmasks.put("modifiedBy", 8589934592L);

		columnBitmasks.put("status", 17179869184L);

		columnBitmasks.put("statusByUserId", 34359738368L);

		columnBitmasks.put("statusByUserName", 68719476736L);

		columnBitmasks.put("statusDate", 137438953472L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FarmerSalesProposal _escapedModel;

}