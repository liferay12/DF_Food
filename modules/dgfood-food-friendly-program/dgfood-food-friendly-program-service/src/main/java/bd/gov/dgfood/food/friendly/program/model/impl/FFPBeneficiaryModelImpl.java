/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.food.friendly.program.model.impl;

import bd.gov.dgfood.food.friendly.program.model.FFPBeneficiary;
import bd.gov.dgfood.food.friendly.program.model.FFPBeneficiaryModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FFPBeneficiary service. Represents a row in the &quot;FFPB_Registration&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FFPBeneficiaryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FFPBeneficiaryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FFPBeneficiaryImpl
 * @generated
 */
@JSON(strict = true)
public class FFPBeneficiaryModelImpl
	extends BaseModelImpl<FFPBeneficiary> implements FFPBeneficiaryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a ffp beneficiary model instance should use the <code>FFPBeneficiary</code> interface instead.
	 */
	public static final String TABLE_NAME = "FFPB_Registration";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"beneficiaryId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"version", Types.DOUBLE}, {"name", Types.VARCHAR},
		{"mobileNumber", Types.VARCHAR}, {"nationalId", Types.BIGINT},
		{"emailAddress", Types.VARCHAR}, {"cardNumber", Types.VARCHAR},
		{"dateOfBirth", Types.TIMESTAMP}, {"gender", Types.INTEGER},
		{"fatherName", Types.VARCHAR}, {"motherName", Types.VARCHAR},
		{"maritalStatus", Types.INTEGER}, {"spouseName", Types.VARCHAR},
		{"spouseFatherName", Types.VARCHAR},
		{"spouseDateOfBirth", Types.TIMESTAMP},
		{"spouseNationalId", Types.BIGINT},
		{"familyAverageMonthlyIncome", Types.VARCHAR},
		{"familyEarningMembers", Types.INTEGER}, {"acknowledge", Types.BOOLEAN},
		{"nonOfMyFamilyMembersRegistered", Types.BOOLEAN},
		{"status", Types.INTEGER}, {"statusByUserId", Types.BIGINT},
		{"statusDate", Types.TIMESTAMP}, {"createdBy", Types.BIGINT},
		{"createDate", Types.TIMESTAMP}, {"modifiedBy", Types.BIGINT},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("beneficiaryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cardNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("motherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("spouseName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouseFatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("spouseDateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("spouseNationalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("familyAverageMonthlyIncome", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("familyEarningMembers", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("acknowledge", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("nonOfMyFamilyMembersRegistered", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table FFPB_Registration (uuid_ VARCHAR(75) null,beneficiaryId LONG not null primary key,groupId LONG,companyId LONG,version DOUBLE,name VARCHAR(75) null,mobileNumber VARCHAR(75) null,nationalId LONG,emailAddress VARCHAR(75) null,cardNumber VARCHAR(75) null,dateOfBirth DATE null,gender INTEGER,fatherName VARCHAR(75) null,motherName VARCHAR(75) null,maritalStatus INTEGER,spouseName VARCHAR(75) null,spouseFatherName VARCHAR(75) null,spouseDateOfBirth DATE null,spouseNationalId LONG,familyAverageMonthlyIncome VARCHAR(75) null,familyEarningMembers INTEGER,acknowledge BOOLEAN,nonOfMyFamilyMembersRegistered BOOLEAN,status INTEGER,statusByUserId LONG,statusDate DATE null,createdBy LONG,createDate DATE null,modifiedBy LONG,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table FFPB_Registration";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ffpBeneficiary.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY FFPB_Registration.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long BENEFICIARYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CARDNUMBER_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long DATEOFBIRTH_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long CREATEDATE_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FFPBeneficiaryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _beneficiaryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setBeneficiaryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _beneficiaryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FFPBeneficiary.class;
	}

	@Override
	public String getModelClassName() {
		return FFPBeneficiary.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FFPBeneficiary, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FFPBeneficiary, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FFPBeneficiary, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FFPBeneficiary)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FFPBeneficiary, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FFPBeneficiary, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FFPBeneficiary)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FFPBeneficiary, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FFPBeneficiary, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FFPBeneficiary, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FFPBeneficiary, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FFPBeneficiary, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FFPBeneficiary, Object>>();
		Map<String, BiConsumer<FFPBeneficiary, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FFPBeneficiary, ?>>();

		attributeGetterFunctions.put("uuid", FFPBeneficiary::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FFPBeneficiary, String>)FFPBeneficiary::setUuid);
		attributeGetterFunctions.put(
			"beneficiaryId", FFPBeneficiary::getBeneficiaryId);
		attributeSetterBiConsumers.put(
			"beneficiaryId",
			(BiConsumer<FFPBeneficiary, Long>)FFPBeneficiary::setBeneficiaryId);
		attributeGetterFunctions.put("groupId", FFPBeneficiary::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FFPBeneficiary, Long>)FFPBeneficiary::setGroupId);
		attributeGetterFunctions.put("companyId", FFPBeneficiary::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FFPBeneficiary, Long>)FFPBeneficiary::setCompanyId);
		attributeGetterFunctions.put("version", FFPBeneficiary::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<FFPBeneficiary, Double>)FFPBeneficiary::setVersion);
		attributeGetterFunctions.put("name", FFPBeneficiary::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<FFPBeneficiary, String>)FFPBeneficiary::setName);
		attributeGetterFunctions.put(
			"mobileNumber", FFPBeneficiary::getMobileNumber);
		attributeSetterBiConsumers.put(
			"mobileNumber",
			(BiConsumer<FFPBeneficiary, String>)
				FFPBeneficiary::setMobileNumber);
		attributeGetterFunctions.put(
			"nationalId", FFPBeneficiary::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<FFPBeneficiary, Long>)FFPBeneficiary::setNationalId);
		attributeGetterFunctions.put(
			"emailAddress", FFPBeneficiary::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<FFPBeneficiary, String>)
				FFPBeneficiary::setEmailAddress);
		attributeGetterFunctions.put(
			"cardNumber", FFPBeneficiary::getCardNumber);
		attributeSetterBiConsumers.put(
			"cardNumber",
			(BiConsumer<FFPBeneficiary, String>)FFPBeneficiary::setCardNumber);
		attributeGetterFunctions.put(
			"dateOfBirth", FFPBeneficiary::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth",
			(BiConsumer<FFPBeneficiary, Date>)FFPBeneficiary::setDateOfBirth);
		attributeGetterFunctions.put("gender", FFPBeneficiary::getGender);
		attributeSetterBiConsumers.put(
			"gender",
			(BiConsumer<FFPBeneficiary, Integer>)FFPBeneficiary::setGender);
		attributeGetterFunctions.put(
			"fatherName", FFPBeneficiary::getFatherName);
		attributeSetterBiConsumers.put(
			"fatherName",
			(BiConsumer<FFPBeneficiary, String>)FFPBeneficiary::setFatherName);
		attributeGetterFunctions.put(
			"motherName", FFPBeneficiary::getMotherName);
		attributeSetterBiConsumers.put(
			"motherName",
			(BiConsumer<FFPBeneficiary, String>)FFPBeneficiary::setMotherName);
		attributeGetterFunctions.put(
			"maritalStatus", FFPBeneficiary::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<FFPBeneficiary, Integer>)
				FFPBeneficiary::setMaritalStatus);
		attributeGetterFunctions.put(
			"spouseName", FFPBeneficiary::getSpouseName);
		attributeSetterBiConsumers.put(
			"spouseName",
			(BiConsumer<FFPBeneficiary, String>)FFPBeneficiary::setSpouseName);
		attributeGetterFunctions.put(
			"spouseFatherName", FFPBeneficiary::getSpouseFatherName);
		attributeSetterBiConsumers.put(
			"spouseFatherName",
			(BiConsumer<FFPBeneficiary, String>)
				FFPBeneficiary::setSpouseFatherName);
		attributeGetterFunctions.put(
			"spouseDateOfBirth", FFPBeneficiary::getSpouseDateOfBirth);
		attributeSetterBiConsumers.put(
			"spouseDateOfBirth",
			(BiConsumer<FFPBeneficiary, Date>)
				FFPBeneficiary::setSpouseDateOfBirth);
		attributeGetterFunctions.put(
			"spouseNationalId", FFPBeneficiary::getSpouseNationalId);
		attributeSetterBiConsumers.put(
			"spouseNationalId",
			(BiConsumer<FFPBeneficiary, Long>)
				FFPBeneficiary::setSpouseNationalId);
		attributeGetterFunctions.put(
			"familyAverageMonthlyIncome",
			FFPBeneficiary::getFamilyAverageMonthlyIncome);
		attributeSetterBiConsumers.put(
			"familyAverageMonthlyIncome",
			(BiConsumer<FFPBeneficiary, String>)
				FFPBeneficiary::setFamilyAverageMonthlyIncome);
		attributeGetterFunctions.put(
			"familyEarningMembers", FFPBeneficiary::getFamilyEarningMembers);
		attributeSetterBiConsumers.put(
			"familyEarningMembers",
			(BiConsumer<FFPBeneficiary, Integer>)
				FFPBeneficiary::setFamilyEarningMembers);
		attributeGetterFunctions.put(
			"acknowledge", FFPBeneficiary::getAcknowledge);
		attributeSetterBiConsumers.put(
			"acknowledge",
			(BiConsumer<FFPBeneficiary, Boolean>)
				FFPBeneficiary::setAcknowledge);
		attributeGetterFunctions.put(
			"nonOfMyFamilyMembersRegistered",
			FFPBeneficiary::getNonOfMyFamilyMembersRegistered);
		attributeSetterBiConsumers.put(
			"nonOfMyFamilyMembersRegistered",
			(BiConsumer<FFPBeneficiary, Boolean>)
				FFPBeneficiary::setNonOfMyFamilyMembersRegistered);
		attributeGetterFunctions.put("status", FFPBeneficiary::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FFPBeneficiary, Integer>)FFPBeneficiary::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FFPBeneficiary::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FFPBeneficiary, Long>)
				FFPBeneficiary::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusDate", FFPBeneficiary::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FFPBeneficiary, Date>)FFPBeneficiary::setStatusDate);
		attributeGetterFunctions.put("createdBy", FFPBeneficiary::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<FFPBeneficiary, Long>)FFPBeneficiary::setCreatedBy);
		attributeGetterFunctions.put(
			"createDate", FFPBeneficiary::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FFPBeneficiary, Date>)FFPBeneficiary::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedBy", FFPBeneficiary::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<FFPBeneficiary, Long>)FFPBeneficiary::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedDate", FFPBeneficiary::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FFPBeneficiary, Date>)FFPBeneficiary::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getBeneficiaryId() {
		return _beneficiaryId;
	}

	@Override
	public void setBeneficiaryId(long beneficiaryId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_beneficiaryId = beneficiaryId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalBeneficiaryId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("beneficiaryId"));
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@JSON
	@Override
	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return "";
		}
		else {
			return _mobileNumber;
		}
	}

	@Override
	public void setMobileNumber(String mobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNumber = mobileNumber;
	}

	@JSON
	@Override
	public long getNationalId() {
		return _nationalId;
	}

	@Override
	public void setNationalId(long nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalNationalId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("nationalId"));
	}

	@JSON
	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@JSON
	@Override
	public String getCardNumber() {
		if (_cardNumber == null) {
			return "";
		}
		else {
			return _cardNumber;
		}
	}

	@Override
	public void setCardNumber(String cardNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_cardNumber = cardNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalCardNumber() {
		return getColumnOriginalValue("cardNumber");
	}

	@JSON
	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public Date getOriginalDateOfBirth() {
		return getColumnOriginalValue("dateOfBirth");
	}

	@JSON
	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@JSON
	@Override
	public String getFatherName() {
		if (_fatherName == null) {
			return "";
		}
		else {
			return _fatherName;
		}
	}

	@Override
	public void setFatherName(String fatherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fatherName = fatherName;
	}

	@JSON
	@Override
	public String getMotherName() {
		if (_motherName == null) {
			return "";
		}
		else {
			return _motherName;
		}
	}

	@Override
	public void setMotherName(String motherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_motherName = motherName;
	}

	@JSON
	@Override
	public int getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(int maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@JSON
	@Override
	public String getSpouseName() {
		if (_spouseName == null) {
			return "";
		}
		else {
			return _spouseName;
		}
	}

	@Override
	public void setSpouseName(String spouseName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseName = spouseName;
	}

	@JSON
	@Override
	public String getSpouseFatherName() {
		if (_spouseFatherName == null) {
			return "";
		}
		else {
			return _spouseFatherName;
		}
	}

	@Override
	public void setSpouseFatherName(String spouseFatherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseFatherName = spouseFatherName;
	}

	@JSON
	@Override
	public Date getSpouseDateOfBirth() {
		return _spouseDateOfBirth;
	}

	@Override
	public void setSpouseDateOfBirth(Date spouseDateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseDateOfBirth = spouseDateOfBirth;
	}

	@JSON
	@Override
	public long getSpouseNationalId() {
		return _spouseNationalId;
	}

	@Override
	public void setSpouseNationalId(long spouseNationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_spouseNationalId = spouseNationalId;
	}

	@JSON
	@Override
	public String getFamilyAverageMonthlyIncome() {
		if (_familyAverageMonthlyIncome == null) {
			return "";
		}
		else {
			return _familyAverageMonthlyIncome;
		}
	}

	@Override
	public void setFamilyAverageMonthlyIncome(
		String familyAverageMonthlyIncome) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyAverageMonthlyIncome = familyAverageMonthlyIncome;
	}

	@JSON
	@Override
	public int getFamilyEarningMembers() {
		return _familyEarningMembers;
	}

	@Override
	public void setFamilyEarningMembers(int familyEarningMembers) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_familyEarningMembers = familyEarningMembers;
	}

	@JSON
	@Override
	public boolean getAcknowledge() {
		return _acknowledge;
	}

	@JSON
	@Override
	public boolean isAcknowledge() {
		return _acknowledge;
	}

	@Override
	public void setAcknowledge(boolean acknowledge) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_acknowledge = acknowledge;
	}

	@JSON
	@Override
	public boolean getNonOfMyFamilyMembersRegistered() {
		return _nonOfMyFamilyMembersRegistered;
	}

	@JSON
	@Override
	public boolean isNonOfMyFamilyMembersRegistered() {
		return _nonOfMyFamilyMembersRegistered;
	}

	@Override
	public void setNonOfMyFamilyMembersRegistered(
		boolean nonOfMyFamilyMembersRegistered) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nonOfMyFamilyMembersRegistered = nonOfMyFamilyMembersRegistered;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(FFPBeneficiary.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FFPBeneficiary.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FFPBeneficiary toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FFPBeneficiary>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FFPBeneficiaryImpl ffpBeneficiaryImpl = new FFPBeneficiaryImpl();

		ffpBeneficiaryImpl.setUuid(getUuid());
		ffpBeneficiaryImpl.setBeneficiaryId(getBeneficiaryId());
		ffpBeneficiaryImpl.setGroupId(getGroupId());
		ffpBeneficiaryImpl.setCompanyId(getCompanyId());
		ffpBeneficiaryImpl.setVersion(getVersion());
		ffpBeneficiaryImpl.setName(getName());
		ffpBeneficiaryImpl.setMobileNumber(getMobileNumber());
		ffpBeneficiaryImpl.setNationalId(getNationalId());
		ffpBeneficiaryImpl.setEmailAddress(getEmailAddress());
		ffpBeneficiaryImpl.setCardNumber(getCardNumber());
		ffpBeneficiaryImpl.setDateOfBirth(getDateOfBirth());
		ffpBeneficiaryImpl.setGender(getGender());
		ffpBeneficiaryImpl.setFatherName(getFatherName());
		ffpBeneficiaryImpl.setMotherName(getMotherName());
		ffpBeneficiaryImpl.setMaritalStatus(getMaritalStatus());
		ffpBeneficiaryImpl.setSpouseName(getSpouseName());
		ffpBeneficiaryImpl.setSpouseFatherName(getSpouseFatherName());
		ffpBeneficiaryImpl.setSpouseDateOfBirth(getSpouseDateOfBirth());
		ffpBeneficiaryImpl.setSpouseNationalId(getSpouseNationalId());
		ffpBeneficiaryImpl.setFamilyAverageMonthlyIncome(
			getFamilyAverageMonthlyIncome());
		ffpBeneficiaryImpl.setFamilyEarningMembers(getFamilyEarningMembers());
		ffpBeneficiaryImpl.setAcknowledge(isAcknowledge());
		ffpBeneficiaryImpl.setNonOfMyFamilyMembersRegistered(
			isNonOfMyFamilyMembersRegistered());
		ffpBeneficiaryImpl.setStatus(getStatus());
		ffpBeneficiaryImpl.setStatusByUserId(getStatusByUserId());
		ffpBeneficiaryImpl.setStatusDate(getStatusDate());
		ffpBeneficiaryImpl.setCreatedBy(getCreatedBy());
		ffpBeneficiaryImpl.setCreateDate(getCreateDate());
		ffpBeneficiaryImpl.setModifiedBy(getModifiedBy());
		ffpBeneficiaryImpl.setModifiedDate(getModifiedDate());

		ffpBeneficiaryImpl.resetOriginalValues();

		return ffpBeneficiaryImpl;
	}

	@Override
	public FFPBeneficiary cloneWithOriginalValues() {
		FFPBeneficiaryImpl ffpBeneficiaryImpl = new FFPBeneficiaryImpl();

		ffpBeneficiaryImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		ffpBeneficiaryImpl.setBeneficiaryId(
			this.<Long>getColumnOriginalValue("beneficiaryId"));
		ffpBeneficiaryImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		ffpBeneficiaryImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		ffpBeneficiaryImpl.setVersion(
			this.<Double>getColumnOriginalValue("version"));
		ffpBeneficiaryImpl.setName(this.<String>getColumnOriginalValue("name"));
		ffpBeneficiaryImpl.setMobileNumber(
			this.<String>getColumnOriginalValue("mobileNumber"));
		ffpBeneficiaryImpl.setNationalId(
			this.<Long>getColumnOriginalValue("nationalId"));
		ffpBeneficiaryImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		ffpBeneficiaryImpl.setCardNumber(
			this.<String>getColumnOriginalValue("cardNumber"));
		ffpBeneficiaryImpl.setDateOfBirth(
			this.<Date>getColumnOriginalValue("dateOfBirth"));
		ffpBeneficiaryImpl.setGender(
			this.<Integer>getColumnOriginalValue("gender"));
		ffpBeneficiaryImpl.setFatherName(
			this.<String>getColumnOriginalValue("fatherName"));
		ffpBeneficiaryImpl.setMotherName(
			this.<String>getColumnOriginalValue("motherName"));
		ffpBeneficiaryImpl.setMaritalStatus(
			this.<Integer>getColumnOriginalValue("maritalStatus"));
		ffpBeneficiaryImpl.setSpouseName(
			this.<String>getColumnOriginalValue("spouseName"));
		ffpBeneficiaryImpl.setSpouseFatherName(
			this.<String>getColumnOriginalValue("spouseFatherName"));
		ffpBeneficiaryImpl.setSpouseDateOfBirth(
			this.<Date>getColumnOriginalValue("spouseDateOfBirth"));
		ffpBeneficiaryImpl.setSpouseNationalId(
			this.<Long>getColumnOriginalValue("spouseNationalId"));
		ffpBeneficiaryImpl.setFamilyAverageMonthlyIncome(
			this.<String>getColumnOriginalValue("familyAverageMonthlyIncome"));
		ffpBeneficiaryImpl.setFamilyEarningMembers(
			this.<Integer>getColumnOriginalValue("familyEarningMembers"));
		ffpBeneficiaryImpl.setAcknowledge(
			this.<Boolean>getColumnOriginalValue("acknowledge"));
		ffpBeneficiaryImpl.setNonOfMyFamilyMembersRegistered(
			this.<Boolean>getColumnOriginalValue(
				"nonOfMyFamilyMembersRegistered"));
		ffpBeneficiaryImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		ffpBeneficiaryImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		ffpBeneficiaryImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		ffpBeneficiaryImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		ffpBeneficiaryImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		ffpBeneficiaryImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		ffpBeneficiaryImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return ffpBeneficiaryImpl;
	}

	@Override
	public int compareTo(FFPBeneficiary ffpBeneficiary) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), ffpBeneficiary.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FFPBeneficiary)) {
			return false;
		}

		FFPBeneficiary ffpBeneficiary = (FFPBeneficiary)object;

		long primaryKey = ffpBeneficiary.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FFPBeneficiary> toCacheModel() {
		FFPBeneficiaryCacheModel ffpBeneficiaryCacheModel =
			new FFPBeneficiaryCacheModel();

		ffpBeneficiaryCacheModel.uuid = getUuid();

		String uuid = ffpBeneficiaryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ffpBeneficiaryCacheModel.uuid = null;
		}

		ffpBeneficiaryCacheModel.beneficiaryId = getBeneficiaryId();

		ffpBeneficiaryCacheModel.groupId = getGroupId();

		ffpBeneficiaryCacheModel.companyId = getCompanyId();

		ffpBeneficiaryCacheModel.version = getVersion();

		ffpBeneficiaryCacheModel.name = getName();

		String name = ffpBeneficiaryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			ffpBeneficiaryCacheModel.name = null;
		}

		ffpBeneficiaryCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = ffpBeneficiaryCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			ffpBeneficiaryCacheModel.mobileNumber = null;
		}

		ffpBeneficiaryCacheModel.nationalId = getNationalId();

		ffpBeneficiaryCacheModel.emailAddress = getEmailAddress();

		String emailAddress = ffpBeneficiaryCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			ffpBeneficiaryCacheModel.emailAddress = null;
		}

		ffpBeneficiaryCacheModel.cardNumber = getCardNumber();

		String cardNumber = ffpBeneficiaryCacheModel.cardNumber;

		if ((cardNumber != null) && (cardNumber.length() == 0)) {
			ffpBeneficiaryCacheModel.cardNumber = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			ffpBeneficiaryCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			ffpBeneficiaryCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		ffpBeneficiaryCacheModel.gender = getGender();

		ffpBeneficiaryCacheModel.fatherName = getFatherName();

		String fatherName = ffpBeneficiaryCacheModel.fatherName;

		if ((fatherName != null) && (fatherName.length() == 0)) {
			ffpBeneficiaryCacheModel.fatherName = null;
		}

		ffpBeneficiaryCacheModel.motherName = getMotherName();

		String motherName = ffpBeneficiaryCacheModel.motherName;

		if ((motherName != null) && (motherName.length() == 0)) {
			ffpBeneficiaryCacheModel.motherName = null;
		}

		ffpBeneficiaryCacheModel.maritalStatus = getMaritalStatus();

		ffpBeneficiaryCacheModel.spouseName = getSpouseName();

		String spouseName = ffpBeneficiaryCacheModel.spouseName;

		if ((spouseName != null) && (spouseName.length() == 0)) {
			ffpBeneficiaryCacheModel.spouseName = null;
		}

		ffpBeneficiaryCacheModel.spouseFatherName = getSpouseFatherName();

		String spouseFatherName = ffpBeneficiaryCacheModel.spouseFatherName;

		if ((spouseFatherName != null) && (spouseFatherName.length() == 0)) {
			ffpBeneficiaryCacheModel.spouseFatherName = null;
		}

		Date spouseDateOfBirth = getSpouseDateOfBirth();

		if (spouseDateOfBirth != null) {
			ffpBeneficiaryCacheModel.spouseDateOfBirth =
				spouseDateOfBirth.getTime();
		}
		else {
			ffpBeneficiaryCacheModel.spouseDateOfBirth = Long.MIN_VALUE;
		}

		ffpBeneficiaryCacheModel.spouseNationalId = getSpouseNationalId();

		ffpBeneficiaryCacheModel.familyAverageMonthlyIncome =
			getFamilyAverageMonthlyIncome();

		String familyAverageMonthlyIncome =
			ffpBeneficiaryCacheModel.familyAverageMonthlyIncome;

		if ((familyAverageMonthlyIncome != null) &&
			(familyAverageMonthlyIncome.length() == 0)) {

			ffpBeneficiaryCacheModel.familyAverageMonthlyIncome = null;
		}

		ffpBeneficiaryCacheModel.familyEarningMembers =
			getFamilyEarningMembers();

		ffpBeneficiaryCacheModel.acknowledge = isAcknowledge();

		ffpBeneficiaryCacheModel.nonOfMyFamilyMembersRegistered =
			isNonOfMyFamilyMembersRegistered();

		ffpBeneficiaryCacheModel.status = getStatus();

		ffpBeneficiaryCacheModel.statusByUserId = getStatusByUserId();

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			ffpBeneficiaryCacheModel.statusDate = statusDate.getTime();
		}
		else {
			ffpBeneficiaryCacheModel.statusDate = Long.MIN_VALUE;
		}

		ffpBeneficiaryCacheModel.createdBy = getCreatedBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			ffpBeneficiaryCacheModel.createDate = createDate.getTime();
		}
		else {
			ffpBeneficiaryCacheModel.createDate = Long.MIN_VALUE;
		}

		ffpBeneficiaryCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ffpBeneficiaryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ffpBeneficiaryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return ffpBeneficiaryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FFPBeneficiary, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FFPBeneficiary, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FFPBeneficiary, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FFPBeneficiary)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FFPBeneficiary, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FFPBeneficiary, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FFPBeneficiary, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FFPBeneficiary)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FFPBeneficiary>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FFPBeneficiary.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _beneficiaryId;
	private long _groupId;
	private long _companyId;
	private double _version;
	private String _name;
	private String _mobileNumber;
	private long _nationalId;
	private String _emailAddress;
	private String _cardNumber;
	private Date _dateOfBirth;
	private int _gender;
	private String _fatherName;
	private String _motherName;
	private int _maritalStatus;
	private String _spouseName;
	private String _spouseFatherName;
	private Date _spouseDateOfBirth;
	private long _spouseNationalId;
	private String _familyAverageMonthlyIncome;
	private int _familyEarningMembers;
	private boolean _acknowledge;
	private boolean _nonOfMyFamilyMembersRegistered;
	private int _status;
	private long _statusByUserId;
	private Date _statusDate;
	private long _createdBy;
	private Date _createDate;
	private long _modifiedBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FFPBeneficiary, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FFPBeneficiary)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("beneficiaryId", _beneficiaryId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("mobileNumber", _mobileNumber);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("cardNumber", _cardNumber);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("fatherName", _fatherName);
		_columnOriginalValues.put("motherName", _motherName);
		_columnOriginalValues.put("maritalStatus", _maritalStatus);
		_columnOriginalValues.put("spouseName", _spouseName);
		_columnOriginalValues.put("spouseFatherName", _spouseFatherName);
		_columnOriginalValues.put("spouseDateOfBirth", _spouseDateOfBirth);
		_columnOriginalValues.put("spouseNationalId", _spouseNationalId);
		_columnOriginalValues.put(
			"familyAverageMonthlyIncome", _familyAverageMonthlyIncome);
		_columnOriginalValues.put(
			"familyEarningMembers", _familyEarningMembers);
		_columnOriginalValues.put("acknowledge", _acknowledge);
		_columnOriginalValues.put(
			"nonOfMyFamilyMembersRegistered", _nonOfMyFamilyMembersRegistered);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("beneficiaryId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("version", 16L);

		columnBitmasks.put("name", 32L);

		columnBitmasks.put("mobileNumber", 64L);

		columnBitmasks.put("nationalId", 128L);

		columnBitmasks.put("emailAddress", 256L);

		columnBitmasks.put("cardNumber", 512L);

		columnBitmasks.put("dateOfBirth", 1024L);

		columnBitmasks.put("gender", 2048L);

		columnBitmasks.put("fatherName", 4096L);

		columnBitmasks.put("motherName", 8192L);

		columnBitmasks.put("maritalStatus", 16384L);

		columnBitmasks.put("spouseName", 32768L);

		columnBitmasks.put("spouseFatherName", 65536L);

		columnBitmasks.put("spouseDateOfBirth", 131072L);

		columnBitmasks.put("spouseNationalId", 262144L);

		columnBitmasks.put("familyAverageMonthlyIncome", 524288L);

		columnBitmasks.put("familyEarningMembers", 1048576L);

		columnBitmasks.put("acknowledge", 2097152L);

		columnBitmasks.put("nonOfMyFamilyMembersRegistered", 4194304L);

		columnBitmasks.put("status", 8388608L);

		columnBitmasks.put("statusByUserId", 16777216L);

		columnBitmasks.put("statusDate", 33554432L);

		columnBitmasks.put("createdBy", 67108864L);

		columnBitmasks.put("createDate", 134217728L);

		columnBitmasks.put("modifiedBy", 268435456L);

		columnBitmasks.put("modifiedDate", 536870912L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FFPBeneficiary _escapedModel;

}