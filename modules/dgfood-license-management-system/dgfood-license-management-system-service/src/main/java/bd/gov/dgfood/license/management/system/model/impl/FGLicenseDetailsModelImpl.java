/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.license.management.system.model.impl;

import bd.gov.dgfood.license.management.system.model.FGLicenseDetails;
import bd.gov.dgfood.license.management.system.model.FGLicenseDetailsModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FGLicenseDetails service. Represents a row in the &quot;fgl_master_details&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FGLicenseDetailsModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FGLicenseDetailsImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FGLicenseDetailsImpl
 * @generated
 */
@JSON(strict = true)
public class FGLicenseDetailsModelImpl
	extends BaseModelImpl<FGLicenseDetails> implements FGLicenseDetailsModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fg license details model instance should use the <code>FGLicenseDetails</code> interface instead.
	 */
	public static final String TABLE_NAME = "fgl_master_details";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"fgLicenseMasterId", Types.BIGINT},
		{"nationalId", Types.VARCHAR}, {"applicationNumber", Types.VARCHAR},
		{"applicantName", Types.VARCHAR}, {"tradeLicenseNumber", Types.VARCHAR},
		{"tradeLicenseExpiryDate", Types.TIMESTAMP},
		{"tradeLicenseIssuerCode", Types.VARCHAR},
		{"tradeLicenseIssuerCity", Types.VARCHAR},
		{"businessIdentificationNumber", Types.VARCHAR},
		{"taxIdentificationNumber", Types.VARCHAR},
		{"paymentChallanId", Types.BIGINT}, {"tradeLicenseDocId", Types.BIGINT},
		{"businessIdentificationDocId", Types.BIGINT},
		{"taxIdentfctDocId", Types.BIGINT},
		{"bankStatementDocId", Types.BIGINT}, {"reviewComments", Types.VARCHAR},
		{"comments", Types.VARCHAR},
		{"duplicateLicenseReasonId", Types.VARCHAR},
		{"applicationType", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fgLicenseMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("tradeLicenseIssuerCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseIssuerCity", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessIdentificationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("taxIdentificationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("paymentChallanId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("tradeLicenseDocId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("businessIdentificationDocId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("taxIdentfctDocId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("bankStatementDocId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("reviewComments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("comments", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("duplicateLicenseReasonId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationType", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table fgl_master_details (uuid_ VARCHAR(75) null,fgLicenseMasterId LONG not null primary key,nationalId VARCHAR(75) null,applicationNumber VARCHAR(75) null,applicantName VARCHAR(75) null,tradeLicenseNumber VARCHAR(75) null,tradeLicenseExpiryDate DATE null,tradeLicenseIssuerCode VARCHAR(75) null,tradeLicenseIssuerCity VARCHAR(75) null,businessIdentificationNumber VARCHAR(75) null,taxIdentificationNumber VARCHAR(75) null,paymentChallanId LONG,tradeLicenseDocId LONG,businessIdentificationDocId LONG,taxIdentfctDocId LONG,bankStatementDocId LONG,reviewComments VARCHAR(75) null,comments VARCHAR(75) null,duplicateLicenseReasonId VARCHAR(75) null,applicationType VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table fgl_master_details";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fgLicenseDetails.fgLicenseMasterId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY fgl_master_details.fgLicenseMasterId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLICENSEMASTERID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FGLicenseDetailsModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fgLicenseMasterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFgLicenseMasterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fgLicenseMasterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FGLicenseDetails.class;
	}

	@Override
	public String getModelClassName() {
		return FGLicenseDetails.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FGLicenseDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FGLicenseDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseDetails, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FGLicenseDetails)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FGLicenseDetails, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FGLicenseDetails, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FGLicenseDetails)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FGLicenseDetails, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FGLicenseDetails, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FGLicenseDetails, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FGLicenseDetails, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FGLicenseDetails, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<FGLicenseDetails, Object>>();
		Map<String, BiConsumer<FGLicenseDetails, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FGLicenseDetails, ?>>();

		attributeGetterFunctions.put("uuid", FGLicenseDetails::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FGLicenseDetails, String>)FGLicenseDetails::setUuid);
		attributeGetterFunctions.put(
			"fgLicenseMasterId", FGLicenseDetails::getFgLicenseMasterId);
		attributeSetterBiConsumers.put(
			"fgLicenseMasterId",
			(BiConsumer<FGLicenseDetails, Long>)
				FGLicenseDetails::setFgLicenseMasterId);
		attributeGetterFunctions.put(
			"nationalId", FGLicenseDetails::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setNationalId);
		attributeGetterFunctions.put(
			"applicationNumber", FGLicenseDetails::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setApplicationNumber);
		attributeGetterFunctions.put(
			"applicantName", FGLicenseDetails::getApplicantName);
		attributeSetterBiConsumers.put(
			"applicantName",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setApplicantName);
		attributeGetterFunctions.put(
			"tradeLicenseNumber", FGLicenseDetails::getTradeLicenseNumber);
		attributeSetterBiConsumers.put(
			"tradeLicenseNumber",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setTradeLicenseNumber);
		attributeGetterFunctions.put(
			"tradeLicenseExpiryDate",
			FGLicenseDetails::getTradeLicenseExpiryDate);
		attributeSetterBiConsumers.put(
			"tradeLicenseExpiryDate",
			(BiConsumer<FGLicenseDetails, Date>)
				FGLicenseDetails::setTradeLicenseExpiryDate);
		attributeGetterFunctions.put(
			"tradeLicenseIssuerCode",
			FGLicenseDetails::getTradeLicenseIssuerCode);
		attributeSetterBiConsumers.put(
			"tradeLicenseIssuerCode",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setTradeLicenseIssuerCode);
		attributeGetterFunctions.put(
			"tradeLicenseIssuerCity",
			FGLicenseDetails::getTradeLicenseIssuerCity);
		attributeSetterBiConsumers.put(
			"tradeLicenseIssuerCity",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setTradeLicenseIssuerCity);
		attributeGetterFunctions.put(
			"businessIdentificationNumber",
			FGLicenseDetails::getBusinessIdentificationNumber);
		attributeSetterBiConsumers.put(
			"businessIdentificationNumber",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setBusinessIdentificationNumber);
		attributeGetterFunctions.put(
			"taxIdentificationNumber",
			FGLicenseDetails::getTaxIdentificationNumber);
		attributeSetterBiConsumers.put(
			"taxIdentificationNumber",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setTaxIdentificationNumber);
		attributeGetterFunctions.put(
			"paymentChallanId", FGLicenseDetails::getPaymentChallanId);
		attributeSetterBiConsumers.put(
			"paymentChallanId",
			(BiConsumer<FGLicenseDetails, Long>)
				FGLicenseDetails::setPaymentChallanId);
		attributeGetterFunctions.put(
			"tradeLicenseDocId", FGLicenseDetails::getTradeLicenseDocId);
		attributeSetterBiConsumers.put(
			"tradeLicenseDocId",
			(BiConsumer<FGLicenseDetails, Long>)
				FGLicenseDetails::setTradeLicenseDocId);
		attributeGetterFunctions.put(
			"businessIdentificationDocId",
			FGLicenseDetails::getBusinessIdentificationDocId);
		attributeSetterBiConsumers.put(
			"businessIdentificationDocId",
			(BiConsumer<FGLicenseDetails, Long>)
				FGLicenseDetails::setBusinessIdentificationDocId);
		attributeGetterFunctions.put(
			"taxIdentfctDocId", FGLicenseDetails::getTaxIdentfctDocId);
		attributeSetterBiConsumers.put(
			"taxIdentfctDocId",
			(BiConsumer<FGLicenseDetails, Long>)
				FGLicenseDetails::setTaxIdentfctDocId);
		attributeGetterFunctions.put(
			"bankStatementDocId", FGLicenseDetails::getBankStatementDocId);
		attributeSetterBiConsumers.put(
			"bankStatementDocId",
			(BiConsumer<FGLicenseDetails, Long>)
				FGLicenseDetails::setBankStatementDocId);
		attributeGetterFunctions.put(
			"reviewComments", FGLicenseDetails::getReviewComments);
		attributeSetterBiConsumers.put(
			"reviewComments",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setReviewComments);
		attributeGetterFunctions.put("comments", FGLicenseDetails::getComments);
		attributeSetterBiConsumers.put(
			"comments",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setComments);
		attributeGetterFunctions.put(
			"duplicateLicenseReasonId",
			FGLicenseDetails::getDuplicateLicenseReasonId);
		attributeSetterBiConsumers.put(
			"duplicateLicenseReasonId",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setDuplicateLicenseReasonId);
		attributeGetterFunctions.put(
			"applicationType", FGLicenseDetails::getApplicationType);
		attributeSetterBiConsumers.put(
			"applicationType",
			(BiConsumer<FGLicenseDetails, String>)
				FGLicenseDetails::setApplicationType);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFgLicenseMasterId() {
		return _fgLicenseMasterId;
	}

	@Override
	public void setFgLicenseMasterId(long fgLicenseMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fgLicenseMasterId = fgLicenseMasterId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getTradeLicenseNumber() {
		if (_tradeLicenseNumber == null) {
			return "";
		}
		else {
			return _tradeLicenseNumber;
		}
	}

	@Override
	public void setTradeLicenseNumber(String tradeLicenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseNumber = tradeLicenseNumber;
	}

	@JSON
	@Override
	public Date getTradeLicenseExpiryDate() {
		return _tradeLicenseExpiryDate;
	}

	@Override
	public void setTradeLicenseExpiryDate(Date tradeLicenseExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseExpiryDate = tradeLicenseExpiryDate;
	}

	@JSON
	@Override
	public String getTradeLicenseIssuerCode() {
		if (_tradeLicenseIssuerCode == null) {
			return "";
		}
		else {
			return _tradeLicenseIssuerCode;
		}
	}

	@Override
	public void setTradeLicenseIssuerCode(String tradeLicenseIssuerCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseIssuerCode = tradeLicenseIssuerCode;
	}

	@JSON
	@Override
	public String getTradeLicenseIssuerCity() {
		if (_tradeLicenseIssuerCity == null) {
			return "";
		}
		else {
			return _tradeLicenseIssuerCity;
		}
	}

	@Override
	public void setTradeLicenseIssuerCity(String tradeLicenseIssuerCity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseIssuerCity = tradeLicenseIssuerCity;
	}

	@JSON
	@Override
	public String getBusinessIdentificationNumber() {
		if (_businessIdentificationNumber == null) {
			return "";
		}
		else {
			return _businessIdentificationNumber;
		}
	}

	@Override
	public void setBusinessIdentificationNumber(
		String businessIdentificationNumber) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessIdentificationNumber = businessIdentificationNumber;
	}

	@JSON
	@Override
	public String getTaxIdentificationNumber() {
		if (_taxIdentificationNumber == null) {
			return "";
		}
		else {
			return _taxIdentificationNumber;
		}
	}

	@Override
	public void setTaxIdentificationNumber(String taxIdentificationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taxIdentificationNumber = taxIdentificationNumber;
	}

	@JSON
	@Override
	public long getPaymentChallanId() {
		return _paymentChallanId;
	}

	@Override
	public void setPaymentChallanId(long paymentChallanId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentChallanId = paymentChallanId;
	}

	@JSON
	@Override
	public long getTradeLicenseDocId() {
		return _tradeLicenseDocId;
	}

	@Override
	public void setTradeLicenseDocId(long tradeLicenseDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseDocId = tradeLicenseDocId;
	}

	@JSON
	@Override
	public long getBusinessIdentificationDocId() {
		return _businessIdentificationDocId;
	}

	@Override
	public void setBusinessIdentificationDocId(
		long businessIdentificationDocId) {

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessIdentificationDocId = businessIdentificationDocId;
	}

	@JSON
	@Override
	public long getTaxIdentfctDocId() {
		return _taxIdentfctDocId;
	}

	@Override
	public void setTaxIdentfctDocId(long taxIdentfctDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_taxIdentfctDocId = taxIdentfctDocId;
	}

	@JSON
	@Override
	public long getBankStatementDocId() {
		return _bankStatementDocId;
	}

	@Override
	public void setBankStatementDocId(long bankStatementDocId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bankStatementDocId = bankStatementDocId;
	}

	@JSON
	@Override
	public String getReviewComments() {
		if (_reviewComments == null) {
			return "";
		}
		else {
			return _reviewComments;
		}
	}

	@Override
	public void setReviewComments(String reviewComments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_reviewComments = reviewComments;
	}

	@JSON
	@Override
	public String getComments() {
		if (_comments == null) {
			return "";
		}
		else {
			return _comments;
		}
	}

	@Override
	public void setComments(String comments) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_comments = comments;
	}

	@JSON
	@Override
	public String getDuplicateLicenseReasonId() {
		if (_duplicateLicenseReasonId == null) {
			return "";
		}
		else {
			return _duplicateLicenseReasonId;
		}
	}

	@Override
	public void setDuplicateLicenseReasonId(String duplicateLicenseReasonId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_duplicateLicenseReasonId = duplicateLicenseReasonId;
	}

	@JSON
	@Override
	public String getApplicationType() {
		if (_applicationType == null) {
			return "";
		}
		else {
			return _applicationType;
		}
	}

	@Override
	public void setApplicationType(String applicationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationType = applicationType;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, FGLicenseDetails.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FGLicenseDetails toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FGLicenseDetails>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FGLicenseDetailsImpl fgLicenseDetailsImpl = new FGLicenseDetailsImpl();

		fgLicenseDetailsImpl.setUuid(getUuid());
		fgLicenseDetailsImpl.setFgLicenseMasterId(getFgLicenseMasterId());
		fgLicenseDetailsImpl.setNationalId(getNationalId());
		fgLicenseDetailsImpl.setApplicationNumber(getApplicationNumber());
		fgLicenseDetailsImpl.setApplicantName(getApplicantName());
		fgLicenseDetailsImpl.setTradeLicenseNumber(getTradeLicenseNumber());
		fgLicenseDetailsImpl.setTradeLicenseExpiryDate(
			getTradeLicenseExpiryDate());
		fgLicenseDetailsImpl.setTradeLicenseIssuerCode(
			getTradeLicenseIssuerCode());
		fgLicenseDetailsImpl.setTradeLicenseIssuerCity(
			getTradeLicenseIssuerCity());
		fgLicenseDetailsImpl.setBusinessIdentificationNumber(
			getBusinessIdentificationNumber());
		fgLicenseDetailsImpl.setTaxIdentificationNumber(
			getTaxIdentificationNumber());
		fgLicenseDetailsImpl.setPaymentChallanId(getPaymentChallanId());
		fgLicenseDetailsImpl.setTradeLicenseDocId(getTradeLicenseDocId());
		fgLicenseDetailsImpl.setBusinessIdentificationDocId(
			getBusinessIdentificationDocId());
		fgLicenseDetailsImpl.setTaxIdentfctDocId(getTaxIdentfctDocId());
		fgLicenseDetailsImpl.setBankStatementDocId(getBankStatementDocId());
		fgLicenseDetailsImpl.setReviewComments(getReviewComments());
		fgLicenseDetailsImpl.setComments(getComments());
		fgLicenseDetailsImpl.setDuplicateLicenseReasonId(
			getDuplicateLicenseReasonId());
		fgLicenseDetailsImpl.setApplicationType(getApplicationType());

		fgLicenseDetailsImpl.resetOriginalValues();

		return fgLicenseDetailsImpl;
	}

	@Override
	public FGLicenseDetails cloneWithOriginalValues() {
		FGLicenseDetailsImpl fgLicenseDetailsImpl = new FGLicenseDetailsImpl();

		fgLicenseDetailsImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		fgLicenseDetailsImpl.setFgLicenseMasterId(
			this.<Long>getColumnOriginalValue("fgLicenseMasterId"));
		fgLicenseDetailsImpl.setNationalId(
			this.<String>getColumnOriginalValue("nationalId"));
		fgLicenseDetailsImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		fgLicenseDetailsImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		fgLicenseDetailsImpl.setTradeLicenseNumber(
			this.<String>getColumnOriginalValue("tradeLicenseNumber"));
		fgLicenseDetailsImpl.setTradeLicenseExpiryDate(
			this.<Date>getColumnOriginalValue("tradeLicenseExpiryDate"));
		fgLicenseDetailsImpl.setTradeLicenseIssuerCode(
			this.<String>getColumnOriginalValue("tradeLicenseIssuerCode"));
		fgLicenseDetailsImpl.setTradeLicenseIssuerCity(
			this.<String>getColumnOriginalValue("tradeLicenseIssuerCity"));
		fgLicenseDetailsImpl.setBusinessIdentificationNumber(
			this.<String>getColumnOriginalValue(
				"businessIdentificationNumber"));
		fgLicenseDetailsImpl.setTaxIdentificationNumber(
			this.<String>getColumnOriginalValue("taxIdentificationNumber"));
		fgLicenseDetailsImpl.setPaymentChallanId(
			this.<Long>getColumnOriginalValue("paymentChallanId"));
		fgLicenseDetailsImpl.setTradeLicenseDocId(
			this.<Long>getColumnOriginalValue("tradeLicenseDocId"));
		fgLicenseDetailsImpl.setBusinessIdentificationDocId(
			this.<Long>getColumnOriginalValue("businessIdentificationDocId"));
		fgLicenseDetailsImpl.setTaxIdentfctDocId(
			this.<Long>getColumnOriginalValue("taxIdentfctDocId"));
		fgLicenseDetailsImpl.setBankStatementDocId(
			this.<Long>getColumnOriginalValue("bankStatementDocId"));
		fgLicenseDetailsImpl.setReviewComments(
			this.<String>getColumnOriginalValue("reviewComments"));
		fgLicenseDetailsImpl.setComments(
			this.<String>getColumnOriginalValue("comments"));
		fgLicenseDetailsImpl.setDuplicateLicenseReasonId(
			this.<String>getColumnOriginalValue("duplicateLicenseReasonId"));
		fgLicenseDetailsImpl.setApplicationType(
			this.<String>getColumnOriginalValue("applicationType"));

		return fgLicenseDetailsImpl;
	}

	@Override
	public int compareTo(FGLicenseDetails fgLicenseDetails) {
		long primaryKey = fgLicenseDetails.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FGLicenseDetails)) {
			return false;
		}

		FGLicenseDetails fgLicenseDetails = (FGLicenseDetails)object;

		long primaryKey = fgLicenseDetails.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FGLicenseDetails> toCacheModel() {
		FGLicenseDetailsCacheModel fgLicenseDetailsCacheModel =
			new FGLicenseDetailsCacheModel();

		fgLicenseDetailsCacheModel.uuid = getUuid();

		String uuid = fgLicenseDetailsCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fgLicenseDetailsCacheModel.uuid = null;
		}

		fgLicenseDetailsCacheModel.fgLicenseMasterId = getFgLicenseMasterId();

		fgLicenseDetailsCacheModel.nationalId = getNationalId();

		String nationalId = fgLicenseDetailsCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			fgLicenseDetailsCacheModel.nationalId = null;
		}

		fgLicenseDetailsCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber = fgLicenseDetailsCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			fgLicenseDetailsCacheModel.applicationNumber = null;
		}

		fgLicenseDetailsCacheModel.applicantName = getApplicantName();

		String applicantName = fgLicenseDetailsCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			fgLicenseDetailsCacheModel.applicantName = null;
		}

		fgLicenseDetailsCacheModel.tradeLicenseNumber = getTradeLicenseNumber();

		String tradeLicenseNumber =
			fgLicenseDetailsCacheModel.tradeLicenseNumber;

		if ((tradeLicenseNumber != null) &&
			(tradeLicenseNumber.length() == 0)) {

			fgLicenseDetailsCacheModel.tradeLicenseNumber = null;
		}

		Date tradeLicenseExpiryDate = getTradeLicenseExpiryDate();

		if (tradeLicenseExpiryDate != null) {
			fgLicenseDetailsCacheModel.tradeLicenseExpiryDate =
				tradeLicenseExpiryDate.getTime();
		}
		else {
			fgLicenseDetailsCacheModel.tradeLicenseExpiryDate = Long.MIN_VALUE;
		}

		fgLicenseDetailsCacheModel.tradeLicenseIssuerCode =
			getTradeLicenseIssuerCode();

		String tradeLicenseIssuerCode =
			fgLicenseDetailsCacheModel.tradeLicenseIssuerCode;

		if ((tradeLicenseIssuerCode != null) &&
			(tradeLicenseIssuerCode.length() == 0)) {

			fgLicenseDetailsCacheModel.tradeLicenseIssuerCode = null;
		}

		fgLicenseDetailsCacheModel.tradeLicenseIssuerCity =
			getTradeLicenseIssuerCity();

		String tradeLicenseIssuerCity =
			fgLicenseDetailsCacheModel.tradeLicenseIssuerCity;

		if ((tradeLicenseIssuerCity != null) &&
			(tradeLicenseIssuerCity.length() == 0)) {

			fgLicenseDetailsCacheModel.tradeLicenseIssuerCity = null;
		}

		fgLicenseDetailsCacheModel.businessIdentificationNumber =
			getBusinessIdentificationNumber();

		String businessIdentificationNumber =
			fgLicenseDetailsCacheModel.businessIdentificationNumber;

		if ((businessIdentificationNumber != null) &&
			(businessIdentificationNumber.length() == 0)) {

			fgLicenseDetailsCacheModel.businessIdentificationNumber = null;
		}

		fgLicenseDetailsCacheModel.taxIdentificationNumber =
			getTaxIdentificationNumber();

		String taxIdentificationNumber =
			fgLicenseDetailsCacheModel.taxIdentificationNumber;

		if ((taxIdentificationNumber != null) &&
			(taxIdentificationNumber.length() == 0)) {

			fgLicenseDetailsCacheModel.taxIdentificationNumber = null;
		}

		fgLicenseDetailsCacheModel.paymentChallanId = getPaymentChallanId();

		fgLicenseDetailsCacheModel.tradeLicenseDocId = getTradeLicenseDocId();

		fgLicenseDetailsCacheModel.businessIdentificationDocId =
			getBusinessIdentificationDocId();

		fgLicenseDetailsCacheModel.taxIdentfctDocId = getTaxIdentfctDocId();

		fgLicenseDetailsCacheModel.bankStatementDocId = getBankStatementDocId();

		fgLicenseDetailsCacheModel.reviewComments = getReviewComments();

		String reviewComments = fgLicenseDetailsCacheModel.reviewComments;

		if ((reviewComments != null) && (reviewComments.length() == 0)) {
			fgLicenseDetailsCacheModel.reviewComments = null;
		}

		fgLicenseDetailsCacheModel.comments = getComments();

		String comments = fgLicenseDetailsCacheModel.comments;

		if ((comments != null) && (comments.length() == 0)) {
			fgLicenseDetailsCacheModel.comments = null;
		}

		fgLicenseDetailsCacheModel.duplicateLicenseReasonId =
			getDuplicateLicenseReasonId();

		String duplicateLicenseReasonId =
			fgLicenseDetailsCacheModel.duplicateLicenseReasonId;

		if ((duplicateLicenseReasonId != null) &&
			(duplicateLicenseReasonId.length() == 0)) {

			fgLicenseDetailsCacheModel.duplicateLicenseReasonId = null;
		}

		fgLicenseDetailsCacheModel.applicationType = getApplicationType();

		String applicationType = fgLicenseDetailsCacheModel.applicationType;

		if ((applicationType != null) && (applicationType.length() == 0)) {
			fgLicenseDetailsCacheModel.applicationType = null;
		}

		return fgLicenseDetailsCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FGLicenseDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FGLicenseDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FGLicenseDetails)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FGLicenseDetails, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FGLicenseDetails, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseDetails, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FGLicenseDetails)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FGLicenseDetails>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FGLicenseDetails.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _fgLicenseMasterId;
	private String _nationalId;
	private String _applicationNumber;
	private String _applicantName;
	private String _tradeLicenseNumber;
	private Date _tradeLicenseExpiryDate;
	private String _tradeLicenseIssuerCode;
	private String _tradeLicenseIssuerCity;
	private String _businessIdentificationNumber;
	private String _taxIdentificationNumber;
	private long _paymentChallanId;
	private long _tradeLicenseDocId;
	private long _businessIdentificationDocId;
	private long _taxIdentfctDocId;
	private long _bankStatementDocId;
	private String _reviewComments;
	private String _comments;
	private String _duplicateLicenseReasonId;
	private String _applicationType;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FGLicenseDetails, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FGLicenseDetails)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("fgLicenseMasterId", _fgLicenseMasterId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("tradeLicenseNumber", _tradeLicenseNumber);
		_columnOriginalValues.put(
			"tradeLicenseExpiryDate", _tradeLicenseExpiryDate);
		_columnOriginalValues.put(
			"tradeLicenseIssuerCode", _tradeLicenseIssuerCode);
		_columnOriginalValues.put(
			"tradeLicenseIssuerCity", _tradeLicenseIssuerCity);
		_columnOriginalValues.put(
			"businessIdentificationNumber", _businessIdentificationNumber);
		_columnOriginalValues.put(
			"taxIdentificationNumber", _taxIdentificationNumber);
		_columnOriginalValues.put("paymentChallanId", _paymentChallanId);
		_columnOriginalValues.put("tradeLicenseDocId", _tradeLicenseDocId);
		_columnOriginalValues.put(
			"businessIdentificationDocId", _businessIdentificationDocId);
		_columnOriginalValues.put("taxIdentfctDocId", _taxIdentfctDocId);
		_columnOriginalValues.put("bankStatementDocId", _bankStatementDocId);
		_columnOriginalValues.put("reviewComments", _reviewComments);
		_columnOriginalValues.put("comments", _comments);
		_columnOriginalValues.put(
			"duplicateLicenseReasonId", _duplicateLicenseReasonId);
		_columnOriginalValues.put("applicationType", _applicationType);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("fgLicenseMasterId", 2L);

		columnBitmasks.put("nationalId", 4L);

		columnBitmasks.put("applicationNumber", 8L);

		columnBitmasks.put("applicantName", 16L);

		columnBitmasks.put("tradeLicenseNumber", 32L);

		columnBitmasks.put("tradeLicenseExpiryDate", 64L);

		columnBitmasks.put("tradeLicenseIssuerCode", 128L);

		columnBitmasks.put("tradeLicenseIssuerCity", 256L);

		columnBitmasks.put("businessIdentificationNumber", 512L);

		columnBitmasks.put("taxIdentificationNumber", 1024L);

		columnBitmasks.put("paymentChallanId", 2048L);

		columnBitmasks.put("tradeLicenseDocId", 4096L);

		columnBitmasks.put("businessIdentificationDocId", 8192L);

		columnBitmasks.put("taxIdentfctDocId", 16384L);

		columnBitmasks.put("bankStatementDocId", 32768L);

		columnBitmasks.put("reviewComments", 65536L);

		columnBitmasks.put("comments", 131072L);

		columnBitmasks.put("duplicateLicenseReasonId", 262144L);

		columnBitmasks.put("applicationType", 524288L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FGLicenseDetails _escapedModel;

}