/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.license.management.system.model.impl;

import bd.gov.dgfood.license.management.system.model.FGLicenseInfo;
import bd.gov.dgfood.license.management.system.model.FGLicenseInfoModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FGLicenseInfo service. Represents a row in the &quot;fgl_master_info&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FGLicenseInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FGLicenseInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FGLicenseInfoImpl
 * @generated
 */
@JSON(strict = true)
public class FGLicenseInfoModelImpl
	extends BaseModelImpl<FGLicenseInfo> implements FGLicenseInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fg license info model instance should use the <code>FGLicenseInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "fgl_master_info";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"fgLicenseInfoId", Types.BIGINT},
		{"fgLicenseMasterId", Types.BIGINT}, {"fgLicenseMDMId", Types.BIGINT},
		{"nationalId", Types.VARCHAR}, {"applicationNumber", Types.VARCHAR},
		{"applicantName", Types.VARCHAR}, {"tradeLicenseNumber", Types.VARCHAR},
		{"foodgrainLicenseNumber", Types.VARCHAR},
		{"foodgrainLicenseIssueDate", Types.TIMESTAMP},
		{"foodgrainLicenseExpiryDate", Types.TIMESTAMP},
		{"businessName", Types.VARCHAR}, {"businessType", Types.VARCHAR},
		{"businessAddressId", Types.BIGINT}, {"version", Types.DOUBLE},
		{"applicationType", Types.VARCHAR}, {"syncStatus", Types.BOOLEAN},
		{"isExpired", Types.BOOLEAN}, {"paymentChallanId", Types.BIGINT},
		{"division", Types.VARCHAR}, {"district", Types.VARCHAR},
		{"upazila", Types.VARCHAR}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusByUserName", Types.VARCHAR},
		{"statusDate", Types.TIMESTAMP}, {"groupId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}, {"modifiedBy", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fgLicenseInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fgLicenseMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fgLicenseMDMId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("nationalId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseIssueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("foodgrainLicenseExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("businessName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("businessAddressId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("applicationType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("syncStatus", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("isExpired", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("paymentChallanId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("division", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("district", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("upazila", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table fgl_master_info (uuid_ VARCHAR(75) null,fgLicenseInfoId LONG not null primary key,fgLicenseMasterId LONG,fgLicenseMDMId LONG,nationalId VARCHAR(75) null,applicationNumber VARCHAR(75) null,applicantName VARCHAR(75) null,tradeLicenseNumber VARCHAR(75) null,foodgrainLicenseNumber VARCHAR(75) null,foodgrainLicenseIssueDate DATE null,foodgrainLicenseExpiryDate DATE null,businessName VARCHAR(75) null,businessType VARCHAR(75) null,businessAddressId LONG,version DOUBLE,applicationType VARCHAR(75) null,syncStatus BOOLEAN,isExpired BOOLEAN,paymentChallanId LONG,division VARCHAR(75) null,district VARCHAR(75) null,upazila VARCHAR(75) null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,groupId LONG,companyId LONG,createDate DATE null,modifiedDate DATE null,modifiedBy LONG)";

	public static final String TABLE_SQL_DROP = "drop table fgl_master_info";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fgLicenseInfo.fgLicenseInfoId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY fgl_master_info.fgLicenseInfoId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long APPLICATIONNUMBER_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FOODGRAINLICENSENUMBER_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long NATIONALID_COLUMN_BITMASK = 16L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long STATUS_COLUMN_BITMASK = 32L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 64L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLICENSEINFOID_COLUMN_BITMASK = 128L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FGLicenseInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fgLicenseInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFgLicenseInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fgLicenseInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FGLicenseInfo.class;
	}

	@Override
	public String getModelClassName() {
		return FGLicenseInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FGLicenseInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FGLicenseInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FGLicenseInfo)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FGLicenseInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FGLicenseInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FGLicenseInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FGLicenseInfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FGLicenseInfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FGLicenseInfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FGLicenseInfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FGLicenseInfo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<FGLicenseInfo, Object>>();
		Map<String, BiConsumer<FGLicenseInfo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<FGLicenseInfo, ?>>();

		attributeGetterFunctions.put("uuid", FGLicenseInfo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setUuid);
		attributeGetterFunctions.put(
			"fgLicenseInfoId", FGLicenseInfo::getFgLicenseInfoId);
		attributeSetterBiConsumers.put(
			"fgLicenseInfoId",
			(BiConsumer<FGLicenseInfo, Long>)FGLicenseInfo::setFgLicenseInfoId);
		attributeGetterFunctions.put(
			"fgLicenseMasterId", FGLicenseInfo::getFgLicenseMasterId);
		attributeSetterBiConsumers.put(
			"fgLicenseMasterId",
			(BiConsumer<FGLicenseInfo, Long>)
				FGLicenseInfo::setFgLicenseMasterId);
		attributeGetterFunctions.put(
			"fgLicenseMDMId", FGLicenseInfo::getFgLicenseMDMId);
		attributeSetterBiConsumers.put(
			"fgLicenseMDMId",
			(BiConsumer<FGLicenseInfo, Long>)FGLicenseInfo::setFgLicenseMDMId);
		attributeGetterFunctions.put(
			"nationalId", FGLicenseInfo::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setNationalId);
		attributeGetterFunctions.put(
			"applicationNumber", FGLicenseInfo::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<FGLicenseInfo, String>)
				FGLicenseInfo::setApplicationNumber);
		attributeGetterFunctions.put(
			"applicantName", FGLicenseInfo::getApplicantName);
		attributeSetterBiConsumers.put(
			"applicantName",
			(BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setApplicantName);
		attributeGetterFunctions.put(
			"tradeLicenseNumber", FGLicenseInfo::getTradeLicenseNumber);
		attributeSetterBiConsumers.put(
			"tradeLicenseNumber",
			(BiConsumer<FGLicenseInfo, String>)
				FGLicenseInfo::setTradeLicenseNumber);
		attributeGetterFunctions.put(
			"foodgrainLicenseNumber", FGLicenseInfo::getFoodgrainLicenseNumber);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseNumber",
			(BiConsumer<FGLicenseInfo, String>)
				FGLicenseInfo::setFoodgrainLicenseNumber);
		attributeGetterFunctions.put(
			"foodgrainLicenseIssueDate",
			FGLicenseInfo::getFoodgrainLicenseIssueDate);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseIssueDate",
			(BiConsumer<FGLicenseInfo, Date>)
				FGLicenseInfo::setFoodgrainLicenseIssueDate);
		attributeGetterFunctions.put(
			"foodgrainLicenseExpiryDate",
			FGLicenseInfo::getFoodgrainLicenseExpiryDate);
		attributeSetterBiConsumers.put(
			"foodgrainLicenseExpiryDate",
			(BiConsumer<FGLicenseInfo, Date>)
				FGLicenseInfo::setFoodgrainLicenseExpiryDate);
		attributeGetterFunctions.put(
			"businessName", FGLicenseInfo::getBusinessName);
		attributeSetterBiConsumers.put(
			"businessName",
			(BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setBusinessName);
		attributeGetterFunctions.put(
			"businessType", FGLicenseInfo::getBusinessType);
		attributeSetterBiConsumers.put(
			"businessType",
			(BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setBusinessType);
		attributeGetterFunctions.put(
			"businessAddressId", FGLicenseInfo::getBusinessAddressId);
		attributeSetterBiConsumers.put(
			"businessAddressId",
			(BiConsumer<FGLicenseInfo, Long>)
				FGLicenseInfo::setBusinessAddressId);
		attributeGetterFunctions.put("version", FGLicenseInfo::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<FGLicenseInfo, Double>)FGLicenseInfo::setVersion);
		attributeGetterFunctions.put(
			"applicationType", FGLicenseInfo::getApplicationType);
		attributeSetterBiConsumers.put(
			"applicationType",
			(BiConsumer<FGLicenseInfo, String>)
				FGLicenseInfo::setApplicationType);
		attributeGetterFunctions.put(
			"syncStatus", FGLicenseInfo::getSyncStatus);
		attributeSetterBiConsumers.put(
			"syncStatus",
			(BiConsumer<FGLicenseInfo, Boolean>)FGLicenseInfo::setSyncStatus);
		attributeGetterFunctions.put("isExpired", FGLicenseInfo::getIsExpired);
		attributeSetterBiConsumers.put(
			"isExpired",
			(BiConsumer<FGLicenseInfo, Boolean>)FGLicenseInfo::setIsExpired);
		attributeGetterFunctions.put(
			"paymentChallanId", FGLicenseInfo::getPaymentChallanId);
		attributeSetterBiConsumers.put(
			"paymentChallanId",
			(BiConsumer<FGLicenseInfo, Long>)
				FGLicenseInfo::setPaymentChallanId);
		attributeGetterFunctions.put("division", FGLicenseInfo::getDivision);
		attributeSetterBiConsumers.put(
			"division",
			(BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setDivision);
		attributeGetterFunctions.put("district", FGLicenseInfo::getDistrict);
		attributeSetterBiConsumers.put(
			"district",
			(BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setDistrict);
		attributeGetterFunctions.put("upazila", FGLicenseInfo::getUpazila);
		attributeSetterBiConsumers.put(
			"upazila",
			(BiConsumer<FGLicenseInfo, String>)FGLicenseInfo::setUpazila);
		attributeGetterFunctions.put("status", FGLicenseInfo::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<FGLicenseInfo, Integer>)FGLicenseInfo::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", FGLicenseInfo::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<FGLicenseInfo, Long>)FGLicenseInfo::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusByUserName", FGLicenseInfo::getStatusByUserName);
		attributeSetterBiConsumers.put(
			"statusByUserName",
			(BiConsumer<FGLicenseInfo, String>)
				FGLicenseInfo::setStatusByUserName);
		attributeGetterFunctions.put(
			"statusDate", FGLicenseInfo::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<FGLicenseInfo, Date>)FGLicenseInfo::setStatusDate);
		attributeGetterFunctions.put("groupId", FGLicenseInfo::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<FGLicenseInfo, Long>)FGLicenseInfo::setGroupId);
		attributeGetterFunctions.put("companyId", FGLicenseInfo::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<FGLicenseInfo, Long>)FGLicenseInfo::setCompanyId);
		attributeGetterFunctions.put(
			"createDate", FGLicenseInfo::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<FGLicenseInfo, Date>)FGLicenseInfo::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", FGLicenseInfo::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<FGLicenseInfo, Date>)FGLicenseInfo::setModifiedDate);
		attributeGetterFunctions.put(
			"modifiedBy", FGLicenseInfo::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<FGLicenseInfo, Long>)FGLicenseInfo::setModifiedBy);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFgLicenseInfoId() {
		return _fgLicenseInfoId;
	}

	@Override
	public void setFgLicenseInfoId(long fgLicenseInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fgLicenseInfoId = fgLicenseInfoId;
	}

	@JSON
	@Override
	public long getFgLicenseMasterId() {
		return _fgLicenseMasterId;
	}

	@Override
	public void setFgLicenseMasterId(long fgLicenseMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fgLicenseMasterId = fgLicenseMasterId;
	}

	@JSON
	@Override
	public long getFgLicenseMDMId() {
		return _fgLicenseMDMId;
	}

	@Override
	public void setFgLicenseMDMId(long fgLicenseMDMId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fgLicenseMDMId = fgLicenseMDMId;
	}

	@JSON
	@Override
	public String getNationalId() {
		if (_nationalId == null) {
			return "";
		}
		else {
			return _nationalId;
		}
	}

	@Override
	public void setNationalId(String nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalNationalId() {
		return getColumnOriginalValue("nationalId");
	}

	@JSON
	@Override
	public String getApplicationNumber() {
		if (_applicationNumber == null) {
			return "";
		}
		else {
			return _applicationNumber;
		}
	}

	@Override
	public void setApplicationNumber(String applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalApplicationNumber() {
		return getColumnOriginalValue("applicationNumber");
	}

	@JSON
	@Override
	public String getApplicantName() {
		if (_applicantName == null) {
			return "";
		}
		else {
			return _applicantName;
		}
	}

	@Override
	public void setApplicantName(String applicantName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicantName = applicantName;
	}

	@JSON
	@Override
	public String getTradeLicenseNumber() {
		if (_tradeLicenseNumber == null) {
			return "";
		}
		else {
			return _tradeLicenseNumber;
		}
	}

	@Override
	public void setTradeLicenseNumber(String tradeLicenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseNumber = tradeLicenseNumber;
	}

	@JSON
	@Override
	public String getFoodgrainLicenseNumber() {
		if (_foodgrainLicenseNumber == null) {
			return "";
		}
		else {
			return _foodgrainLicenseNumber;
		}
	}

	@Override
	public void setFoodgrainLicenseNumber(String foodgrainLicenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseNumber = foodgrainLicenseNumber;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalFoodgrainLicenseNumber() {
		return getColumnOriginalValue("foodgrainLicenseNumber");
	}

	@JSON
	@Override
	public Date getFoodgrainLicenseIssueDate() {
		return _foodgrainLicenseIssueDate;
	}

	@Override
	public void setFoodgrainLicenseIssueDate(Date foodgrainLicenseIssueDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseIssueDate = foodgrainLicenseIssueDate;
	}

	@JSON
	@Override
	public Date getFoodgrainLicenseExpiryDate() {
		return _foodgrainLicenseExpiryDate;
	}

	@Override
	public void setFoodgrainLicenseExpiryDate(Date foodgrainLicenseExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_foodgrainLicenseExpiryDate = foodgrainLicenseExpiryDate;
	}

	@JSON
	@Override
	public String getBusinessName() {
		if (_businessName == null) {
			return "";
		}
		else {
			return _businessName;
		}
	}

	@Override
	public void setBusinessName(String businessName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessName = businessName;
	}

	@JSON
	@Override
	public String getBusinessType() {
		if (_businessType == null) {
			return "";
		}
		else {
			return _businessType;
		}
	}

	@Override
	public void setBusinessType(String businessType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessType = businessType;
	}

	@JSON
	@Override
	public long getBusinessAddressId() {
		return _businessAddressId;
	}

	@Override
	public void setBusinessAddressId(long businessAddressId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessAddressId = businessAddressId;
	}

	@JSON
	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@JSON
	@Override
	public String getApplicationType() {
		if (_applicationType == null) {
			return "";
		}
		else {
			return _applicationType;
		}
	}

	@Override
	public void setApplicationType(String applicationType) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationType = applicationType;
	}

	@JSON
	@Override
	public boolean getSyncStatus() {
		return _syncStatus;
	}

	@JSON
	@Override
	public boolean isSyncStatus() {
		return _syncStatus;
	}

	@Override
	public void setSyncStatus(boolean syncStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_syncStatus = syncStatus;
	}

	@JSON
	@Override
	public boolean getIsExpired() {
		return _isExpired;
	}

	@JSON
	@Override
	public boolean isIsExpired() {
		return _isExpired;
	}

	@Override
	public void setIsExpired(boolean isExpired) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_isExpired = isExpired;
	}

	@JSON
	@Override
	public long getPaymentChallanId() {
		return _paymentChallanId;
	}

	@Override
	public void setPaymentChallanId(long paymentChallanId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_paymentChallanId = paymentChallanId;
	}

	@JSON
	@Override
	public String getDivision() {
		if (_division == null) {
			return "";
		}
		else {
			return _division;
		}
	}

	@Override
	public void setDivision(String division) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_division = division;
	}

	@JSON
	@Override
	public String getDistrict() {
		if (_district == null) {
			return "";
		}
		else {
			return _district;
		}
	}

	@Override
	public void setDistrict(String district) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_district = district;
	}

	@JSON
	@Override
	public String getUpazila() {
		if (_upazila == null) {
			return "";
		}
		else {
			return _upazila;
		}
	}

	@Override
	public void setUpazila(String upazila) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_upazila = upazila;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public int getOriginalStatus() {
		return GetterUtil.getInteger(
			this.<Integer>getColumnOriginalValue("status"));
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(FGLicenseInfo.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), FGLicenseInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FGLicenseInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FGLicenseInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FGLicenseInfoImpl fgLicenseInfoImpl = new FGLicenseInfoImpl();

		fgLicenseInfoImpl.setUuid(getUuid());
		fgLicenseInfoImpl.setFgLicenseInfoId(getFgLicenseInfoId());
		fgLicenseInfoImpl.setFgLicenseMasterId(getFgLicenseMasterId());
		fgLicenseInfoImpl.setFgLicenseMDMId(getFgLicenseMDMId());
		fgLicenseInfoImpl.setNationalId(getNationalId());
		fgLicenseInfoImpl.setApplicationNumber(getApplicationNumber());
		fgLicenseInfoImpl.setApplicantName(getApplicantName());
		fgLicenseInfoImpl.setTradeLicenseNumber(getTradeLicenseNumber());
		fgLicenseInfoImpl.setFoodgrainLicenseNumber(
			getFoodgrainLicenseNumber());
		fgLicenseInfoImpl.setFoodgrainLicenseIssueDate(
			getFoodgrainLicenseIssueDate());
		fgLicenseInfoImpl.setFoodgrainLicenseExpiryDate(
			getFoodgrainLicenseExpiryDate());
		fgLicenseInfoImpl.setBusinessName(getBusinessName());
		fgLicenseInfoImpl.setBusinessType(getBusinessType());
		fgLicenseInfoImpl.setBusinessAddressId(getBusinessAddressId());
		fgLicenseInfoImpl.setVersion(getVersion());
		fgLicenseInfoImpl.setApplicationType(getApplicationType());
		fgLicenseInfoImpl.setSyncStatus(isSyncStatus());
		fgLicenseInfoImpl.setIsExpired(isIsExpired());
		fgLicenseInfoImpl.setPaymentChallanId(getPaymentChallanId());
		fgLicenseInfoImpl.setDivision(getDivision());
		fgLicenseInfoImpl.setDistrict(getDistrict());
		fgLicenseInfoImpl.setUpazila(getUpazila());
		fgLicenseInfoImpl.setStatus(getStatus());
		fgLicenseInfoImpl.setStatusByUserId(getStatusByUserId());
		fgLicenseInfoImpl.setStatusByUserName(getStatusByUserName());
		fgLicenseInfoImpl.setStatusDate(getStatusDate());
		fgLicenseInfoImpl.setGroupId(getGroupId());
		fgLicenseInfoImpl.setCompanyId(getCompanyId());
		fgLicenseInfoImpl.setCreateDate(getCreateDate());
		fgLicenseInfoImpl.setModifiedDate(getModifiedDate());
		fgLicenseInfoImpl.setModifiedBy(getModifiedBy());

		fgLicenseInfoImpl.resetOriginalValues();

		return fgLicenseInfoImpl;
	}

	@Override
	public FGLicenseInfo cloneWithOriginalValues() {
		FGLicenseInfoImpl fgLicenseInfoImpl = new FGLicenseInfoImpl();

		fgLicenseInfoImpl.setUuid(this.<String>getColumnOriginalValue("uuid_"));
		fgLicenseInfoImpl.setFgLicenseInfoId(
			this.<Long>getColumnOriginalValue("fgLicenseInfoId"));
		fgLicenseInfoImpl.setFgLicenseMasterId(
			this.<Long>getColumnOriginalValue("fgLicenseMasterId"));
		fgLicenseInfoImpl.setFgLicenseMDMId(
			this.<Long>getColumnOriginalValue("fgLicenseMDMId"));
		fgLicenseInfoImpl.setNationalId(
			this.<String>getColumnOriginalValue("nationalId"));
		fgLicenseInfoImpl.setApplicationNumber(
			this.<String>getColumnOriginalValue("applicationNumber"));
		fgLicenseInfoImpl.setApplicantName(
			this.<String>getColumnOriginalValue("applicantName"));
		fgLicenseInfoImpl.setTradeLicenseNumber(
			this.<String>getColumnOriginalValue("tradeLicenseNumber"));
		fgLicenseInfoImpl.setFoodgrainLicenseNumber(
			this.<String>getColumnOriginalValue("foodgrainLicenseNumber"));
		fgLicenseInfoImpl.setFoodgrainLicenseIssueDate(
			this.<Date>getColumnOriginalValue("foodgrainLicenseIssueDate"));
		fgLicenseInfoImpl.setFoodgrainLicenseExpiryDate(
			this.<Date>getColumnOriginalValue("foodgrainLicenseExpiryDate"));
		fgLicenseInfoImpl.setBusinessName(
			this.<String>getColumnOriginalValue("businessName"));
		fgLicenseInfoImpl.setBusinessType(
			this.<String>getColumnOriginalValue("businessType"));
		fgLicenseInfoImpl.setBusinessAddressId(
			this.<Long>getColumnOriginalValue("businessAddressId"));
		fgLicenseInfoImpl.setVersion(
			this.<Double>getColumnOriginalValue("version"));
		fgLicenseInfoImpl.setApplicationType(
			this.<String>getColumnOriginalValue("applicationType"));
		fgLicenseInfoImpl.setSyncStatus(
			this.<Boolean>getColumnOriginalValue("syncStatus"));
		fgLicenseInfoImpl.setIsExpired(
			this.<Boolean>getColumnOriginalValue("isExpired"));
		fgLicenseInfoImpl.setPaymentChallanId(
			this.<Long>getColumnOriginalValue("paymentChallanId"));
		fgLicenseInfoImpl.setDivision(
			this.<String>getColumnOriginalValue("division"));
		fgLicenseInfoImpl.setDistrict(
			this.<String>getColumnOriginalValue("district"));
		fgLicenseInfoImpl.setUpazila(
			this.<String>getColumnOriginalValue("upazila"));
		fgLicenseInfoImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		fgLicenseInfoImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		fgLicenseInfoImpl.setStatusByUserName(
			this.<String>getColumnOriginalValue("statusByUserName"));
		fgLicenseInfoImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		fgLicenseInfoImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		fgLicenseInfoImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		fgLicenseInfoImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		fgLicenseInfoImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));
		fgLicenseInfoImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));

		return fgLicenseInfoImpl;
	}

	@Override
	public int compareTo(FGLicenseInfo fgLicenseInfo) {
		long primaryKey = fgLicenseInfo.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FGLicenseInfo)) {
			return false;
		}

		FGLicenseInfo fgLicenseInfo = (FGLicenseInfo)object;

		long primaryKey = fgLicenseInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FGLicenseInfo> toCacheModel() {
		FGLicenseInfoCacheModel fgLicenseInfoCacheModel =
			new FGLicenseInfoCacheModel();

		fgLicenseInfoCacheModel.uuid = getUuid();

		String uuid = fgLicenseInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fgLicenseInfoCacheModel.uuid = null;
		}

		fgLicenseInfoCacheModel.fgLicenseInfoId = getFgLicenseInfoId();

		fgLicenseInfoCacheModel.fgLicenseMasterId = getFgLicenseMasterId();

		fgLicenseInfoCacheModel.fgLicenseMDMId = getFgLicenseMDMId();

		fgLicenseInfoCacheModel.nationalId = getNationalId();

		String nationalId = fgLicenseInfoCacheModel.nationalId;

		if ((nationalId != null) && (nationalId.length() == 0)) {
			fgLicenseInfoCacheModel.nationalId = null;
		}

		fgLicenseInfoCacheModel.applicationNumber = getApplicationNumber();

		String applicationNumber = fgLicenseInfoCacheModel.applicationNumber;

		if ((applicationNumber != null) && (applicationNumber.length() == 0)) {
			fgLicenseInfoCacheModel.applicationNumber = null;
		}

		fgLicenseInfoCacheModel.applicantName = getApplicantName();

		String applicantName = fgLicenseInfoCacheModel.applicantName;

		if ((applicantName != null) && (applicantName.length() == 0)) {
			fgLicenseInfoCacheModel.applicantName = null;
		}

		fgLicenseInfoCacheModel.tradeLicenseNumber = getTradeLicenseNumber();

		String tradeLicenseNumber = fgLicenseInfoCacheModel.tradeLicenseNumber;

		if ((tradeLicenseNumber != null) &&
			(tradeLicenseNumber.length() == 0)) {

			fgLicenseInfoCacheModel.tradeLicenseNumber = null;
		}

		fgLicenseInfoCacheModel.foodgrainLicenseNumber =
			getFoodgrainLicenseNumber();

		String foodgrainLicenseNumber =
			fgLicenseInfoCacheModel.foodgrainLicenseNumber;

		if ((foodgrainLicenseNumber != null) &&
			(foodgrainLicenseNumber.length() == 0)) {

			fgLicenseInfoCacheModel.foodgrainLicenseNumber = null;
		}

		Date foodgrainLicenseIssueDate = getFoodgrainLicenseIssueDate();

		if (foodgrainLicenseIssueDate != null) {
			fgLicenseInfoCacheModel.foodgrainLicenseIssueDate =
				foodgrainLicenseIssueDate.getTime();
		}
		else {
			fgLicenseInfoCacheModel.foodgrainLicenseIssueDate = Long.MIN_VALUE;
		}

		Date foodgrainLicenseExpiryDate = getFoodgrainLicenseExpiryDate();

		if (foodgrainLicenseExpiryDate != null) {
			fgLicenseInfoCacheModel.foodgrainLicenseExpiryDate =
				foodgrainLicenseExpiryDate.getTime();
		}
		else {
			fgLicenseInfoCacheModel.foodgrainLicenseExpiryDate = Long.MIN_VALUE;
		}

		fgLicenseInfoCacheModel.businessName = getBusinessName();

		String businessName = fgLicenseInfoCacheModel.businessName;

		if ((businessName != null) && (businessName.length() == 0)) {
			fgLicenseInfoCacheModel.businessName = null;
		}

		fgLicenseInfoCacheModel.businessType = getBusinessType();

		String businessType = fgLicenseInfoCacheModel.businessType;

		if ((businessType != null) && (businessType.length() == 0)) {
			fgLicenseInfoCacheModel.businessType = null;
		}

		fgLicenseInfoCacheModel.businessAddressId = getBusinessAddressId();

		fgLicenseInfoCacheModel.version = getVersion();

		fgLicenseInfoCacheModel.applicationType = getApplicationType();

		String applicationType = fgLicenseInfoCacheModel.applicationType;

		if ((applicationType != null) && (applicationType.length() == 0)) {
			fgLicenseInfoCacheModel.applicationType = null;
		}

		fgLicenseInfoCacheModel.syncStatus = isSyncStatus();

		fgLicenseInfoCacheModel.isExpired = isIsExpired();

		fgLicenseInfoCacheModel.paymentChallanId = getPaymentChallanId();

		fgLicenseInfoCacheModel.division = getDivision();

		String division = fgLicenseInfoCacheModel.division;

		if ((division != null) && (division.length() == 0)) {
			fgLicenseInfoCacheModel.division = null;
		}

		fgLicenseInfoCacheModel.district = getDistrict();

		String district = fgLicenseInfoCacheModel.district;

		if ((district != null) && (district.length() == 0)) {
			fgLicenseInfoCacheModel.district = null;
		}

		fgLicenseInfoCacheModel.upazila = getUpazila();

		String upazila = fgLicenseInfoCacheModel.upazila;

		if ((upazila != null) && (upazila.length() == 0)) {
			fgLicenseInfoCacheModel.upazila = null;
		}

		fgLicenseInfoCacheModel.status = getStatus();

		fgLicenseInfoCacheModel.statusByUserId = getStatusByUserId();

		fgLicenseInfoCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = fgLicenseInfoCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			fgLicenseInfoCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			fgLicenseInfoCacheModel.statusDate = statusDate.getTime();
		}
		else {
			fgLicenseInfoCacheModel.statusDate = Long.MIN_VALUE;
		}

		fgLicenseInfoCacheModel.groupId = getGroupId();

		fgLicenseInfoCacheModel.companyId = getCompanyId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			fgLicenseInfoCacheModel.createDate = createDate.getTime();
		}
		else {
			fgLicenseInfoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			fgLicenseInfoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			fgLicenseInfoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		fgLicenseInfoCacheModel.modifiedBy = getModifiedBy();

		return fgLicenseInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FGLicenseInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FGLicenseInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((FGLicenseInfo)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FGLicenseInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FGLicenseInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FGLicenseInfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FGLicenseInfo>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FGLicenseInfo.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _fgLicenseInfoId;
	private long _fgLicenseMasterId;
	private long _fgLicenseMDMId;
	private String _nationalId;
	private String _applicationNumber;
	private String _applicantName;
	private String _tradeLicenseNumber;
	private String _foodgrainLicenseNumber;
	private Date _foodgrainLicenseIssueDate;
	private Date _foodgrainLicenseExpiryDate;
	private String _businessName;
	private String _businessType;
	private long _businessAddressId;
	private double _version;
	private String _applicationType;
	private boolean _syncStatus;
	private boolean _isExpired;
	private long _paymentChallanId;
	private String _division;
	private String _district;
	private String _upazila;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private long _groupId;
	private long _companyId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _modifiedBy;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FGLicenseInfo, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FGLicenseInfo)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("fgLicenseInfoId", _fgLicenseInfoId);
		_columnOriginalValues.put("fgLicenseMasterId", _fgLicenseMasterId);
		_columnOriginalValues.put("fgLicenseMDMId", _fgLicenseMDMId);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("applicantName", _applicantName);
		_columnOriginalValues.put("tradeLicenseNumber", _tradeLicenseNumber);
		_columnOriginalValues.put(
			"foodgrainLicenseNumber", _foodgrainLicenseNumber);
		_columnOriginalValues.put(
			"foodgrainLicenseIssueDate", _foodgrainLicenseIssueDate);
		_columnOriginalValues.put(
			"foodgrainLicenseExpiryDate", _foodgrainLicenseExpiryDate);
		_columnOriginalValues.put("businessName", _businessName);
		_columnOriginalValues.put("businessType", _businessType);
		_columnOriginalValues.put("businessAddressId", _businessAddressId);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("applicationType", _applicationType);
		_columnOriginalValues.put("syncStatus", _syncStatus);
		_columnOriginalValues.put("isExpired", _isExpired);
		_columnOriginalValues.put("paymentChallanId", _paymentChallanId);
		_columnOriginalValues.put("division", _division);
		_columnOriginalValues.put("district", _district);
		_columnOriginalValues.put("upazila", _upazila);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusByUserName", _statusByUserName);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("fgLicenseInfoId", 2L);

		columnBitmasks.put("fgLicenseMasterId", 4L);

		columnBitmasks.put("fgLicenseMDMId", 8L);

		columnBitmasks.put("nationalId", 16L);

		columnBitmasks.put("applicationNumber", 32L);

		columnBitmasks.put("applicantName", 64L);

		columnBitmasks.put("tradeLicenseNumber", 128L);

		columnBitmasks.put("foodgrainLicenseNumber", 256L);

		columnBitmasks.put("foodgrainLicenseIssueDate", 512L);

		columnBitmasks.put("foodgrainLicenseExpiryDate", 1024L);

		columnBitmasks.put("businessName", 2048L);

		columnBitmasks.put("businessType", 4096L);

		columnBitmasks.put("businessAddressId", 8192L);

		columnBitmasks.put("version", 16384L);

		columnBitmasks.put("applicationType", 32768L);

		columnBitmasks.put("syncStatus", 65536L);

		columnBitmasks.put("isExpired", 131072L);

		columnBitmasks.put("paymentChallanId", 262144L);

		columnBitmasks.put("division", 524288L);

		columnBitmasks.put("district", 1048576L);

		columnBitmasks.put("upazila", 2097152L);

		columnBitmasks.put("status", 4194304L);

		columnBitmasks.put("statusByUserId", 8388608L);

		columnBitmasks.put("statusByUserName", 16777216L);

		columnBitmasks.put("statusDate", 33554432L);

		columnBitmasks.put("groupId", 67108864L);

		columnBitmasks.put("companyId", 134217728L);

		columnBitmasks.put("createDate", 268435456L);

		columnBitmasks.put("modifiedDate", 536870912L);

		columnBitmasks.put("modifiedBy", 1073741824L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FGLicenseInfo _escapedModel;

}