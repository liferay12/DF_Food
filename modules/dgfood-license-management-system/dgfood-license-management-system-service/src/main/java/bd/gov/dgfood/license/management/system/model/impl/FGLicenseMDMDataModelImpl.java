/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.license.management.system.model.impl;

import bd.gov.dgfood.license.management.system.model.FGLicenseMDMData;
import bd.gov.dgfood.license.management.system.model.FGLicenseMDMDataModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the FGLicenseMDMData service. Represents a row in the &quot;fgl_mdm_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>FGLicenseMDMDataModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link FGLicenseMDMDataImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see FGLicenseMDMDataImpl
 * @generated
 */
@JSON(strict = true)
public class FGLicenseMDMDataModelImpl
	extends BaseModelImpl<FGLicenseMDMData> implements FGLicenseMDMDataModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a fg license mdm data model instance should use the <code>FGLicenseMDMData</code> interface instead.
	 */
	public static final String TABLE_NAME = "fgl_mdm_data";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"fgLicenseMDMId", Types.BIGINT},
		{"fgLicenseInfoId", Types.BIGINT}, {"fgLicenseMasterId", Types.BIGINT},
		{"applicationMdmData", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fgLicenseMDMId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fgLicenseInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fgLicenseMasterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("applicationMdmData", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table fgl_mdm_data (uuid_ VARCHAR(75) null,fgLicenseMDMId LONG not null primary key,fgLicenseInfoId LONG,fgLicenseMasterId LONG,applicationMdmData VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP = "drop table fgl_mdm_data";

	public static final String ORDER_BY_JPQL =
		" ORDER BY fgLicenseMDMData.fgLicenseMDMId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY fgl_mdm_data.fgLicenseMDMId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long FGLICENSEMDMID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public FGLicenseMDMDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fgLicenseMDMId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFgLicenseMDMId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fgLicenseMDMId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return FGLicenseMDMData.class;
	}

	@Override
	public String getModelClassName() {
		return FGLicenseMDMData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<FGLicenseMDMData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<FGLicenseMDMData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseMDMData, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((FGLicenseMDMData)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<FGLicenseMDMData, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<FGLicenseMDMData, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(FGLicenseMDMData)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<FGLicenseMDMData, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<FGLicenseMDMData, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<FGLicenseMDMData, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<FGLicenseMDMData, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<FGLicenseMDMData, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<FGLicenseMDMData, Object>>();
		Map<String, BiConsumer<FGLicenseMDMData, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<FGLicenseMDMData, ?>>();

		attributeGetterFunctions.put("uuid", FGLicenseMDMData::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<FGLicenseMDMData, String>)FGLicenseMDMData::setUuid);
		attributeGetterFunctions.put(
			"fgLicenseMDMId", FGLicenseMDMData::getFgLicenseMDMId);
		attributeSetterBiConsumers.put(
			"fgLicenseMDMId",
			(BiConsumer<FGLicenseMDMData, Long>)
				FGLicenseMDMData::setFgLicenseMDMId);
		attributeGetterFunctions.put(
			"fgLicenseInfoId", FGLicenseMDMData::getFgLicenseInfoId);
		attributeSetterBiConsumers.put(
			"fgLicenseInfoId",
			(BiConsumer<FGLicenseMDMData, Long>)
				FGLicenseMDMData::setFgLicenseInfoId);
		attributeGetterFunctions.put(
			"fgLicenseMasterId", FGLicenseMDMData::getFgLicenseMasterId);
		attributeSetterBiConsumers.put(
			"fgLicenseMasterId",
			(BiConsumer<FGLicenseMDMData, Long>)
				FGLicenseMDMData::setFgLicenseMasterId);
		attributeGetterFunctions.put(
			"applicationMdmData", FGLicenseMDMData::getApplicationMdmData);
		attributeSetterBiConsumers.put(
			"applicationMdmData",
			(BiConsumer<FGLicenseMDMData, String>)
				FGLicenseMDMData::setApplicationMdmData);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@JSON
	@Override
	public long getFgLicenseMDMId() {
		return _fgLicenseMDMId;
	}

	@Override
	public void setFgLicenseMDMId(long fgLicenseMDMId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fgLicenseMDMId = fgLicenseMDMId;
	}

	@JSON
	@Override
	public long getFgLicenseInfoId() {
		return _fgLicenseInfoId;
	}

	@Override
	public void setFgLicenseInfoId(long fgLicenseInfoId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fgLicenseInfoId = fgLicenseInfoId;
	}

	@JSON
	@Override
	public long getFgLicenseMasterId() {
		return _fgLicenseMasterId;
	}

	@Override
	public void setFgLicenseMasterId(long fgLicenseMasterId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fgLicenseMasterId = fgLicenseMasterId;
	}

	@JSON
	@Override
	public String getApplicationMdmData() {
		if (_applicationMdmData == null) {
			return "";
		}
		else {
			return _applicationMdmData;
		}
	}

	@Override
	public void setApplicationMdmData(String applicationMdmData) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationMdmData = applicationMdmData;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, FGLicenseMDMData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public FGLicenseMDMData toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, FGLicenseMDMData>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		FGLicenseMDMDataImpl fgLicenseMDMDataImpl = new FGLicenseMDMDataImpl();

		fgLicenseMDMDataImpl.setUuid(getUuid());
		fgLicenseMDMDataImpl.setFgLicenseMDMId(getFgLicenseMDMId());
		fgLicenseMDMDataImpl.setFgLicenseInfoId(getFgLicenseInfoId());
		fgLicenseMDMDataImpl.setFgLicenseMasterId(getFgLicenseMasterId());
		fgLicenseMDMDataImpl.setApplicationMdmData(getApplicationMdmData());

		fgLicenseMDMDataImpl.resetOriginalValues();

		return fgLicenseMDMDataImpl;
	}

	@Override
	public FGLicenseMDMData cloneWithOriginalValues() {
		FGLicenseMDMDataImpl fgLicenseMDMDataImpl = new FGLicenseMDMDataImpl();

		fgLicenseMDMDataImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		fgLicenseMDMDataImpl.setFgLicenseMDMId(
			this.<Long>getColumnOriginalValue("fgLicenseMDMId"));
		fgLicenseMDMDataImpl.setFgLicenseInfoId(
			this.<Long>getColumnOriginalValue("fgLicenseInfoId"));
		fgLicenseMDMDataImpl.setFgLicenseMasterId(
			this.<Long>getColumnOriginalValue("fgLicenseMasterId"));
		fgLicenseMDMDataImpl.setApplicationMdmData(
			this.<String>getColumnOriginalValue("applicationMdmData"));

		return fgLicenseMDMDataImpl;
	}

	@Override
	public int compareTo(FGLicenseMDMData fgLicenseMDMData) {
		long primaryKey = fgLicenseMDMData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof FGLicenseMDMData)) {
			return false;
		}

		FGLicenseMDMData fgLicenseMDMData = (FGLicenseMDMData)object;

		long primaryKey = fgLicenseMDMData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<FGLicenseMDMData> toCacheModel() {
		FGLicenseMDMDataCacheModel fgLicenseMDMDataCacheModel =
			new FGLicenseMDMDataCacheModel();

		fgLicenseMDMDataCacheModel.uuid = getUuid();

		String uuid = fgLicenseMDMDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			fgLicenseMDMDataCacheModel.uuid = null;
		}

		fgLicenseMDMDataCacheModel.fgLicenseMDMId = getFgLicenseMDMId();

		fgLicenseMDMDataCacheModel.fgLicenseInfoId = getFgLicenseInfoId();

		fgLicenseMDMDataCacheModel.fgLicenseMasterId = getFgLicenseMasterId();

		fgLicenseMDMDataCacheModel.applicationMdmData = getApplicationMdmData();

		String applicationMdmData =
			fgLicenseMDMDataCacheModel.applicationMdmData;

		if ((applicationMdmData != null) &&
			(applicationMdmData.length() == 0)) {

			fgLicenseMDMDataCacheModel.applicationMdmData = null;
		}

		return fgLicenseMDMDataCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<FGLicenseMDMData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<FGLicenseMDMData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseMDMData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(FGLicenseMDMData)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<FGLicenseMDMData, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<FGLicenseMDMData, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<FGLicenseMDMData, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((FGLicenseMDMData)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, FGLicenseMDMData>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					FGLicenseMDMData.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _fgLicenseMDMId;
	private long _fgLicenseInfoId;
	private long _fgLicenseMasterId;
	private String _applicationMdmData;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<FGLicenseMDMData, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((FGLicenseMDMData)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put("fgLicenseMDMId", _fgLicenseMDMId);
		_columnOriginalValues.put("fgLicenseInfoId", _fgLicenseInfoId);
		_columnOriginalValues.put("fgLicenseMasterId", _fgLicenseMasterId);
		_columnOriginalValues.put("applicationMdmData", _applicationMdmData);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("fgLicenseMDMId", 2L);

		columnBitmasks.put("fgLicenseInfoId", 4L);

		columnBitmasks.put("fgLicenseMasterId", 8L);

		columnBitmasks.put("applicationMdmData", 16L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private FGLicenseMDMData _escapedModel;

}