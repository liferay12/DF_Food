/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.movement.contractor.model.impl;

import bd.gov.dgfood.movement.contractor.model.MovementContractor;
import bd.gov.dgfood.movement.contractor.model.MovementContractorModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the MovementContractor service. Represents a row in the &quot;DGFOOD_MovementContractor&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>MovementContractorModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MovementContractorImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MovementContractorImpl
 * @generated
 */
public class MovementContractorModelImpl
	extends BaseModelImpl<MovementContractor>
	implements MovementContractorModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a movement contractor model instance should use the <code>MovementContractor</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGFOOD_MovementContractor";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"movementContractorId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"name", Types.VARCHAR}, {"mobileNumber", Types.VARCHAR},
		{"nationalId", Types.BIGINT}, {"emailAddress", Types.VARCHAR},
		{"dateOfBirth", Types.TIMESTAMP}, {"gender", Types.INTEGER},
		{"fatherName", Types.VARCHAR}, {"motherName", Types.VARCHAR},
		{"maritalStatus", Types.INTEGER}, {"type_", Types.VARCHAR},
		{"organizationName", Types.VARCHAR},
		{"tradeLicenseNumber", Types.VARCHAR},
		{"tradeLicenseExpiryDate", Types.TIMESTAMP}, {"vehicle", Types.VARCHAR},
		{"vehicleCount", Types.INTEGER}, {"vehicleCapacity", Types.CLOB},
		{"userId", Types.BIGINT}, {"password_", Types.VARCHAR},
		{"applicationNumber", Types.BIGINT}, {"businessCode", Types.BIGINT},
		{"version", Types.DOUBLE}, {"status", Types.INTEGER},
		{"statusByUserId", Types.BIGINT}, {"statusDate", Types.TIMESTAMP},
		{"createdBy", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedBy", Types.BIGINT}, {"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("movementContractorId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("mobileNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nationalId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("emailAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dateOfBirth", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("gender", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("fatherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("motherName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("maritalStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("organizationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tradeLicenseExpiryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("vehicle", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleCount", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("vehicleCapacity", Types.CLOB);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("password_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationNumber", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("businessCode", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("version", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("createdBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedBy", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGFOOD_MovementContractor (uuid_ VARCHAR(75) null,movementContractorId LONG not null primary key,groupId LONG,companyId LONG,name VARCHAR(75) null,mobileNumber VARCHAR(75) null,nationalId LONG,emailAddress VARCHAR(75) null,dateOfBirth DATE null,gender INTEGER,fatherName VARCHAR(75) null,motherName VARCHAR(75) null,maritalStatus INTEGER,type_ VARCHAR(75) null,organizationName VARCHAR(75) null,tradeLicenseNumber VARCHAR(75) null,tradeLicenseExpiryDate DATE null,vehicle VARCHAR(75) null,vehicleCount INTEGER,vehicleCapacity TEXT null,userId LONG,password_ VARCHAR(75) null,applicationNumber LONG,businessCode LONG,version DOUBLE,status INTEGER,statusByUserId LONG,statusDate DATE null,createdBy LONG,createDate DATE null,modifiedBy LONG,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP =
		"drop table DGFOOD_MovementContractor";

	public static final String ORDER_BY_JPQL =
		" ORDER BY movementContractor.movementContractorId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGFOOD_MovementContractor.movementContractorId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long GROUPID_COLUMN_BITMASK = 2L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link #getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long UUID_COLUMN_BITMASK = 4L;

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long MOVEMENTCONTRACTORID_COLUMN_BITMASK = 8L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public MovementContractorModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _movementContractorId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setMovementContractorId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _movementContractorId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return MovementContractor.class;
	}

	@Override
	public String getModelClassName() {
		return MovementContractor.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<MovementContractor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<MovementContractor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MovementContractor, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((MovementContractor)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<MovementContractor, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<MovementContractor, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(MovementContractor)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<MovementContractor, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<MovementContractor, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<MovementContractor, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<MovementContractor, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<MovementContractor, Object>>
			attributeGetterFunctions =
				new LinkedHashMap
					<String, Function<MovementContractor, Object>>();
		Map<String, BiConsumer<MovementContractor, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<MovementContractor, ?>>();

		attributeGetterFunctions.put("uuid", MovementContractor::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setUuid);
		attributeGetterFunctions.put(
			"movementContractorId",
			MovementContractor::getMovementContractorId);
		attributeSetterBiConsumers.put(
			"movementContractorId",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setMovementContractorId);
		attributeGetterFunctions.put("groupId", MovementContractor::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setGroupId);
		attributeGetterFunctions.put(
			"companyId", MovementContractor::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setCompanyId);
		attributeGetterFunctions.put("name", MovementContractor::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setName);
		attributeGetterFunctions.put(
			"mobileNumber", MovementContractor::getMobileNumber);
		attributeSetterBiConsumers.put(
			"mobileNumber",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setMobileNumber);
		attributeGetterFunctions.put(
			"nationalId", MovementContractor::getNationalId);
		attributeSetterBiConsumers.put(
			"nationalId",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setNationalId);
		attributeGetterFunctions.put(
			"emailAddress", MovementContractor::getEmailAddress);
		attributeSetterBiConsumers.put(
			"emailAddress",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setEmailAddress);
		attributeGetterFunctions.put(
			"dateOfBirth", MovementContractor::getDateOfBirth);
		attributeSetterBiConsumers.put(
			"dateOfBirth",
			(BiConsumer<MovementContractor, Date>)
				MovementContractor::setDateOfBirth);
		attributeGetterFunctions.put("gender", MovementContractor::getGender);
		attributeSetterBiConsumers.put(
			"gender",
			(BiConsumer<MovementContractor, Integer>)
				MovementContractor::setGender);
		attributeGetterFunctions.put(
			"fatherName", MovementContractor::getFatherName);
		attributeSetterBiConsumers.put(
			"fatherName",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setFatherName);
		attributeGetterFunctions.put(
			"motherName", MovementContractor::getMotherName);
		attributeSetterBiConsumers.put(
			"motherName",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setMotherName);
		attributeGetterFunctions.put(
			"maritalStatus", MovementContractor::getMaritalStatus);
		attributeSetterBiConsumers.put(
			"maritalStatus",
			(BiConsumer<MovementContractor, Integer>)
				MovementContractor::setMaritalStatus);
		attributeGetterFunctions.put("type", MovementContractor::getType);
		attributeSetterBiConsumers.put(
			"type",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setType);
		attributeGetterFunctions.put(
			"organizationName", MovementContractor::getOrganizationName);
		attributeSetterBiConsumers.put(
			"organizationName",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setOrganizationName);
		attributeGetterFunctions.put(
			"tradeLicenseNumber", MovementContractor::getTradeLicenseNumber);
		attributeSetterBiConsumers.put(
			"tradeLicenseNumber",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setTradeLicenseNumber);
		attributeGetterFunctions.put(
			"tradeLicenseExpiryDate",
			MovementContractor::getTradeLicenseExpiryDate);
		attributeSetterBiConsumers.put(
			"tradeLicenseExpiryDate",
			(BiConsumer<MovementContractor, Date>)
				MovementContractor::setTradeLicenseExpiryDate);
		attributeGetterFunctions.put("vehicle", MovementContractor::getVehicle);
		attributeSetterBiConsumers.put(
			"vehicle",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setVehicle);
		attributeGetterFunctions.put(
			"vehicleCount", MovementContractor::getVehicleCount);
		attributeSetterBiConsumers.put(
			"vehicleCount",
			(BiConsumer<MovementContractor, Integer>)
				MovementContractor::setVehicleCount);
		attributeGetterFunctions.put(
			"vehicleCapacity", MovementContractor::getVehicleCapacity);
		attributeSetterBiConsumers.put(
			"vehicleCapacity",
			(BiConsumer<MovementContractor, Map<String, Serializable>>)
				MovementContractor::setVehicleCapacity);
		attributeGetterFunctions.put("userId", MovementContractor::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setUserId);
		attributeGetterFunctions.put(
			"password", MovementContractor::getPassword);
		attributeSetterBiConsumers.put(
			"password",
			(BiConsumer<MovementContractor, String>)
				MovementContractor::setPassword);
		attributeGetterFunctions.put(
			"applicationNumber", MovementContractor::getApplicationNumber);
		attributeSetterBiConsumers.put(
			"applicationNumber",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setApplicationNumber);
		attributeGetterFunctions.put(
			"businessCode", MovementContractor::getBusinessCode);
		attributeSetterBiConsumers.put(
			"businessCode",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setBusinessCode);
		attributeGetterFunctions.put("version", MovementContractor::getVersion);
		attributeSetterBiConsumers.put(
			"version",
			(BiConsumer<MovementContractor, Double>)
				MovementContractor::setVersion);
		attributeGetterFunctions.put("status", MovementContractor::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<MovementContractor, Integer>)
				MovementContractor::setStatus);
		attributeGetterFunctions.put(
			"statusByUserId", MovementContractor::getStatusByUserId);
		attributeSetterBiConsumers.put(
			"statusByUserId",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setStatusByUserId);
		attributeGetterFunctions.put(
			"statusDate", MovementContractor::getStatusDate);
		attributeSetterBiConsumers.put(
			"statusDate",
			(BiConsumer<MovementContractor, Date>)
				MovementContractor::setStatusDate);
		attributeGetterFunctions.put(
			"createdBy", MovementContractor::getCreatedBy);
		attributeSetterBiConsumers.put(
			"createdBy",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setCreatedBy);
		attributeGetterFunctions.put(
			"createDate", MovementContractor::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<MovementContractor, Date>)
				MovementContractor::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedBy", MovementContractor::getModifiedBy);
		attributeSetterBiConsumers.put(
			"modifiedBy",
			(BiConsumer<MovementContractor, Long>)
				MovementContractor::setModifiedBy);
		attributeGetterFunctions.put(
			"modifiedDate", MovementContractor::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<MovementContractor, Date>)
				MovementContractor::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_uuid = uuid;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public String getOriginalUuid() {
		return getColumnOriginalValue("uuid_");
	}

	@Override
	public long getMovementContractorId() {
		return _movementContractorId;
	}

	@Override
	public void setMovementContractorId(long movementContractorId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_movementContractorId = movementContractorId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_groupId = groupId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalGroupId() {
		return GetterUtil.getLong(this.<Long>getColumnOriginalValue("groupId"));
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_companyId = companyId;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *             #getColumnOriginalValue(String)}
	 */
	@Deprecated
	public long getOriginalCompanyId() {
		return GetterUtil.getLong(
			this.<Long>getColumnOriginalValue("companyId"));
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_name = name;
	}

	@Override
	public String getMobileNumber() {
		if (_mobileNumber == null) {
			return "";
		}
		else {
			return _mobileNumber;
		}
	}

	@Override
	public void setMobileNumber(String mobileNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_mobileNumber = mobileNumber;
	}

	@Override
	public long getNationalId() {
		return _nationalId;
	}

	@Override
	public void setNationalId(long nationalId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_nationalId = nationalId;
	}

	@Override
	public String getEmailAddress() {
		if (_emailAddress == null) {
			return "";
		}
		else {
			return _emailAddress;
		}
	}

	@Override
	public void setEmailAddress(String emailAddress) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_emailAddress = emailAddress;
	}

	@Override
	public Date getDateOfBirth() {
		return _dateOfBirth;
	}

	@Override
	public void setDateOfBirth(Date dateOfBirth) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_dateOfBirth = dateOfBirth;
	}

	@Override
	public int getGender() {
		return _gender;
	}

	@Override
	public void setGender(int gender) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_gender = gender;
	}

	@Override
	public String getFatherName() {
		if (_fatherName == null) {
			return "";
		}
		else {
			return _fatherName;
		}
	}

	@Override
	public void setFatherName(String fatherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_fatherName = fatherName;
	}

	@Override
	public String getMotherName() {
		if (_motherName == null) {
			return "";
		}
		else {
			return _motherName;
		}
	}

	@Override
	public void setMotherName(String motherName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_motherName = motherName;
	}

	@Override
	public int getMaritalStatus() {
		return _maritalStatus;
	}

	@Override
	public void setMaritalStatus(int maritalStatus) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_maritalStatus = maritalStatus;
	}

	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_type = type;
	}

	@Override
	public String getOrganizationName() {
		if (_organizationName == null) {
			return "";
		}
		else {
			return _organizationName;
		}
	}

	@Override
	public void setOrganizationName(String organizationName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_organizationName = organizationName;
	}

	@Override
	public String getTradeLicenseNumber() {
		if (_tradeLicenseNumber == null) {
			return "";
		}
		else {
			return _tradeLicenseNumber;
		}
	}

	@Override
	public void setTradeLicenseNumber(String tradeLicenseNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseNumber = tradeLicenseNumber;
	}

	@Override
	public Date getTradeLicenseExpiryDate() {
		return _tradeLicenseExpiryDate;
	}

	@Override
	public void setTradeLicenseExpiryDate(Date tradeLicenseExpiryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_tradeLicenseExpiryDate = tradeLicenseExpiryDate;
	}

	@Override
	public String getVehicle() {
		if (_vehicle == null) {
			return "";
		}
		else {
			return _vehicle;
		}
	}

	@Override
	public void setVehicle(String vehicle) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicle = vehicle;
	}

	@Override
	public int getVehicleCount() {
		return _vehicleCount;
	}

	@Override
	public void setVehicleCount(int vehicleCount) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleCount = vehicleCount;
	}

	@Override
	public Map<String, Serializable> getVehicleCapacity() {
		return _vehicleCapacity;
	}

	@Override
	public void setVehicleCapacity(Map<String, Serializable> vehicleCapacity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleCapacity = vehicleCapacity;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getPassword() {
		if (_password == null) {
			return "";
		}
		else {
			return _password;
		}
	}

	@Override
	public void setPassword(String password) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_password = password;
	}

	@Override
	public long getApplicationNumber() {
		return _applicationNumber;
	}

	@Override
	public void setApplicationNumber(long applicationNumber) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_applicationNumber = applicationNumber;
	}

	@Override
	public long getBusinessCode() {
		return _businessCode;
	}

	@Override
	public void setBusinessCode(long businessCode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_businessCode = businessCode;
	}

	@Override
	public double getVersion() {
		return _version;
	}

	@Override
	public void setVersion(double version) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_version = version;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_statusDate = statusDate;
	}

	@Override
	public long getCreatedBy() {
		return _createdBy;
	}

	@Override
	public void setCreatedBy(long createdBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createdBy = createdBy;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public long getModifiedBy() {
		return _modifiedBy;
	}

	@Override
	public void setModifiedBy(long modifiedBy) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedBy = modifiedBy;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(MovementContractor.class.getName()));
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), MovementContractor.class.getName(),
			getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MovementContractor toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, MovementContractor>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		MovementContractorImpl movementContractorImpl =
			new MovementContractorImpl();

		movementContractorImpl.setUuid(getUuid());
		movementContractorImpl.setMovementContractorId(
			getMovementContractorId());
		movementContractorImpl.setGroupId(getGroupId());
		movementContractorImpl.setCompanyId(getCompanyId());
		movementContractorImpl.setName(getName());
		movementContractorImpl.setMobileNumber(getMobileNumber());
		movementContractorImpl.setNationalId(getNationalId());
		movementContractorImpl.setEmailAddress(getEmailAddress());
		movementContractorImpl.setDateOfBirth(getDateOfBirth());
		movementContractorImpl.setGender(getGender());
		movementContractorImpl.setFatherName(getFatherName());
		movementContractorImpl.setMotherName(getMotherName());
		movementContractorImpl.setMaritalStatus(getMaritalStatus());
		movementContractorImpl.setType(getType());
		movementContractorImpl.setOrganizationName(getOrganizationName());
		movementContractorImpl.setTradeLicenseNumber(getTradeLicenseNumber());
		movementContractorImpl.setTradeLicenseExpiryDate(
			getTradeLicenseExpiryDate());
		movementContractorImpl.setVehicle(getVehicle());
		movementContractorImpl.setVehicleCount(getVehicleCount());
		movementContractorImpl.setVehicleCapacity(getVehicleCapacity());
		movementContractorImpl.setUserId(getUserId());
		movementContractorImpl.setPassword(getPassword());
		movementContractorImpl.setApplicationNumber(getApplicationNumber());
		movementContractorImpl.setBusinessCode(getBusinessCode());
		movementContractorImpl.setVersion(getVersion());
		movementContractorImpl.setStatus(getStatus());
		movementContractorImpl.setStatusByUserId(getStatusByUserId());
		movementContractorImpl.setStatusDate(getStatusDate());
		movementContractorImpl.setCreatedBy(getCreatedBy());
		movementContractorImpl.setCreateDate(getCreateDate());
		movementContractorImpl.setModifiedBy(getModifiedBy());
		movementContractorImpl.setModifiedDate(getModifiedDate());

		movementContractorImpl.resetOriginalValues();

		return movementContractorImpl;
	}

	@Override
	public MovementContractor cloneWithOriginalValues() {
		MovementContractorImpl movementContractorImpl =
			new MovementContractorImpl();

		movementContractorImpl.setUuid(
			this.<String>getColumnOriginalValue("uuid_"));
		movementContractorImpl.setMovementContractorId(
			this.<Long>getColumnOriginalValue("movementContractorId"));
		movementContractorImpl.setGroupId(
			this.<Long>getColumnOriginalValue("groupId"));
		movementContractorImpl.setCompanyId(
			this.<Long>getColumnOriginalValue("companyId"));
		movementContractorImpl.setName(
			this.<String>getColumnOriginalValue("name"));
		movementContractorImpl.setMobileNumber(
			this.<String>getColumnOriginalValue("mobileNumber"));
		movementContractorImpl.setNationalId(
			this.<Long>getColumnOriginalValue("nationalId"));
		movementContractorImpl.setEmailAddress(
			this.<String>getColumnOriginalValue("emailAddress"));
		movementContractorImpl.setDateOfBirth(
			this.<Date>getColumnOriginalValue("dateOfBirth"));
		movementContractorImpl.setGender(
			this.<Integer>getColumnOriginalValue("gender"));
		movementContractorImpl.setFatherName(
			this.<String>getColumnOriginalValue("fatherName"));
		movementContractorImpl.setMotherName(
			this.<String>getColumnOriginalValue("motherName"));
		movementContractorImpl.setMaritalStatus(
			this.<Integer>getColumnOriginalValue("maritalStatus"));
		movementContractorImpl.setType(
			this.<String>getColumnOriginalValue("type_"));
		movementContractorImpl.setOrganizationName(
			this.<String>getColumnOriginalValue("organizationName"));
		movementContractorImpl.setTradeLicenseNumber(
			this.<String>getColumnOriginalValue("tradeLicenseNumber"));
		movementContractorImpl.setTradeLicenseExpiryDate(
			this.<Date>getColumnOriginalValue("tradeLicenseExpiryDate"));
		movementContractorImpl.setVehicle(
			this.<String>getColumnOriginalValue("vehicle"));
		movementContractorImpl.setVehicleCount(
			this.<Integer>getColumnOriginalValue("vehicleCount"));
		movementContractorImpl.setVehicleCapacity(
			this.<Map>getColumnOriginalValue("vehicleCapacity"));
		movementContractorImpl.setUserId(
			this.<Long>getColumnOriginalValue("userId"));
		movementContractorImpl.setPassword(
			this.<String>getColumnOriginalValue("password_"));
		movementContractorImpl.setApplicationNumber(
			this.<Long>getColumnOriginalValue("applicationNumber"));
		movementContractorImpl.setBusinessCode(
			this.<Long>getColumnOriginalValue("businessCode"));
		movementContractorImpl.setVersion(
			this.<Double>getColumnOriginalValue("version"));
		movementContractorImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		movementContractorImpl.setStatusByUserId(
			this.<Long>getColumnOriginalValue("statusByUserId"));
		movementContractorImpl.setStatusDate(
			this.<Date>getColumnOriginalValue("statusDate"));
		movementContractorImpl.setCreatedBy(
			this.<Long>getColumnOriginalValue("createdBy"));
		movementContractorImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		movementContractorImpl.setModifiedBy(
			this.<Long>getColumnOriginalValue("modifiedBy"));
		movementContractorImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return movementContractorImpl;
	}

	@Override
	public int compareTo(MovementContractor movementContractor) {
		long primaryKey = movementContractor.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof MovementContractor)) {
			return false;
		}

		MovementContractor movementContractor = (MovementContractor)object;

		long primaryKey = movementContractor.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<MovementContractor> toCacheModel() {
		MovementContractorCacheModel movementContractorCacheModel =
			new MovementContractorCacheModel();

		movementContractorCacheModel.uuid = getUuid();

		String uuid = movementContractorCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			movementContractorCacheModel.uuid = null;
		}

		movementContractorCacheModel.movementContractorId =
			getMovementContractorId();

		movementContractorCacheModel.groupId = getGroupId();

		movementContractorCacheModel.companyId = getCompanyId();

		movementContractorCacheModel.name = getName();

		String name = movementContractorCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			movementContractorCacheModel.name = null;
		}

		movementContractorCacheModel.mobileNumber = getMobileNumber();

		String mobileNumber = movementContractorCacheModel.mobileNumber;

		if ((mobileNumber != null) && (mobileNumber.length() == 0)) {
			movementContractorCacheModel.mobileNumber = null;
		}

		movementContractorCacheModel.nationalId = getNationalId();

		movementContractorCacheModel.emailAddress = getEmailAddress();

		String emailAddress = movementContractorCacheModel.emailAddress;

		if ((emailAddress != null) && (emailAddress.length() == 0)) {
			movementContractorCacheModel.emailAddress = null;
		}

		Date dateOfBirth = getDateOfBirth();

		if (dateOfBirth != null) {
			movementContractorCacheModel.dateOfBirth = dateOfBirth.getTime();
		}
		else {
			movementContractorCacheModel.dateOfBirth = Long.MIN_VALUE;
		}

		movementContractorCacheModel.gender = getGender();

		movementContractorCacheModel.fatherName = getFatherName();

		String fatherName = movementContractorCacheModel.fatherName;

		if ((fatherName != null) && (fatherName.length() == 0)) {
			movementContractorCacheModel.fatherName = null;
		}

		movementContractorCacheModel.motherName = getMotherName();

		String motherName = movementContractorCacheModel.motherName;

		if ((motherName != null) && (motherName.length() == 0)) {
			movementContractorCacheModel.motherName = null;
		}

		movementContractorCacheModel.maritalStatus = getMaritalStatus();

		movementContractorCacheModel.type = getType();

		String type = movementContractorCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			movementContractorCacheModel.type = null;
		}

		movementContractorCacheModel.organizationName = getOrganizationName();

		String organizationName = movementContractorCacheModel.organizationName;

		if ((organizationName != null) && (organizationName.length() == 0)) {
			movementContractorCacheModel.organizationName = null;
		}

		movementContractorCacheModel.tradeLicenseNumber =
			getTradeLicenseNumber();

		String tradeLicenseNumber =
			movementContractorCacheModel.tradeLicenseNumber;

		if ((tradeLicenseNumber != null) &&
			(tradeLicenseNumber.length() == 0)) {

			movementContractorCacheModel.tradeLicenseNumber = null;
		}

		Date tradeLicenseExpiryDate = getTradeLicenseExpiryDate();

		if (tradeLicenseExpiryDate != null) {
			movementContractorCacheModel.tradeLicenseExpiryDate =
				tradeLicenseExpiryDate.getTime();
		}
		else {
			movementContractorCacheModel.tradeLicenseExpiryDate =
				Long.MIN_VALUE;
		}

		movementContractorCacheModel.vehicle = getVehicle();

		String vehicle = movementContractorCacheModel.vehicle;

		if ((vehicle != null) && (vehicle.length() == 0)) {
			movementContractorCacheModel.vehicle = null;
		}

		movementContractorCacheModel.vehicleCount = getVehicleCount();

		movementContractorCacheModel.vehicleCapacity = getVehicleCapacity();

		movementContractorCacheModel.userId = getUserId();

		movementContractorCacheModel.password = getPassword();

		String password = movementContractorCacheModel.password;

		if ((password != null) && (password.length() == 0)) {
			movementContractorCacheModel.password = null;
		}

		movementContractorCacheModel.applicationNumber = getApplicationNumber();

		movementContractorCacheModel.businessCode = getBusinessCode();

		movementContractorCacheModel.version = getVersion();

		movementContractorCacheModel.status = getStatus();

		movementContractorCacheModel.statusByUserId = getStatusByUserId();

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			movementContractorCacheModel.statusDate = statusDate.getTime();
		}
		else {
			movementContractorCacheModel.statusDate = Long.MIN_VALUE;
		}

		movementContractorCacheModel.createdBy = getCreatedBy();

		Date createDate = getCreateDate();

		if (createDate != null) {
			movementContractorCacheModel.createDate = createDate.getTime();
		}
		else {
			movementContractorCacheModel.createDate = Long.MIN_VALUE;
		}

		movementContractorCacheModel.modifiedBy = getModifiedBy();

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			movementContractorCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			movementContractorCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return movementContractorCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<MovementContractor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<MovementContractor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MovementContractor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply(
				(MovementContractor)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<MovementContractor, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<MovementContractor, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<MovementContractor, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((MovementContractor)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, MovementContractor>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					MovementContractor.class, ModelWrapper.class);

	}

	private String _uuid;
	private long _movementContractorId;
	private long _groupId;
	private long _companyId;
	private String _name;
	private String _mobileNumber;
	private long _nationalId;
	private String _emailAddress;
	private Date _dateOfBirth;
	private int _gender;
	private String _fatherName;
	private String _motherName;
	private int _maritalStatus;
	private String _type;
	private String _organizationName;
	private String _tradeLicenseNumber;
	private Date _tradeLicenseExpiryDate;
	private String _vehicle;
	private int _vehicleCount;
	private Map<String, Serializable> _vehicleCapacity;
	private long _userId;
	private String _password;
	private long _applicationNumber;
	private long _businessCode;
	private double _version;
	private int _status;
	private long _statusByUserId;
	private Date _statusDate;
	private long _createdBy;
	private Date _createDate;
	private long _modifiedBy;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		columnName = _attributeNames.getOrDefault(columnName, columnName);

		Function<MovementContractor, Object> function =
			_attributeGetterFunctions.get(columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((MovementContractor)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("uuid_", _uuid);
		_columnOriginalValues.put(
			"movementContractorId", _movementContractorId);
		_columnOriginalValues.put("groupId", _groupId);
		_columnOriginalValues.put("companyId", _companyId);
		_columnOriginalValues.put("name", _name);
		_columnOriginalValues.put("mobileNumber", _mobileNumber);
		_columnOriginalValues.put("nationalId", _nationalId);
		_columnOriginalValues.put("emailAddress", _emailAddress);
		_columnOriginalValues.put("dateOfBirth", _dateOfBirth);
		_columnOriginalValues.put("gender", _gender);
		_columnOriginalValues.put("fatherName", _fatherName);
		_columnOriginalValues.put("motherName", _motherName);
		_columnOriginalValues.put("maritalStatus", _maritalStatus);
		_columnOriginalValues.put("type_", _type);
		_columnOriginalValues.put("organizationName", _organizationName);
		_columnOriginalValues.put("tradeLicenseNumber", _tradeLicenseNumber);
		_columnOriginalValues.put(
			"tradeLicenseExpiryDate", _tradeLicenseExpiryDate);
		_columnOriginalValues.put("vehicle", _vehicle);
		_columnOriginalValues.put("vehicleCount", _vehicleCount);
		_columnOriginalValues.put("vehicleCapacity", _vehicleCapacity);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("password_", _password);
		_columnOriginalValues.put("applicationNumber", _applicationNumber);
		_columnOriginalValues.put("businessCode", _businessCode);
		_columnOriginalValues.put("version", _version);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("statusByUserId", _statusByUserId);
		_columnOriginalValues.put("statusDate", _statusDate);
		_columnOriginalValues.put("createdBy", _createdBy);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedBy", _modifiedBy);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private static final Map<String, String> _attributeNames;

	static {
		Map<String, String> attributeNames = new HashMap<>();

		attributeNames.put("uuid_", "uuid");
		attributeNames.put("type_", "type");
		attributeNames.put("password_", "password");

		_attributeNames = Collections.unmodifiableMap(attributeNames);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("uuid_", 1L);

		columnBitmasks.put("movementContractorId", 2L);

		columnBitmasks.put("groupId", 4L);

		columnBitmasks.put("companyId", 8L);

		columnBitmasks.put("name", 16L);

		columnBitmasks.put("mobileNumber", 32L);

		columnBitmasks.put("nationalId", 64L);

		columnBitmasks.put("emailAddress", 128L);

		columnBitmasks.put("dateOfBirth", 256L);

		columnBitmasks.put("gender", 512L);

		columnBitmasks.put("fatherName", 1024L);

		columnBitmasks.put("motherName", 2048L);

		columnBitmasks.put("maritalStatus", 4096L);

		columnBitmasks.put("type_", 8192L);

		columnBitmasks.put("organizationName", 16384L);

		columnBitmasks.put("tradeLicenseNumber", 32768L);

		columnBitmasks.put("tradeLicenseExpiryDate", 65536L);

		columnBitmasks.put("vehicle", 131072L);

		columnBitmasks.put("vehicleCount", 262144L);

		columnBitmasks.put("vehicleCapacity", 524288L);

		columnBitmasks.put("userId", 1048576L);

		columnBitmasks.put("password_", 2097152L);

		columnBitmasks.put("applicationNumber", 4194304L);

		columnBitmasks.put("businessCode", 8388608L);

		columnBitmasks.put("version", 16777216L);

		columnBitmasks.put("status", 33554432L);

		columnBitmasks.put("statusByUserId", 67108864L);

		columnBitmasks.put("statusDate", 134217728L);

		columnBitmasks.put("createdBy", 268435456L);

		columnBitmasks.put("createDate", 536870912L);

		columnBitmasks.put("modifiedBy", 1073741824L);

		columnBitmasks.put("modifiedDate", 2147483648L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private MovementContractor _escapedModel;

}