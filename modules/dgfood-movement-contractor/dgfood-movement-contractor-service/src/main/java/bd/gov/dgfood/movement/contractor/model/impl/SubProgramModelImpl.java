/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.movement.contractor.model.impl;

import bd.gov.dgfood.movement.contractor.model.SubProgram;
import bd.gov.dgfood.movement.contractor.model.SubProgramModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the SubProgram service. Represents a row in the &quot;DGFOOD_SubProgram&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>SubProgramModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SubProgramImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SubProgramImpl
 * @generated
 */
public class SubProgramModelImpl
	extends BaseModelImpl<SubProgram> implements SubProgramModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sub program model instance should use the <code>SubProgram</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGFOOD_SubProgram";

	public static final Object[][] TABLE_COLUMNS = {
		{"subProgramId", Types.BIGINT}, {"deliveryNo", Types.VARCHAR},
		{"memoNo", Types.VARCHAR}, {"sendingDepot", Types.VARCHAR},
		{"sendingPlantDesc", Types.VARCHAR}, {"receivingDepot", Types.VARCHAR},
		{"receivingPlantDesc", Types.VARCHAR}, {"product", Types.VARCHAR},
		{"quantity", Types.CLOB}, {"deliveryDate", Types.TIMESTAMP},
		{"requestedDate", Types.TIMESTAMP}, {"forwardingAgent", Types.VARCHAR},
		{"vehicleSendDate", Types.TIMESTAMP}, {"status", Types.INTEGER},
		{"userId", Types.BIGINT}, {"createDate", Types.TIMESTAMP},
		{"modifiedDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("subProgramId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("deliveryNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("memoNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sendingDepot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sendingPlantDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivingDepot", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivingPlantDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("product", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.CLOB);
		TABLE_COLUMNS_MAP.put("deliveryDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("requestedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("forwardingAgent", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("vehicleSendDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGFOOD_SubProgram (subProgramId LONG not null primary key,deliveryNo VARCHAR(75) null,memoNo VARCHAR(75) null,sendingDepot VARCHAR(75) null,sendingPlantDesc VARCHAR(75) null,receivingDepot VARCHAR(75) null,receivingPlantDesc VARCHAR(75) null,product VARCHAR(75) null,quantity TEXT null,deliveryDate DATE null,requestedDate DATE null,forwardingAgent VARCHAR(75) null,vehicleSendDate DATE null,status INTEGER,userId LONG,createDate DATE null,modifiedDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table DGFOOD_SubProgram";

	public static final String ORDER_BY_JPQL =
		" ORDER BY subProgram.subProgramId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGFOOD_SubProgram.subProgramId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long SUBPROGRAMID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public SubProgramModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _subProgramId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSubProgramId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _subProgramId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SubProgram.class;
	}

	@Override
	public String getModelClassName() {
		return SubProgram.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<SubProgram, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<SubProgram, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SubProgram, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((SubProgram)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<SubProgram, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<SubProgram, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(SubProgram)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<SubProgram, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<SubProgram, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<SubProgram, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<SubProgram, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<SubProgram, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<SubProgram, Object>>();
		Map<String, BiConsumer<SubProgram, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<SubProgram, ?>>();

		attributeGetterFunctions.put(
			"subProgramId", SubProgram::getSubProgramId);
		attributeSetterBiConsumers.put(
			"subProgramId",
			(BiConsumer<SubProgram, Long>)SubProgram::setSubProgramId);
		attributeGetterFunctions.put("deliveryNo", SubProgram::getDeliveryNo);
		attributeSetterBiConsumers.put(
			"deliveryNo",
			(BiConsumer<SubProgram, String>)SubProgram::setDeliveryNo);
		attributeGetterFunctions.put("memoNo", SubProgram::getMemoNo);
		attributeSetterBiConsumers.put(
			"memoNo", (BiConsumer<SubProgram, String>)SubProgram::setMemoNo);
		attributeGetterFunctions.put(
			"sendingDepot", SubProgram::getSendingDepot);
		attributeSetterBiConsumers.put(
			"sendingDepot",
			(BiConsumer<SubProgram, String>)SubProgram::setSendingDepot);
		attributeGetterFunctions.put(
			"sendingPlantDesc", SubProgram::getSendingPlantDesc);
		attributeSetterBiConsumers.put(
			"sendingPlantDesc",
			(BiConsumer<SubProgram, String>)SubProgram::setSendingPlantDesc);
		attributeGetterFunctions.put(
			"receivingDepot", SubProgram::getReceivingDepot);
		attributeSetterBiConsumers.put(
			"receivingDepot",
			(BiConsumer<SubProgram, String>)SubProgram::setReceivingDepot);
		attributeGetterFunctions.put(
			"receivingPlantDesc", SubProgram::getReceivingPlantDesc);
		attributeSetterBiConsumers.put(
			"receivingPlantDesc",
			(BiConsumer<SubProgram, String>)SubProgram::setReceivingPlantDesc);
		attributeGetterFunctions.put("product", SubProgram::getProduct);
		attributeSetterBiConsumers.put(
			"product", (BiConsumer<SubProgram, String>)SubProgram::setProduct);
		attributeGetterFunctions.put("quantity", SubProgram::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity",
			(BiConsumer<SubProgram, Map<String, Serializable>>)
				SubProgram::setQuantity);
		attributeGetterFunctions.put(
			"deliveryDate", SubProgram::getDeliveryDate);
		attributeSetterBiConsumers.put(
			"deliveryDate",
			(BiConsumer<SubProgram, Date>)SubProgram::setDeliveryDate);
		attributeGetterFunctions.put(
			"requestedDate", SubProgram::getRequestedDate);
		attributeSetterBiConsumers.put(
			"requestedDate",
			(BiConsumer<SubProgram, Date>)SubProgram::setRequestedDate);
		attributeGetterFunctions.put(
			"forwardingAgent", SubProgram::getForwardingAgent);
		attributeSetterBiConsumers.put(
			"forwardingAgent",
			(BiConsumer<SubProgram, String>)SubProgram::setForwardingAgent);
		attributeGetterFunctions.put(
			"vehicleSendDate", SubProgram::getVehicleSendDate);
		attributeSetterBiConsumers.put(
			"vehicleSendDate",
			(BiConsumer<SubProgram, Date>)SubProgram::setVehicleSendDate);
		attributeGetterFunctions.put("status", SubProgram::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<SubProgram, Integer>)SubProgram::setStatus);
		attributeGetterFunctions.put("userId", SubProgram::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<SubProgram, Long>)SubProgram::setUserId);
		attributeGetterFunctions.put("createDate", SubProgram::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<SubProgram, Date>)SubProgram::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", SubProgram::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<SubProgram, Date>)SubProgram::setModifiedDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getSubProgramId() {
		return _subProgramId;
	}

	@Override
	public void setSubProgramId(long subProgramId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_subProgramId = subProgramId;
	}

	@Override
	public String getDeliveryNo() {
		if (_deliveryNo == null) {
			return "";
		}
		else {
			return _deliveryNo;
		}
	}

	@Override
	public void setDeliveryNo(String deliveryNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveryNo = deliveryNo;
	}

	@Override
	public String getMemoNo() {
		if (_memoNo == null) {
			return "";
		}
		else {
			return _memoNo;
		}
	}

	@Override
	public void setMemoNo(String memoNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_memoNo = memoNo;
	}

	@Override
	public String getSendingDepot() {
		if (_sendingDepot == null) {
			return "";
		}
		else {
			return _sendingDepot;
		}
	}

	@Override
	public void setSendingDepot(String sendingDepot) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendingDepot = sendingDepot;
	}

	@Override
	public String getSendingPlantDesc() {
		if (_sendingPlantDesc == null) {
			return "";
		}
		else {
			return _sendingPlantDesc;
		}
	}

	@Override
	public void setSendingPlantDesc(String sendingPlantDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendingPlantDesc = sendingPlantDesc;
	}

	@Override
	public String getReceivingDepot() {
		if (_receivingDepot == null) {
			return "";
		}
		else {
			return _receivingDepot;
		}
	}

	@Override
	public void setReceivingDepot(String receivingDepot) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivingDepot = receivingDepot;
	}

	@Override
	public String getReceivingPlantDesc() {
		if (_receivingPlantDesc == null) {
			return "";
		}
		else {
			return _receivingPlantDesc;
		}
	}

	@Override
	public void setReceivingPlantDesc(String receivingPlantDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivingPlantDesc = receivingPlantDesc;
	}

	@Override
	public String getProduct() {
		if (_product == null) {
			return "";
		}
		else {
			return _product;
		}
	}

	@Override
	public void setProduct(String product) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_product = product;
	}

	@Override
	public Map<String, Serializable> getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(Map<String, Serializable> quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@Override
	public Date getDeliveryDate() {
		return _deliveryDate;
	}

	@Override
	public void setDeliveryDate(Date deliveryDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveryDate = deliveryDate;
	}

	@Override
	public Date getRequestedDate() {
		return _requestedDate;
	}

	@Override
	public void setRequestedDate(Date requestedDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_requestedDate = requestedDate;
	}

	@Override
	public String getForwardingAgent() {
		if (_forwardingAgent == null) {
			return "";
		}
		else {
			return _forwardingAgent;
		}
	}

	@Override
	public void setForwardingAgent(String forwardingAgent) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_forwardingAgent = forwardingAgent;
	}

	@Override
	public Date getVehicleSendDate() {
		return _vehicleSendDate;
	}

	@Override
	public void setVehicleSendDate(Date vehicleSendDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vehicleSendDate = vehicleSendDate;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_status = status;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_modifiedDate = modifiedDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, SubProgram.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SubProgram toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, SubProgram>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SubProgramImpl subProgramImpl = new SubProgramImpl();

		subProgramImpl.setSubProgramId(getSubProgramId());
		subProgramImpl.setDeliveryNo(getDeliveryNo());
		subProgramImpl.setMemoNo(getMemoNo());
		subProgramImpl.setSendingDepot(getSendingDepot());
		subProgramImpl.setSendingPlantDesc(getSendingPlantDesc());
		subProgramImpl.setReceivingDepot(getReceivingDepot());
		subProgramImpl.setReceivingPlantDesc(getReceivingPlantDesc());
		subProgramImpl.setProduct(getProduct());
		subProgramImpl.setQuantity(getQuantity());
		subProgramImpl.setDeliveryDate(getDeliveryDate());
		subProgramImpl.setRequestedDate(getRequestedDate());
		subProgramImpl.setForwardingAgent(getForwardingAgent());
		subProgramImpl.setVehicleSendDate(getVehicleSendDate());
		subProgramImpl.setStatus(getStatus());
		subProgramImpl.setUserId(getUserId());
		subProgramImpl.setCreateDate(getCreateDate());
		subProgramImpl.setModifiedDate(getModifiedDate());

		subProgramImpl.resetOriginalValues();

		return subProgramImpl;
	}

	@Override
	public SubProgram cloneWithOriginalValues() {
		SubProgramImpl subProgramImpl = new SubProgramImpl();

		subProgramImpl.setSubProgramId(
			this.<Long>getColumnOriginalValue("subProgramId"));
		subProgramImpl.setDeliveryNo(
			this.<String>getColumnOriginalValue("deliveryNo"));
		subProgramImpl.setMemoNo(this.<String>getColumnOriginalValue("memoNo"));
		subProgramImpl.setSendingDepot(
			this.<String>getColumnOriginalValue("sendingDepot"));
		subProgramImpl.setSendingPlantDesc(
			this.<String>getColumnOriginalValue("sendingPlantDesc"));
		subProgramImpl.setReceivingDepot(
			this.<String>getColumnOriginalValue("receivingDepot"));
		subProgramImpl.setReceivingPlantDesc(
			this.<String>getColumnOriginalValue("receivingPlantDesc"));
		subProgramImpl.setProduct(
			this.<String>getColumnOriginalValue("product"));
		subProgramImpl.setQuantity(
			this.<Map>getColumnOriginalValue("quantity"));
		subProgramImpl.setDeliveryDate(
			this.<Date>getColumnOriginalValue("deliveryDate"));
		subProgramImpl.setRequestedDate(
			this.<Date>getColumnOriginalValue("requestedDate"));
		subProgramImpl.setForwardingAgent(
			this.<String>getColumnOriginalValue("forwardingAgent"));
		subProgramImpl.setVehicleSendDate(
			this.<Date>getColumnOriginalValue("vehicleSendDate"));
		subProgramImpl.setStatus(
			this.<Integer>getColumnOriginalValue("status"));
		subProgramImpl.setUserId(this.<Long>getColumnOriginalValue("userId"));
		subProgramImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));
		subProgramImpl.setModifiedDate(
			this.<Date>getColumnOriginalValue("modifiedDate"));

		return subProgramImpl;
	}

	@Override
	public int compareTo(SubProgram subProgram) {
		long primaryKey = subProgram.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof SubProgram)) {
			return false;
		}

		SubProgram subProgram = (SubProgram)object;

		long primaryKey = subProgram.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_setModifiedDate = false;

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<SubProgram> toCacheModel() {
		SubProgramCacheModel subProgramCacheModel = new SubProgramCacheModel();

		subProgramCacheModel.subProgramId = getSubProgramId();

		subProgramCacheModel.deliveryNo = getDeliveryNo();

		String deliveryNo = subProgramCacheModel.deliveryNo;

		if ((deliveryNo != null) && (deliveryNo.length() == 0)) {
			subProgramCacheModel.deliveryNo = null;
		}

		subProgramCacheModel.memoNo = getMemoNo();

		String memoNo = subProgramCacheModel.memoNo;

		if ((memoNo != null) && (memoNo.length() == 0)) {
			subProgramCacheModel.memoNo = null;
		}

		subProgramCacheModel.sendingDepot = getSendingDepot();

		String sendingDepot = subProgramCacheModel.sendingDepot;

		if ((sendingDepot != null) && (sendingDepot.length() == 0)) {
			subProgramCacheModel.sendingDepot = null;
		}

		subProgramCacheModel.sendingPlantDesc = getSendingPlantDesc();

		String sendingPlantDesc = subProgramCacheModel.sendingPlantDesc;

		if ((sendingPlantDesc != null) && (sendingPlantDesc.length() == 0)) {
			subProgramCacheModel.sendingPlantDesc = null;
		}

		subProgramCacheModel.receivingDepot = getReceivingDepot();

		String receivingDepot = subProgramCacheModel.receivingDepot;

		if ((receivingDepot != null) && (receivingDepot.length() == 0)) {
			subProgramCacheModel.receivingDepot = null;
		}

		subProgramCacheModel.receivingPlantDesc = getReceivingPlantDesc();

		String receivingPlantDesc = subProgramCacheModel.receivingPlantDesc;

		if ((receivingPlantDesc != null) &&
			(receivingPlantDesc.length() == 0)) {

			subProgramCacheModel.receivingPlantDesc = null;
		}

		subProgramCacheModel.product = getProduct();

		String product = subProgramCacheModel.product;

		if ((product != null) && (product.length() == 0)) {
			subProgramCacheModel.product = null;
		}

		subProgramCacheModel.quantity = getQuantity();

		Date deliveryDate = getDeliveryDate();

		if (deliveryDate != null) {
			subProgramCacheModel.deliveryDate = deliveryDate.getTime();
		}
		else {
			subProgramCacheModel.deliveryDate = Long.MIN_VALUE;
		}

		Date requestedDate = getRequestedDate();

		if (requestedDate != null) {
			subProgramCacheModel.requestedDate = requestedDate.getTime();
		}
		else {
			subProgramCacheModel.requestedDate = Long.MIN_VALUE;
		}

		subProgramCacheModel.forwardingAgent = getForwardingAgent();

		String forwardingAgent = subProgramCacheModel.forwardingAgent;

		if ((forwardingAgent != null) && (forwardingAgent.length() == 0)) {
			subProgramCacheModel.forwardingAgent = null;
		}

		Date vehicleSendDate = getVehicleSendDate();

		if (vehicleSendDate != null) {
			subProgramCacheModel.vehicleSendDate = vehicleSendDate.getTime();
		}
		else {
			subProgramCacheModel.vehicleSendDate = Long.MIN_VALUE;
		}

		subProgramCacheModel.status = getStatus();

		subProgramCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			subProgramCacheModel.createDate = createDate.getTime();
		}
		else {
			subProgramCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			subProgramCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			subProgramCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		return subProgramCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<SubProgram, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<SubProgram, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SubProgram, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((SubProgram)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<SubProgram, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<SubProgram, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<SubProgram, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((SubProgram)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, SubProgram>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					SubProgram.class, ModelWrapper.class);

	}

	private long _subProgramId;
	private String _deliveryNo;
	private String _memoNo;
	private String _sendingDepot;
	private String _sendingPlantDesc;
	private String _receivingDepot;
	private String _receivingPlantDesc;
	private String _product;
	private Map<String, Serializable> _quantity;
	private Date _deliveryDate;
	private Date _requestedDate;
	private String _forwardingAgent;
	private Date _vehicleSendDate;
	private int _status;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;

	public <T> T getColumnValue(String columnName) {
		Function<SubProgram, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((SubProgram)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("subProgramId", _subProgramId);
		_columnOriginalValues.put("deliveryNo", _deliveryNo);
		_columnOriginalValues.put("memoNo", _memoNo);
		_columnOriginalValues.put("sendingDepot", _sendingDepot);
		_columnOriginalValues.put("sendingPlantDesc", _sendingPlantDesc);
		_columnOriginalValues.put("receivingDepot", _receivingDepot);
		_columnOriginalValues.put("receivingPlantDesc", _receivingPlantDesc);
		_columnOriginalValues.put("product", _product);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("deliveryDate", _deliveryDate);
		_columnOriginalValues.put("requestedDate", _requestedDate);
		_columnOriginalValues.put("forwardingAgent", _forwardingAgent);
		_columnOriginalValues.put("vehicleSendDate", _vehicleSendDate);
		_columnOriginalValues.put("status", _status);
		_columnOriginalValues.put("userId", _userId);
		_columnOriginalValues.put("createDate", _createDate);
		_columnOriginalValues.put("modifiedDate", _modifiedDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("subProgramId", 1L);

		columnBitmasks.put("deliveryNo", 2L);

		columnBitmasks.put("memoNo", 4L);

		columnBitmasks.put("sendingDepot", 8L);

		columnBitmasks.put("sendingPlantDesc", 16L);

		columnBitmasks.put("receivingDepot", 32L);

		columnBitmasks.put("receivingPlantDesc", 64L);

		columnBitmasks.put("product", 128L);

		columnBitmasks.put("quantity", 256L);

		columnBitmasks.put("deliveryDate", 512L);

		columnBitmasks.put("requestedDate", 1024L);

		columnBitmasks.put("forwardingAgent", 2048L);

		columnBitmasks.put("vehicleSendDate", 4096L);

		columnBitmasks.put("status", 8192L);

		columnBitmasks.put("userId", 16384L);

		columnBitmasks.put("createDate", 32768L);

		columnBitmasks.put("modifiedDate", 65536L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private SubProgram _escapedModel;

}