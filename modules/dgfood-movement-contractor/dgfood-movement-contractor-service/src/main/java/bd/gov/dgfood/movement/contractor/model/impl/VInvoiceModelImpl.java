/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package bd.gov.dgfood.movement.contractor.model.impl;

import bd.gov.dgfood.movement.contractor.model.VInvoice;
import bd.gov.dgfood.movement.contractor.model.VInvoiceModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringUtil;

import java.io.Serializable;

import java.lang.reflect.InvocationHandler;

import java.sql.Blob;
import java.sql.Types;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the VInvoice service. Represents a row in the &quot;DGFOOD_VInvoice&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>VInvoiceModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link VInvoiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see VInvoiceImpl
 * @generated
 */
public class VInvoiceModelImpl
	extends BaseModelImpl<VInvoice> implements VInvoiceModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a v invoice model instance should use the <code>VInvoice</code> interface instead.
	 */
	public static final String TABLE_NAME = "DGFOOD_VInvoice";

	public static final Object[][] TABLE_COLUMNS = {
		{"vInvoiceId", Types.BIGINT}, {"vInvoiceNo", Types.VARCHAR},
		{"deliveryNo", Types.VARCHAR}, {"sendingPlant", Types.VARCHAR},
		{"sendingPlantDesc", Types.VARCHAR}, {"receivingPlant", Types.VARCHAR},
		{"receivingPlantDesc", Types.VARCHAR}, {"userName", Types.VARCHAR},
		{"departureDate", Types.TIMESTAMP}, {"materialNo", Types.VARCHAR},
		{"materialDescription", Types.VARCHAR}, {"quantity", Types.CLOB},
		{"bagQuantity", Types.DOUBLE}, {"grossWeight", Types.DOUBLE},
		{"netWeight", Types.DOUBLE}, {"storageLocation", Types.VARCHAR},
		{"storageBin", Types.VARCHAR}, {"carrier", Types.VARCHAR},
		{"transportationMode", Types.VARCHAR},
		{"meansOfTransport", Types.VARCHAR}, {"createDate", Types.TIMESTAMP}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("vInvoiceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("vInvoiceNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("deliveryNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sendingPlant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sendingPlantDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivingPlant", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("receivingPlantDesc", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("departureDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("materialNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("materialDescription", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("quantity", Types.CLOB);
		TABLE_COLUMNS_MAP.put("bagQuantity", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("grossWeight", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("netWeight", Types.DOUBLE);
		TABLE_COLUMNS_MAP.put("storageLocation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("storageBin", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("carrier", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("transportationMode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("meansOfTransport", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE =
		"create table DGFOOD_VInvoice (vInvoiceId LONG not null primary key,vInvoiceNo VARCHAR(75) null,deliveryNo VARCHAR(75) null,sendingPlant VARCHAR(75) null,sendingPlantDesc VARCHAR(75) null,receivingPlant VARCHAR(75) null,receivingPlantDesc VARCHAR(75) null,userName VARCHAR(75) null,departureDate DATE null,materialNo VARCHAR(75) null,materialDescription VARCHAR(75) null,quantity TEXT null,bagQuantity DOUBLE,grossWeight DOUBLE,netWeight DOUBLE,storageLocation VARCHAR(75) null,storageBin VARCHAR(75) null,carrier VARCHAR(75) null,transportationMode VARCHAR(75) null,meansOfTransport VARCHAR(75) null,createDate DATE null)";

	public static final String TABLE_SQL_DROP = "drop table DGFOOD_VInvoice";

	public static final String ORDER_BY_JPQL =
		" ORDER BY vInvoice.vInvoiceId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY DGFOOD_VInvoice.vInvoiceId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	/**
	 * @deprecated As of Athanasius (7.3.x), replaced by {@link
	 *		#getColumnBitmask(String)}
	 */
	@Deprecated
	public static final long VINVOICEID_COLUMN_BITMASK = 1L;

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
	}

	public VInvoiceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _vInvoiceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setVInvoiceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _vInvoiceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return VInvoice.class;
	}

	@Override
	public String getModelClassName() {
		return VInvoice.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<VInvoice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<VInvoice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VInvoice, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((VInvoice)this));
		}

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<VInvoice, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<VInvoice, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(VInvoice)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<VInvoice, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<VInvoice, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<VInvoice, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<VInvoice, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<VInvoice, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<VInvoice, Object>>();
		Map<String, BiConsumer<VInvoice, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<VInvoice, ?>>();

		attributeGetterFunctions.put("vInvoiceId", VInvoice::getVInvoiceId);
		attributeSetterBiConsumers.put(
			"vInvoiceId", (BiConsumer<VInvoice, Long>)VInvoice::setVInvoiceId);
		attributeGetterFunctions.put("vInvoiceNo", VInvoice::getVInvoiceNo);
		attributeSetterBiConsumers.put(
			"vInvoiceNo",
			(BiConsumer<VInvoice, String>)VInvoice::setVInvoiceNo);
		attributeGetterFunctions.put("deliveryNo", VInvoice::getDeliveryNo);
		attributeSetterBiConsumers.put(
			"deliveryNo",
			(BiConsumer<VInvoice, String>)VInvoice::setDeliveryNo);
		attributeGetterFunctions.put("sendingPlant", VInvoice::getSendingPlant);
		attributeSetterBiConsumers.put(
			"sendingPlant",
			(BiConsumer<VInvoice, String>)VInvoice::setSendingPlant);
		attributeGetterFunctions.put(
			"sendingPlantDesc", VInvoice::getSendingPlantDesc);
		attributeSetterBiConsumers.put(
			"sendingPlantDesc",
			(BiConsumer<VInvoice, String>)VInvoice::setSendingPlantDesc);
		attributeGetterFunctions.put(
			"receivingPlant", VInvoice::getReceivingPlant);
		attributeSetterBiConsumers.put(
			"receivingPlant",
			(BiConsumer<VInvoice, String>)VInvoice::setReceivingPlant);
		attributeGetterFunctions.put(
			"receivingPlantDesc", VInvoice::getReceivingPlantDesc);
		attributeSetterBiConsumers.put(
			"receivingPlantDesc",
			(BiConsumer<VInvoice, String>)VInvoice::setReceivingPlantDesc);
		attributeGetterFunctions.put("userName", VInvoice::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<VInvoice, String>)VInvoice::setUserName);
		attributeGetterFunctions.put(
			"departureDate", VInvoice::getDepartureDate);
		attributeSetterBiConsumers.put(
			"departureDate",
			(BiConsumer<VInvoice, Date>)VInvoice::setDepartureDate);
		attributeGetterFunctions.put("materialNo", VInvoice::getMaterialNo);
		attributeSetterBiConsumers.put(
			"materialNo",
			(BiConsumer<VInvoice, String>)VInvoice::setMaterialNo);
		attributeGetterFunctions.put(
			"materialDescription", VInvoice::getMaterialDescription);
		attributeSetterBiConsumers.put(
			"materialDescription",
			(BiConsumer<VInvoice, String>)VInvoice::setMaterialDescription);
		attributeGetterFunctions.put("quantity", VInvoice::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity",
			(BiConsumer<VInvoice, Map<String, Serializable>>)
				VInvoice::setQuantity);
		attributeGetterFunctions.put("bagQuantity", VInvoice::getBagQuantity);
		attributeSetterBiConsumers.put(
			"bagQuantity",
			(BiConsumer<VInvoice, Double>)VInvoice::setBagQuantity);
		attributeGetterFunctions.put("grossWeight", VInvoice::getGrossWeight);
		attributeSetterBiConsumers.put(
			"grossWeight",
			(BiConsumer<VInvoice, Double>)VInvoice::setGrossWeight);
		attributeGetterFunctions.put("netWeight", VInvoice::getNetWeight);
		attributeSetterBiConsumers.put(
			"netWeight", (BiConsumer<VInvoice, Double>)VInvoice::setNetWeight);
		attributeGetterFunctions.put(
			"storageLocation", VInvoice::getStorageLocation);
		attributeSetterBiConsumers.put(
			"storageLocation",
			(BiConsumer<VInvoice, String>)VInvoice::setStorageLocation);
		attributeGetterFunctions.put("storageBin", VInvoice::getStorageBin);
		attributeSetterBiConsumers.put(
			"storageBin",
			(BiConsumer<VInvoice, String>)VInvoice::setStorageBin);
		attributeGetterFunctions.put("carrier", VInvoice::getCarrier);
		attributeSetterBiConsumers.put(
			"carrier", (BiConsumer<VInvoice, String>)VInvoice::setCarrier);
		attributeGetterFunctions.put(
			"transportationMode", VInvoice::getTransportationMode);
		attributeSetterBiConsumers.put(
			"transportationMode",
			(BiConsumer<VInvoice, String>)VInvoice::setTransportationMode);
		attributeGetterFunctions.put(
			"meansOfTransport", VInvoice::getMeansOfTransport);
		attributeSetterBiConsumers.put(
			"meansOfTransport",
			(BiConsumer<VInvoice, String>)VInvoice::setMeansOfTransport);
		attributeGetterFunctions.put("createDate", VInvoice::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<VInvoice, Date>)VInvoice::setCreateDate);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public long getVInvoiceId() {
		return _vInvoiceId;
	}

	@Override
	public void setVInvoiceId(long vInvoiceId) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vInvoiceId = vInvoiceId;
	}

	@Override
	public String getVInvoiceNo() {
		if (_vInvoiceNo == null) {
			return "";
		}
		else {
			return _vInvoiceNo;
		}
	}

	@Override
	public void setVInvoiceNo(String vInvoiceNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_vInvoiceNo = vInvoiceNo;
	}

	@Override
	public String getDeliveryNo() {
		if (_deliveryNo == null) {
			return "";
		}
		else {
			return _deliveryNo;
		}
	}

	@Override
	public void setDeliveryNo(String deliveryNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_deliveryNo = deliveryNo;
	}

	@Override
	public String getSendingPlant() {
		if (_sendingPlant == null) {
			return "";
		}
		else {
			return _sendingPlant;
		}
	}

	@Override
	public void setSendingPlant(String sendingPlant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendingPlant = sendingPlant;
	}

	@Override
	public String getSendingPlantDesc() {
		if (_sendingPlantDesc == null) {
			return "";
		}
		else {
			return _sendingPlantDesc;
		}
	}

	@Override
	public void setSendingPlantDesc(String sendingPlantDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_sendingPlantDesc = sendingPlantDesc;
	}

	@Override
	public String getReceivingPlant() {
		if (_receivingPlant == null) {
			return "";
		}
		else {
			return _receivingPlant;
		}
	}

	@Override
	public void setReceivingPlant(String receivingPlant) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivingPlant = receivingPlant;
	}

	@Override
	public String getReceivingPlantDesc() {
		if (_receivingPlantDesc == null) {
			return "";
		}
		else {
			return _receivingPlantDesc;
		}
	}

	@Override
	public void setReceivingPlantDesc(String receivingPlantDesc) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_receivingPlantDesc = receivingPlantDesc;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_userName = userName;
	}

	@Override
	public Date getDepartureDate() {
		return _departureDate;
	}

	@Override
	public void setDepartureDate(Date departureDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_departureDate = departureDate;
	}

	@Override
	public String getMaterialNo() {
		if (_materialNo == null) {
			return "";
		}
		else {
			return _materialNo;
		}
	}

	@Override
	public void setMaterialNo(String materialNo) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_materialNo = materialNo;
	}

	@Override
	public String getMaterialDescription() {
		if (_materialDescription == null) {
			return "";
		}
		else {
			return _materialDescription;
		}
	}

	@Override
	public void setMaterialDescription(String materialDescription) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_materialDescription = materialDescription;
	}

	@Override
	public Map<String, Serializable> getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(Map<String, Serializable> quantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_quantity = quantity;
	}

	@Override
	public Double getBagQuantity() {
		return _bagQuantity;
	}

	@Override
	public void setBagQuantity(Double bagQuantity) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_bagQuantity = bagQuantity;
	}

	@Override
	public Double getGrossWeight() {
		return _grossWeight;
	}

	@Override
	public void setGrossWeight(Double grossWeight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_grossWeight = grossWeight;
	}

	@Override
	public Double getNetWeight() {
		return _netWeight;
	}

	@Override
	public void setNetWeight(Double netWeight) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_netWeight = netWeight;
	}

	@Override
	public String getStorageLocation() {
		if (_storageLocation == null) {
			return "";
		}
		else {
			return _storageLocation;
		}
	}

	@Override
	public void setStorageLocation(String storageLocation) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_storageLocation = storageLocation;
	}

	@Override
	public String getStorageBin() {
		if (_storageBin == null) {
			return "";
		}
		else {
			return _storageBin;
		}
	}

	@Override
	public void setStorageBin(String storageBin) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_storageBin = storageBin;
	}

	@Override
	public String getCarrier() {
		if (_carrier == null) {
			return "";
		}
		else {
			return _carrier;
		}
	}

	@Override
	public void setCarrier(String carrier) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_carrier = carrier;
	}

	@Override
	public String getTransportationMode() {
		if (_transportationMode == null) {
			return "";
		}
		else {
			return _transportationMode;
		}
	}

	@Override
	public void setTransportationMode(String transportationMode) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_transportationMode = transportationMode;
	}

	@Override
	public String getMeansOfTransport() {
		if (_meansOfTransport == null) {
			return "";
		}
		else {
			return _meansOfTransport;
		}
	}

	@Override
	public void setMeansOfTransport(String meansOfTransport) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_meansOfTransport = meansOfTransport;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		_createDate = createDate;
	}

	public long getColumnBitmask() {
		if (_columnBitmask > 0) {
			return _columnBitmask;
		}

		if ((_columnOriginalValues == null) ||
			(_columnOriginalValues == Collections.EMPTY_MAP)) {

			return 0;
		}

		for (Map.Entry<String, Object> entry :
				_columnOriginalValues.entrySet()) {

			if (!Objects.equals(
					entry.getValue(), getColumnValue(entry.getKey()))) {

				_columnBitmask |= _columnBitmasks.get(entry.getKey());
			}
		}

		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, VInvoice.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public VInvoice toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, VInvoice>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		VInvoiceImpl vInvoiceImpl = new VInvoiceImpl();

		vInvoiceImpl.setVInvoiceId(getVInvoiceId());
		vInvoiceImpl.setVInvoiceNo(getVInvoiceNo());
		vInvoiceImpl.setDeliveryNo(getDeliveryNo());
		vInvoiceImpl.setSendingPlant(getSendingPlant());
		vInvoiceImpl.setSendingPlantDesc(getSendingPlantDesc());
		vInvoiceImpl.setReceivingPlant(getReceivingPlant());
		vInvoiceImpl.setReceivingPlantDesc(getReceivingPlantDesc());
		vInvoiceImpl.setUserName(getUserName());
		vInvoiceImpl.setDepartureDate(getDepartureDate());
		vInvoiceImpl.setMaterialNo(getMaterialNo());
		vInvoiceImpl.setMaterialDescription(getMaterialDescription());
		vInvoiceImpl.setQuantity(getQuantity());
		vInvoiceImpl.setBagQuantity(getBagQuantity());
		vInvoiceImpl.setGrossWeight(getGrossWeight());
		vInvoiceImpl.setNetWeight(getNetWeight());
		vInvoiceImpl.setStorageLocation(getStorageLocation());
		vInvoiceImpl.setStorageBin(getStorageBin());
		vInvoiceImpl.setCarrier(getCarrier());
		vInvoiceImpl.setTransportationMode(getTransportationMode());
		vInvoiceImpl.setMeansOfTransport(getMeansOfTransport());
		vInvoiceImpl.setCreateDate(getCreateDate());

		vInvoiceImpl.resetOriginalValues();

		return vInvoiceImpl;
	}

	@Override
	public VInvoice cloneWithOriginalValues() {
		VInvoiceImpl vInvoiceImpl = new VInvoiceImpl();

		vInvoiceImpl.setVInvoiceId(
			this.<Long>getColumnOriginalValue("vInvoiceId"));
		vInvoiceImpl.setVInvoiceNo(
			this.<String>getColumnOriginalValue("vInvoiceNo"));
		vInvoiceImpl.setDeliveryNo(
			this.<String>getColumnOriginalValue("deliveryNo"));
		vInvoiceImpl.setSendingPlant(
			this.<String>getColumnOriginalValue("sendingPlant"));
		vInvoiceImpl.setSendingPlantDesc(
			this.<String>getColumnOriginalValue("sendingPlantDesc"));
		vInvoiceImpl.setReceivingPlant(
			this.<String>getColumnOriginalValue("receivingPlant"));
		vInvoiceImpl.setReceivingPlantDesc(
			this.<String>getColumnOriginalValue("receivingPlantDesc"));
		vInvoiceImpl.setUserName(
			this.<String>getColumnOriginalValue("userName"));
		vInvoiceImpl.setDepartureDate(
			this.<Date>getColumnOriginalValue("departureDate"));
		vInvoiceImpl.setMaterialNo(
			this.<String>getColumnOriginalValue("materialNo"));
		vInvoiceImpl.setMaterialDescription(
			this.<String>getColumnOriginalValue("materialDescription"));
		vInvoiceImpl.setQuantity(this.<Map>getColumnOriginalValue("quantity"));
		vInvoiceImpl.setBagQuantity(
			this.<Double>getColumnOriginalValue("bagQuantity"));
		vInvoiceImpl.setGrossWeight(
			this.<Double>getColumnOriginalValue("grossWeight"));
		vInvoiceImpl.setNetWeight(
			this.<Double>getColumnOriginalValue("netWeight"));
		vInvoiceImpl.setStorageLocation(
			this.<String>getColumnOriginalValue("storageLocation"));
		vInvoiceImpl.setStorageBin(
			this.<String>getColumnOriginalValue("storageBin"));
		vInvoiceImpl.setCarrier(this.<String>getColumnOriginalValue("carrier"));
		vInvoiceImpl.setTransportationMode(
			this.<String>getColumnOriginalValue("transportationMode"));
		vInvoiceImpl.setMeansOfTransport(
			this.<String>getColumnOriginalValue("meansOfTransport"));
		vInvoiceImpl.setCreateDate(
			this.<Date>getColumnOriginalValue("createDate"));

		return vInvoiceImpl;
	}

	@Override
	public int compareTo(VInvoice vInvoice) {
		long primaryKey = vInvoice.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object object) {
		if (this == object) {
			return true;
		}

		if (!(object instanceof VInvoice)) {
			return false;
		}

		VInvoice vInvoice = (VInvoice)object;

		long primaryKey = vInvoice.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isEntityCacheEnabled() {
		return true;
	}

	/**
	 * @deprecated As of Athanasius (7.3.x), with no direct replacement
	 */
	@Deprecated
	@Override
	public boolean isFinderCacheEnabled() {
		return true;
	}

	@Override
	public void resetOriginalValues() {
		_columnOriginalValues = Collections.emptyMap();

		_columnBitmask = 0;
	}

	@Override
	public CacheModel<VInvoice> toCacheModel() {
		VInvoiceCacheModel vInvoiceCacheModel = new VInvoiceCacheModel();

		vInvoiceCacheModel.vInvoiceId = getVInvoiceId();

		vInvoiceCacheModel.vInvoiceNo = getVInvoiceNo();

		String vInvoiceNo = vInvoiceCacheModel.vInvoiceNo;

		if ((vInvoiceNo != null) && (vInvoiceNo.length() == 0)) {
			vInvoiceCacheModel.vInvoiceNo = null;
		}

		vInvoiceCacheModel.deliveryNo = getDeliveryNo();

		String deliveryNo = vInvoiceCacheModel.deliveryNo;

		if ((deliveryNo != null) && (deliveryNo.length() == 0)) {
			vInvoiceCacheModel.deliveryNo = null;
		}

		vInvoiceCacheModel.sendingPlant = getSendingPlant();

		String sendingPlant = vInvoiceCacheModel.sendingPlant;

		if ((sendingPlant != null) && (sendingPlant.length() == 0)) {
			vInvoiceCacheModel.sendingPlant = null;
		}

		vInvoiceCacheModel.sendingPlantDesc = getSendingPlantDesc();

		String sendingPlantDesc = vInvoiceCacheModel.sendingPlantDesc;

		if ((sendingPlantDesc != null) && (sendingPlantDesc.length() == 0)) {
			vInvoiceCacheModel.sendingPlantDesc = null;
		}

		vInvoiceCacheModel.receivingPlant = getReceivingPlant();

		String receivingPlant = vInvoiceCacheModel.receivingPlant;

		if ((receivingPlant != null) && (receivingPlant.length() == 0)) {
			vInvoiceCacheModel.receivingPlant = null;
		}

		vInvoiceCacheModel.receivingPlantDesc = getReceivingPlantDesc();

		String receivingPlantDesc = vInvoiceCacheModel.receivingPlantDesc;

		if ((receivingPlantDesc != null) &&
			(receivingPlantDesc.length() == 0)) {

			vInvoiceCacheModel.receivingPlantDesc = null;
		}

		vInvoiceCacheModel.userName = getUserName();

		String userName = vInvoiceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			vInvoiceCacheModel.userName = null;
		}

		Date departureDate = getDepartureDate();

		if (departureDate != null) {
			vInvoiceCacheModel.departureDate = departureDate.getTime();
		}
		else {
			vInvoiceCacheModel.departureDate = Long.MIN_VALUE;
		}

		vInvoiceCacheModel.materialNo = getMaterialNo();

		String materialNo = vInvoiceCacheModel.materialNo;

		if ((materialNo != null) && (materialNo.length() == 0)) {
			vInvoiceCacheModel.materialNo = null;
		}

		vInvoiceCacheModel.materialDescription = getMaterialDescription();

		String materialDescription = vInvoiceCacheModel.materialDescription;

		if ((materialDescription != null) &&
			(materialDescription.length() == 0)) {

			vInvoiceCacheModel.materialDescription = null;
		}

		vInvoiceCacheModel.quantity = getQuantity();

		Double bagQuantity = getBagQuantity();

		if (bagQuantity != null) {
			vInvoiceCacheModel.bagQuantity = bagQuantity;
		}

		Double grossWeight = getGrossWeight();

		if (grossWeight != null) {
			vInvoiceCacheModel.grossWeight = grossWeight;
		}

		Double netWeight = getNetWeight();

		if (netWeight != null) {
			vInvoiceCacheModel.netWeight = netWeight;
		}

		vInvoiceCacheModel.storageLocation = getStorageLocation();

		String storageLocation = vInvoiceCacheModel.storageLocation;

		if ((storageLocation != null) && (storageLocation.length() == 0)) {
			vInvoiceCacheModel.storageLocation = null;
		}

		vInvoiceCacheModel.storageBin = getStorageBin();

		String storageBin = vInvoiceCacheModel.storageBin;

		if ((storageBin != null) && (storageBin.length() == 0)) {
			vInvoiceCacheModel.storageBin = null;
		}

		vInvoiceCacheModel.carrier = getCarrier();

		String carrier = vInvoiceCacheModel.carrier;

		if ((carrier != null) && (carrier.length() == 0)) {
			vInvoiceCacheModel.carrier = null;
		}

		vInvoiceCacheModel.transportationMode = getTransportationMode();

		String transportationMode = vInvoiceCacheModel.transportationMode;

		if ((transportationMode != null) &&
			(transportationMode.length() == 0)) {

			vInvoiceCacheModel.transportationMode = null;
		}

		vInvoiceCacheModel.meansOfTransport = getMeansOfTransport();

		String meansOfTransport = vInvoiceCacheModel.meansOfTransport;

		if ((meansOfTransport != null) && (meansOfTransport.length() == 0)) {
			vInvoiceCacheModel.meansOfTransport = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			vInvoiceCacheModel.createDate = createDate.getTime();
		}
		else {
			vInvoiceCacheModel.createDate = Long.MIN_VALUE;
		}

		return vInvoiceCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<VInvoice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 2);

		sb.append("{");

		for (Map.Entry<String, Function<VInvoice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VInvoice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("\"");
			sb.append(attributeName);
			sb.append("\": ");

			Object value = attributeGetterFunction.apply((VInvoice)this);

			if (value == null) {
				sb.append("null");
			}
			else if (value instanceof Blob || value instanceof Date ||
					 value instanceof Map || value instanceof String) {

				sb.append(
					"\"" + StringUtil.replace(value.toString(), "\"", "'") +
						"\"");
			}
			else {
				sb.append(value);
			}

			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<VInvoice, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			(5 * attributeGetterFunctions.size()) + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<VInvoice, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<VInvoice, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((VInvoice)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, VInvoice>
			_escapedModelProxyProviderFunction =
				ProxyUtil.getProxyProviderFunction(
					VInvoice.class, ModelWrapper.class);

	}

	private long _vInvoiceId;
	private String _vInvoiceNo;
	private String _deliveryNo;
	private String _sendingPlant;
	private String _sendingPlantDesc;
	private String _receivingPlant;
	private String _receivingPlantDesc;
	private String _userName;
	private Date _departureDate;
	private String _materialNo;
	private String _materialDescription;
	private Map<String, Serializable> _quantity;
	private Double _bagQuantity;
	private Double _grossWeight;
	private Double _netWeight;
	private String _storageLocation;
	private String _storageBin;
	private String _carrier;
	private String _transportationMode;
	private String _meansOfTransport;
	private Date _createDate;

	public <T> T getColumnValue(String columnName) {
		Function<VInvoice, Object> function = _attributeGetterFunctions.get(
			columnName);

		if (function == null) {
			throw new IllegalArgumentException(
				"No attribute getter function found for " + columnName);
		}

		return (T)function.apply((VInvoice)this);
	}

	public <T> T getColumnOriginalValue(String columnName) {
		if (_columnOriginalValues == null) {
			return null;
		}

		if (_columnOriginalValues == Collections.EMPTY_MAP) {
			_setColumnOriginalValues();
		}

		return (T)_columnOriginalValues.get(columnName);
	}

	private void _setColumnOriginalValues() {
		_columnOriginalValues = new HashMap<String, Object>();

		_columnOriginalValues.put("vInvoiceId", _vInvoiceId);
		_columnOriginalValues.put("vInvoiceNo", _vInvoiceNo);
		_columnOriginalValues.put("deliveryNo", _deliveryNo);
		_columnOriginalValues.put("sendingPlant", _sendingPlant);
		_columnOriginalValues.put("sendingPlantDesc", _sendingPlantDesc);
		_columnOriginalValues.put("receivingPlant", _receivingPlant);
		_columnOriginalValues.put("receivingPlantDesc", _receivingPlantDesc);
		_columnOriginalValues.put("userName", _userName);
		_columnOriginalValues.put("departureDate", _departureDate);
		_columnOriginalValues.put("materialNo", _materialNo);
		_columnOriginalValues.put("materialDescription", _materialDescription);
		_columnOriginalValues.put("quantity", _quantity);
		_columnOriginalValues.put("bagQuantity", _bagQuantity);
		_columnOriginalValues.put("grossWeight", _grossWeight);
		_columnOriginalValues.put("netWeight", _netWeight);
		_columnOriginalValues.put("storageLocation", _storageLocation);
		_columnOriginalValues.put("storageBin", _storageBin);
		_columnOriginalValues.put("carrier", _carrier);
		_columnOriginalValues.put("transportationMode", _transportationMode);
		_columnOriginalValues.put("meansOfTransport", _meansOfTransport);
		_columnOriginalValues.put("createDate", _createDate);
	}

	private transient Map<String, Object> _columnOriginalValues;

	public static long getColumnBitmask(String columnName) {
		return _columnBitmasks.get(columnName);
	}

	private static final Map<String, Long> _columnBitmasks;

	static {
		Map<String, Long> columnBitmasks = new HashMap<>();

		columnBitmasks.put("vInvoiceId", 1L);

		columnBitmasks.put("vInvoiceNo", 2L);

		columnBitmasks.put("deliveryNo", 4L);

		columnBitmasks.put("sendingPlant", 8L);

		columnBitmasks.put("sendingPlantDesc", 16L);

		columnBitmasks.put("receivingPlant", 32L);

		columnBitmasks.put("receivingPlantDesc", 64L);

		columnBitmasks.put("userName", 128L);

		columnBitmasks.put("departureDate", 256L);

		columnBitmasks.put("materialNo", 512L);

		columnBitmasks.put("materialDescription", 1024L);

		columnBitmasks.put("quantity", 2048L);

		columnBitmasks.put("bagQuantity", 4096L);

		columnBitmasks.put("grossWeight", 8192L);

		columnBitmasks.put("netWeight", 16384L);

		columnBitmasks.put("storageLocation", 32768L);

		columnBitmasks.put("storageBin", 65536L);

		columnBitmasks.put("carrier", 131072L);

		columnBitmasks.put("transportationMode", 262144L);

		columnBitmasks.put("meansOfTransport", 524288L);

		columnBitmasks.put("createDate", 1048576L);

		_columnBitmasks = Collections.unmodifiableMap(columnBitmasks);
	}

	private long _columnBitmask;
	private VInvoice _escapedModel;

}